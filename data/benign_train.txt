call var . jmp var . int . int . int . int . int . cmp ecx, dword [var] . jne var . ret 0 . jmp loc.01006307 . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_memset] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_memcpy] . int . int . int . int . int . mov edi, edi . push ebp . mov ebp, esp . sub esp, var . mov eax, dword [var] . xor eax, ebp . mov dword [var], eax . mov dword [var], eax . mov dword [var], ecx . mov dword [var], edx . mov dword [var], ebx . mov dword [var], esi . mov dword [var], edi . mov word [var], ss . mov word [var], cs . mov word [var], ds . mov word [var], es . mov word [var], fs . mov word [var], gs . pushfd . pop dword [var] . mov eax, dword [var] . mov dword [var], eax . lea eax, [var] . mov dword [var], reloc.NETAPI32.dll_DsGetDcNameW . mov dword [var], eax . mov eax, dword [eax - 4] . push var . mov dword [var], eax . call dword [sym.imp.KERNEL32.dll_OutputDebugStringA] . mov ecx, dword [var] . xor ecx, ebp . call var . leave
jmp dword [sym.imp.mscoree.dll__CorExeMain] . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al
call var . jmp var . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_memset] . int . int . int . int . int . cmp ecx, dword [var] . jne var . ret 0 . jmp loc.01001c27 . int . int . int . int . int . mov edi, edi . push ebp . mov ebp, esp . mov eax, dword [ebp + 8] . mov eax, dword [eax] . cmp dword [eax], var . jne var . cmp dword [eax + var], 3 . jne var . mov eax, dword [eax + var] . cmp eax, var . je var . cmp eax, var . je var . cmp eax, var . je var . cmp eax, var . jne var . call dword [sym.imp.msvcrt.dll_void___cdecl_terminate_void] . xor eax, eax . pop ebp . ret 4 . int . int . int . int . int . push var . call dword [sym.imp.KERNEL32.dll_SetUnhandledExceptionFilter] . xor eax, eax . ret . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll__XcptFilter] . int . int . int . int
call var . jmp var . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll___CxxFrameHandler3] . int . int . int . int . int . cmp ecx, dword [var] . jne var . ret 0 . jmp loc.01008c77 . int . int . int . int . int . push eax . push dword fs:[0] . lea eax, [var] . sub esp, dword [var] . push ebx . push esi . push edi . mov dword [eax], ebp . mov ebp, eax . mov eax, dword [var] . xor eax, ebp . push eax . push dword [ebp - 4] . mov dword [ebp - 4], var . lea eax, [ebp - var] . mov dword fs:[0], eax . ret . int . int . int . int . int . push eax . push dword fs:[0] . lea eax, [var] . sub esp, dword [var] . push ebx . push esi . push edi . mov dword [eax], ebp . mov ebp, eax . mov eax, dword [var] . xor eax, ebp . push eax . mov dword [ebp - var], esp . push dword [ebp - 4] . mov dword [ebp - 4], var . lea eax, [ebp - var] . mov dword fs:[0], eax . ret . int
call var . jmp var . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll__wcsnicmp] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_memcpy] . int . int . int . int . int . cmp ecx, dword [var] . jne var . ret 0 . jmp loc.0101d647 . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_memset] . int . int . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll__CxxThrowException] . int . int . int . int . int . mov edi, edi . push ebp . mov ebp, esp . push esi . mov esi, ecx . call dword [sym.imp.msvcrt.dll_public_virtual:_void___thiscall_type_info::_destructor_void] . test byte [ebp + 8], 1 . je var . push esi . call var . pop ecx . mov eax, esi . pop esi . pop ebp . ret 4 . int . int . int . int . int
call var . jmp var . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_void___cdecl_operator_delete_void] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_void_____cdecl_operator_new_unsigned_int] . int . int . int . int . int . cmp ecx, dword [section..data] . jne var . ret 0 . jmp loc.0100494f . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_memset] . int . int . int . int . int . int . int . int . int . int . int . int . int . int . int . int . int . int . push edi . push esi . push ebx . xor edi, edi . mov eax, dword [var] . or eax, eax . jge var . inc edi . mov edx, dword [var] . neg eax . neg edx . sbb eax, 0 . mov dword [var], eax . mov dword [var], edx . mov eax, dword [var]
call var . jmp var . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_malloc] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll__callnewh] . int . int . int . int . int . int . â”œ 6: void sub.msvcrt.dll_free (void *ptr) . jmp dword [sym.imp.msvcrt.dll_free] . int . int . int . int . int . mov edi, edi . push ebp . mov ebp, esp . mov eax, dword [ebp + 8] . mov eax, dword [eax] . cmp dword [eax], var . jne var . cmp dword [eax + var], 3 . jne var . mov eax, dword [eax + var] . cmp eax, var . je var . cmp eax, var . je var . cmp eax, var . je var . cmp eax, var . jne var . call dword [sym.imp.msvcrt.dll_void___cdecl_terminate_void] . xor eax, eax . pop ebp . ret 4 . int . int . int . int . int . push var . call dword [sym.imp.KERNEL32.dll_SetUnhandledExceptionFilter] . xor eax, eax . ret . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll__XcptFilter]
call var . push var . push var . call var . xor ebx, ebx . mov dword [var], ebx . mov eax, dword fs:[var] . mov esi, dword [eax + 4] . mov dword [var], ebx . mov edi, var . push ebx . push esi . push edi . call dword [sym.imp.KERNEL32.dll_InterlockedCompareExchange] . cmp eax, ebx . jne var . xor esi, esi . inc esi . mov eax, dword [var] . cmp eax, esi . je var . mov eax, dword [var] . test eax, eax . jne var . mov dword [var], esi . push var . push var . call var . pop ecx . pop ecx . test eax, eax . jne var . mov eax, dword [var] . cmp eax, esi . jne var . push var . push var . call sub.msvcrt.dll__initterm . pop ecx . pop ecx . mov dword [var], 2 . cmp dword [var], ebx . jne var . push ebx . push edi . call dword [sym.imp.KERNEL32.dll_InterlockedExchange] . cmp dword [var], ebx . jne var . push dword [var] . push dword [var] . push dword [var] . call var . jmp var . mov dword [var], esi . jmp var . nop . nop . nop . add byte [eax], al . add byte [eax], al . mov dword [edi], edx . add byte [ecx], al . add byte [eax], al . add byte [eax], al
0000:0060 b80633 mov ax, var . 0000:0063 cd21 int var . 0000:0065 80fb05 cmp bl, 5 . 0000:0068 7403 je var . 0000:006a eb5d jmp var . 0000:006c 90 nop . 0000:006d 80ff32 cmp bh, var . 0000:0070 7403 je var . 0000:0072 eb55 jmp var . 0000:0074 90 nop . 0000:0075 b415 mov ah, var . 0000:0077 b00b mov al, var . 0000:0079 cd2f int var . 0000:007b 81fbadad cmp bx, var . 0000:007f 7503 jne var . 0000:0081 eb46 jmp var . 0000:0083 90 nop . 0000:0084 06 push es . 0000:0085 1e push ds . 0000:0086 268e062c00 mov es, word es:[var] . 0000:008b b449 mov ah, var . 0000:008d cd21 int var . 0000:008f b435 mov ah, var . 0000:0091 b02f mov al, var . 0000:0093 cd21 int var . 0000:0095 2e891e2f00 mov word cs:[var], bx . 0000:009a 2e8c063100 mov word cs:[var], es . 0000:009f ba0200 mov dx, 2 . 0000:00a2 0e push cs . 0000:00a3 1f pop ds . 0000:00a4 b425 mov ah, var . 0000:00a6 b02f mov al, var . 0000:00a8 cd21 int var . 0000:00aa ba4000 mov dx, var . 0000:00ad c4 invalid . 0000:00ae c45c00 les bx, [si] . 0000:00b1 f5 cmc . 0000:00b2 8016330000 adc byte [var], 0 . 0000:00b7 1f pop ds . 0000:00b8 07 pop es . 0000:00b9 ba6000 mov dx, var . 0000:00bc b104 mov cl, 4 . 0000:00be d3ea shr dx, cl . 0000:00c0 83c210 add dx, var . 0000:00c3 b431 mov ah, var . 0000:00c5 b000 mov al, 0 . 0000:00c7 cd21 int var . 0000:00c9 b8004c mov ax, var . 0000:00cc cd21 int var . 0000:00ce ff invalid . 0000:00cf ff invalid . 0000:00d0 ff invalid . 0000:00d1 ff invalid . 0000:00d2 ff invalid . 0000:00d3 ff invalid . 0000:00d4 ff invalid . 0000:00d5 ff invalid . 0000:00d6 ff invalid . 0000:00d7 ff invalid . 0000:00d8 ff invalid . 0000:00d9 ff invalid . 0000:00da ff invalid . 0000:00db ff invalid . 0000:00dc ff invalid
call var . jmp var . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_void___cdecl_operator_delete_void] . int . int . int . int . int . cmp ecx, dword [var] . jne var . ret 0 . jmp loc.0100cd4d . int . int . int . int . int . int . int . int . int . int . int . int . int . int . int . int . int . push ebx . push esi . mov eax, dword [var] . or eax, eax . jne var . mov ecx, dword [var] . mov eax, dword [var] . xor edx, edx . div ecx . mov ebx, eax . mov eax, dword [var] . div ecx . mov edx, ebx . jmp var . mov ecx, eax . mov ebx, dword [var] . mov edx, dword [var] . mov eax, dword [var] . shr ecx, 1 . rcr ebx, 1 . shr edx, 1 . rcr eax, 1 . or ecx, ecx . jne var . div ebx . mov esi, eax . mul dword [var] . mov ecx, eax . mov eax, dword [var]
call var . jmp var . int . int . int . int . int . cmp ecx, dword [var] . jne var . ret 0 . jmp loc.01008f9d . int . int . int . int . int . int . push var . push dword fs:[0] . mov eax, dword [var] . mov dword [var], ebp . lea ebp, [var] . sub esp, eax . push ebx . push esi . push edi . mov eax, dword [var] . xor dword [ebp - 4], eax . xor eax, ebp . push eax . mov dword [ebp - var], esp . push dword [ebp - 8] . mov eax, dword [ebp - 4] . mov dword [ebp - 4], var . mov dword [ebp - 8], eax . lea eax, [ebp - var] . mov dword fs:[0], eax . ret . mov ecx, dword [var] . mov dword fs:[0], ecx . pop ecx . pop edi . pop edi . pop esi . pop ebx . mov esp, ebp . pop ebp . push ecx . ret . int . int . int . int . int . mov edi, edi . push ebp . mov ebp, esp . push dword [ebp + var] . push dword [ebp + var] . push dword [ebp + var] . push dword [ebp + 8] . push var . push var . call var
call var . jmp var . int . int . int . int . int . cmp ecx, dword [var] . jne var . ret 0 . jmp loc.01005627 . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_memset] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_swprintf_s] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_wcscat_s] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_wcscpy_s] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll__snwprintf_s] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_memcpy] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_vswprintf_s] . int . int . int . int . int
call var . jmp var . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll___CxxFrameHandler3] . int . int . int . int . int . cmp ecx, dword [var] . jne var . ret 0 . jmp loc.010124f7 . int . int . int . int . int . push eax . push dword fs:[0] . lea eax, [var] . sub esp, dword [var] . push ebx . push esi . push edi . mov dword [eax], ebp . mov ebp, eax . mov eax, dword [var] . xor eax, ebp . push eax . push dword [ebp - 4] . mov dword [ebp - 4], var . lea eax, [ebp - var] . mov dword fs:[0], eax . ret . int . int . int . int . int . push eax . push dword fs:[0] . lea eax, [var] . sub esp, dword [var] . push ebx . push esi . push edi . mov dword [eax], ebp . mov ebp, eax . mov eax, dword [var] . xor eax, ebp . push eax . mov dword [ebp - var], esp . push dword [ebp - 4] . mov dword [ebp - 4], var . lea eax, [ebp - var] . mov dword fs:[0], eax . ret . int . int
jmp dword [sym.imp.mscoree.dll__CorExeMain] . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al
call var . jmp var . int . int . int . int . int . mov edi, edi . push ebp . mov ebp, esp . mov eax, dword [ebp + 8] . mov eax, dword [eax] . cmp dword [eax], var . jne var . cmp dword [eax + var], 3 . jne var . mov eax, dword [eax + var] . cmp eax, var . je var . cmp eax, var . je var . cmp eax, var . je var . cmp eax, var . jne var . call dword [sym.imp.msvcrt.dll_void___cdecl_terminate_void] . xor eax, eax . pop ebp . ret 4 . int . int . int . int . int . push var . call dword [sym.imp.KERNEL32.dll_SetUnhandledExceptionFilter] . xor eax, eax . ret . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll__XcptFilter] . int . int . int . int . int . int . int . int . mov edi, edi . push ebp . mov ebp, esp . mov ecx, dword [var] . mov eax, var . cmp word [ecx], ax . je var . xor eax, eax . pop ebp . ret . mov eax, dword [ecx + var] . add eax, ecx
call var . jmp var . int . int . int . int . int . mov edi, edi . push ebp . mov ebp, esp . mov eax, dword [ebp + 8] . mov eax, dword [eax] . cmp dword [eax], var . jne var . cmp dword [eax + var], 3 . jne var . mov eax, dword [eax + var] . cmp eax, var . je var . cmp eax, var . je var . cmp eax, var . je var . cmp eax, var . jne var . call dword [sym.imp.msvcrt.dll_void___cdecl_terminate_void] . xor eax, eax . pop ebp . ret 4 . int . int . int . int . int . push var . call dword [sym.imp.KERNEL32.dll_SetUnhandledExceptionFilter] . xor eax, eax . ret . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll__XcptFilter] . int . int . int . int . int . int . int . int . int . int . mov edi, edi . push ebp . mov ebp, esp . mov ecx, dword [var] . mov eax, var . cmp word [ecx], ax . je var . xor eax, eax . pop ebp
call var . jmp var . push var . push var . call var . xor esi, esi . mov dword [var], esi . mov dword [var], esi . call dword [sym.imp.MSVCR120.dll___crtGetShowWindowMode] . movzx ebx, ax . mov dword [var], esi . mov eax, dword fs:[var] . mov edx, dword [eax + 4] . mov edi, esi . mov esi, var . mov ecx, edx . xor eax, eax . lock cmpxchg dword [esi], ecx . test eax, eax . je var . cmp eax, edx . jne var . xor esi, esi . inc esi . mov edi, esi . jmp var . xor esi, esi . inc esi . cmp dword [var], esi . jne var . push var . call sub.MSVCR120.dll__amsg_exit . pop ecx . jmp var . cmp dword [var], 0 . jne var . mov dword [var], esi . push var . push var . call sub.MSVCR120.dll__initterm_e . pop ecx . pop ecx . test eax, eax . je var . mov dword [var], var . mov eax, var . jmp var . mov dword [var], esi . cmp dword [var], esi . jne var . push var . push var . call sub.MSVCR120.dll__initterm . pop ecx . pop ecx . mov dword [var], 2 . test edi, edi . jne var . xor eax, eax . mov ecx, var . xchg dword [ecx], eax . cmp dword [var], 0 . je var . push var
call var . jmp var . int . int . int . int . int . cmp ecx, dword [var] . jne var . ret 0 . jmp loc.01006107 . int . int . int . int . int . push var . push var . call var . mov eax, dword [var] . mov dword [var], eax . cmp eax, var . jne var . push dword [var] . call dword [sym.imp.msvcrt.dll__onexit] . pop ecx . jmp var . push 8 . call sub.msvcrt.dll__lock . pop ecx . and dword [var], 0 . mov eax, dword [var] . mov dword [var], eax . mov eax, dword [var] . mov dword [var], eax . lea eax, [var] . push eax . lea eax, [var] . push eax . push dword [var] . call sub.msvcrt.dll___dllonexit . add esp, var . mov dword [var], eax . mov eax, dword [var] . mov dword [var], eax . mov eax, dword [var] . mov dword [var], eax . mov dword [var], var . call var . mov eax, dword [var] . call var . ret . push 8 . call sub.msvcrt.dll__unlock . pop ecx . ret . int . int . int . int . int . mov edi, edi . push ebp . mov ebp, esp
call var . jmp var . int . int . int . int . int . push var . push var . call var . and dword [var], 0 . dec dword [var] . js var . mov ecx, dword [var] . sub ecx, dword [var] . mov dword [var], ecx . call dword [var] . jmp var . mov eax, dword [ebp - var] . mov dword [ebp - var], eax . mov eax, dword [ebp - var] . mov eax, dword [eax] . mov dword [ebp - var], eax . mov eax, dword [ebp - var] . cmp dword [eax], var . je var . mov dword [ebp - var], 0 . mov eax, dword [ebp - var] . ret . call dword [sym.imp.msvcrt.dll_void___cdecl_terminate_void] . mov esp, dword [ebp - var] . mov dword [var], var . call var . ret var . int . int . int . int . int . push var . push var . call var . and dword [var], 0 . mov esi, dword [var] . mov eax, esi . imul eax, dword [var] . add dword [var], eax . and dword [var], 0 . dec dword [var] . js var . sub dword [var], esi . mov ecx, dword [var] . call dword [var] . jmp var . mov dword [var], 1 . mov dword [var], var . call var . call var . ret var . cmp dword [var], 0 . jne var . push dword [var] . push dword [var] . push dword [var]
call var . jmp var . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_public:_void___thiscall_exception::constructor_void] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_public_virtual:_char_const_____thiscall_exception::what_void_const] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_public_virtual:_void___thiscall_exception::_destructor_void] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_public:_void___thiscall_exception::constructor_class_exception_const] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_free] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll__CxxThrowException] . int . int . int . int . int . mov edi, edi . push ebp . mov ebp, esp . push esi . mov esi, ecx . call dword [sym.imp.msvcrt.dll_public_virtual:_void___thiscall_type_info::_destructor_void] . test byte [ebp + 8], 1 . je var . push esi . call var . pop ecx . mov eax, esi . pop esi . pop ebp . ret 4 . int
call var . push var . push var . call var . xor ebx, ebx . mov dword [var], ebx . mov eax, dword fs:[var] . mov esi, dword [eax + 4] . mov dword [var], ebx . mov edi, var . push ebx . push esi . push edi . call dword [sym.imp.KERNEL32.dll_InterlockedCompareExchange] . cmp eax, ebx . jne var . xor esi, esi . inc esi . mov eax, dword [var] . cmp eax, esi . je var . mov eax, dword [var] . test eax, eax . jne var . mov dword [var], esi . push var . push var . call var . pop ecx . pop ecx . test eax, eax . jne var . mov eax, dword [var] . cmp eax, esi . jne var . push var . push var . call sub.msvcrt.dll__initterm . pop ecx . pop ecx . mov dword [var], 2 . cmp dword [var], ebx . jne var . push ebx . push edi . call dword [sym.imp.KERNEL32.dll_InterlockedExchange] . cmp dword [var], ebx . jne var . push dword [var] . push dword [var] . push dword [var] . call var . jmp var . mov dword [var], esi . jmp var . nop . add byte [eax], al . add byte [eax], al . sub edi, dword [eax + edx*8 + var] . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . popal
call var . jmp var . int . int . int . int . int . push var . push var . call var . xor eax, eax . xor edi, edi . cmp dword [var], edi . setne al . cmp eax, edi . jne var . call var . mov dword [eax], var . push edi . push edi . push edi . push edi . push edi . call var . add esp, var . or eax, var . jmp var . mov esi, var . push esi . push 1 . call var . pop ecx . pop ecx . mov dword [var], edi . push esi . call var . mov ebx, eax . lea eax, [var] . push eax . push edi . push dword [var] . push esi . call var . mov dword [var], eax . push esi . push ebx . call var . add esp, var . mov dword [var], var . call var . mov eax, dword [var] . call var . ret . mov esi, var . push esi . push 1 . call var . pop ecx . pop ecx . ret . int . int . int . int
call var . jmp var . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_void___cdecl_operator_delete_void] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_memset] . int . int . int . int . int . cmp ecx, dword [var] . jne var . ret 0 . jmp loc.01019fdc . int . int . int . int . int . int . int . int . int . int . int . push ebx . push esi . mov eax, dword [var] . or eax, eax . jne var . mov ecx, dword [var] . mov eax, dword [var] . xor edx, edx . div ecx . mov ebx, eax . mov eax, dword [var] . div ecx . mov edx, ebx . jmp var . mov ecx, eax . mov ebx, dword [var] . mov edx, dword [var] . mov eax, dword [var] . shr ecx, 1 . rcr ebx, 1 . shr edx, 1 . rcr eax, 1 . or ecx, ecx . jne var . div ebx . mov esi, eax . mul dword [var] . mov ecx, eax . mov eax, dword [var]
call var . push var . push var . call var . xor ebx, ebx . mov dword [var], ebx . mov dword [var], ebx . lea eax, [lpStartupInfo] . push eax . call dword [sym.imp.KERNEL32.dll_GetStartupInfoW] . mov dword [var], var . mov dword [var], 1 . mov eax, dword fs:[var] . mov esi, dword [eax + 4] . mov dword [var], ebx . mov edi, var . push ebx . push esi . push edi . call dword [sym.imp.KERNEL32.dll_InterlockedCompareExchange] . cmp eax, ebx . jne var . xor esi, esi . inc esi . mov eax, dword [var] . cmp eax, esi . je var . mov eax, dword [var] . test eax, eax . jne var . mov dword [var], esi . push var . push var . call var . pop ecx . pop ecx . test eax, eax . jne var . mov eax, dword [var] . cmp eax, esi . jne var . push var . push var . call sub.msvcrt.dll__initterm . pop ecx . pop ecx . mov dword [var], 2 . cmp dword [var], ebx . jne var . push ebx . push edi . call dword [sym.imp.KERNEL32.dll_InterlockedExchange] . cmp dword [var], ebx . jne var . mov eax, dword [sym.imp.msvcrt.dll__wcmdln] . cmp dword [eax], ebx . je var . mov eax, dword [eax] . nop . nop . nop . nop . nop . nop
call var . jmp var . push var . push var . call var . and dword [var], 0 . dec dword [var] . js var . mov ecx, dword [var] . sub ecx, dword [var] . mov dword [var], ecx . call dword [var] . jmp var . mov eax, dword [ebp - var] . mov dword [ebp - var], eax . mov eax, dword [ebp - var] . mov eax, dword [eax] . mov dword [ebp - var], eax . mov eax, dword [ebp - var] . cmp dword [eax], var . je var . mov dword [ebp - var], 0 . mov eax, dword [ebp - var] . ret . call sub.MSVCR100.dll_void___cdecl_terminate_void . mov esp, dword [ebp - var] . mov dword [var], var . call var . ret var . push var . push var . call var . and dword [var], 0 . mov esi, dword [var] . mov eax, esi . imul eax, dword [var] . add dword [var], eax . and dword [var], 0 . dec dword [var] . js var . sub dword [var], esi . mov ecx, dword [var] . call dword [var] . jmp var . mov dword [var], 1 . mov dword [var], var . call var . call var . ret var . cmp dword [var], 0 . jne var . push dword [var] . push dword [var] . push dword [var] . push dword [var] . call var . ret . push var . push var . call var . push dword [var] . mov esi, dword [sym.imp.KERNEL32.dll_DecodePointer] . call esi . mov dword [var], eax
call var . jmp var . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_swprintf_s] . int . int . int . int . int . cmp ecx, dword [var] . jne var . ret 0 . jmp loc.010044b7 . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_memcpy] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_wcscpy_s] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_vswprintf_s] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_wcscat_s] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_memset] . int . int . int . int . int . mov edi, edi . push ebp . mov ebp, esp . mov eax, dword [ebp + 8] . mov eax, dword [eax] . cmp dword [eax], var . jne var . cmp dword [eax + var], 3
0000:e0e7 3d4f4b cmp ax, var . 0000:e0ea 7403 je var . 0000:e0ec 33c0 xor ax, ax . 0000:e0ee cb retf . 0000:e0ef 8c0e9a05 mov word [var], cs . 0000:e0f3 8c1e9c05 mov word [var], ds . 0000:e0f7 2e8c1e3000 mov word cs:[var], ds . 0000:e0fc 06 push es . 0000:e0fd b452 mov ah, var . 0000:e0ff cd21 int var . 0000:e101 8cc0 mov ax, es . 0000:e103 c1e004 shl ax, 4 . 0000:e106 058600 add ax, var . 0000:e109 2d0004 sub ax, var . 0000:e10c a3eb06 mov word [var], ax . 0000:e10f c706ed064000 mov word [var], var . 0000:e115 57 push di . 0000:e116 52 push dx . 0000:e117 268b7f6a mov di, word es:[bx + var] . 0000:e11b 893e6d02 mov word [var], di . 0000:e11f 8c066f02 mov word [var], es . 0000:e123 268b4510 mov ax, word es:[di + var] . 0000:e127 a37902 mov word [var], ax . 0000:e12a c7067b020000 mov word [var], 0 . 0000:e130 268b450c mov ax, word es:[di + var] . 0000:e134 a37502 mov word [var], ax . 0000:e137 c70677020000 mov word [var], 0 . 0000:e13d 268b05 mov ax, word es:[di] . 0000:e140 a37102 mov word [var], ax . 0000:e143 c70673020000 mov word [var], 0 . 0000:e149 268b4524 mov ax, word es:[di + var] . 0000:e14d a37d02 mov word [var], ax . 0000:e150 c7067f020000 mov word [var], 0 . 0000:e156 268b4518 mov ax, word es:[di + var] . 0000:e15a a38102 mov word [var], ax . 0000:e15d c70683020000 mov word [var], 0 . 0000:e163 268b4528 mov ax, word es:[di + var] . 0000:e167 a38502 mov word [var], ax . 0000:e16a c70687020000 mov word [var], 0 . 0000:e170 5a pop dx . 0000:e171 5f pop di . 0000:e172 8d5f04 lea bx, [bx + 4] . 0000:e175 891e8902 mov word [var], bx . 0000:e179 8c068b02 mov word [var], es . 0000:e17d 07 pop es . 0000:e17e e8c315 call var . 0000:e181 8936cc05 mov word [var], si . 0000:e185 e88916 call var . 0000:e188 90 nop . 0000:e189 0e push cs . 0000:e18a e881a6 call var . 0000:e18d 90 nop . 0000:e18e 0e push cs . 0000:e18f e8ef6e call var . 0000:e192 e8590e call var . 0000:e195 b880c0 mov ax, var . 0000:e198 0e push cs . 0000:e199 50 push ax . 0000:e19a 6a00 push 0 . 0000:e19c 0e push cs . 0000:e19d 6a00 push 0 . 0000:e19f 6a00 push 0 . 0000:e1a1 e86d52 call entry237 . 0000:e1a4 b880c0 mov ax, var
call var . jmp var . int . int . int . int . int . cmp ecx, dword [section..data] . jne var . ret 0 . jmp loc.01002aa7 . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_memset] . int . int . int . int . int . mov edi, edi . push ebp . mov ebp, esp . mov eax, dword [ebp + 8] . mov eax, dword [eax] . cmp dword [eax], var . jne var . cmp dword [eax + var], 3 . jne var . mov eax, dword [eax + var] . cmp eax, var . je var . cmp eax, var . je var . cmp eax, var . je var . cmp eax, var . jne var . call dword [sym.imp.msvcrt.dll_void___cdecl_terminate_void] . xor eax, eax . pop ebp . ret 4 . int . int . int . int . int . push var . call dword [sym.imp.KERNEL32.dll_SetUnhandledExceptionFilter] . xor eax, eax . ret . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll__XcptFilter] . int . int . int . int
call var . jmp var . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_void___cdecl_operator_delete_void] . int . int . int . int . int . int . int . int . push var . push dword fs:[0] . mov eax, dword [var] . mov dword [var], ebp . lea ebp, [var] . sub esp, eax . push ebx . push esi . push edi . mov eax, dword [var] . xor dword [ebp - 4], eax . xor eax, ebp . push eax . mov dword [ebp - var], esp . push dword [ebp - 8] . mov eax, dword [ebp - 4] . mov dword [ebp - 4], var . mov dword [ebp - 8], eax . lea eax, [ebp - var] . mov dword fs:[0], eax . ret . mov ecx, dword [var] . mov dword fs:[0], ecx . pop ecx . pop edi . pop edi . pop esi . pop ebx . mov esp, ebp . pop ebp . push ecx . ret . int . int . int . int . int . mov edi, edi . push ebp . mov ebp, esp . push dword [ebp + var] . push dword [ebp + var] . push dword [ebp + var] . push dword [ebp + 8] . push var . push var . call sub.msvcrt.dll__except_handler4_common
call var . jmp var . int . int . int . int . int . push var . push dword fs:[0] . mov eax, dword [var] . mov dword [var], ebp . lea ebp, [var] . sub esp, eax . push ebx . push esi . push edi . mov eax, dword [var] . xor dword [ebp - 4], eax . xor eax, ebp . push eax . mov dword [ebp - var], esp . push dword [ebp - 8] . mov eax, dword [ebp - 4] . mov dword [ebp - 4], var . mov dword [ebp - 8], eax . lea eax, [ebp - var] . mov dword fs:[0], eax . ret . mov ecx, dword [var] . mov dword fs:[0], ecx . pop ecx . pop edi . pop edi . pop esi . pop ebx . mov esp, ebp . pop ebp . push ecx . ret . int . int . int . int . int . mov edi, edi . push ebp . mov ebp, esp . push dword [ebp + var] . push dword [ebp + var] . push dword [ebp + var] . push dword [ebp + 8] . push var . push var . call sub.msvcrt.dll__except_handler4_common . add esp, var . pop ebp . ret . int . int . int . int . int . cmp ecx, dword [var] . jne var
call var . jmp var . mov edi, edi . push ebp . mov ebp, esp . sub esp, var . mov dword [var], eax . mov dword [var], ecx . mov dword [var], edx . mov dword [var], ebx . mov dword [var], esi . mov dword [var], edi . mov word [var], ss . mov word [var], cs . mov word [var], ds . mov word [var], es . mov word [var], fs . mov word [var], gs . pushfd . pop dword [var] . mov eax, dword [ebp] . mov dword [var], eax . mov eax, dword [ebp + 4] . mov dword [var], eax . lea eax, [ebp + 8] . mov dword [var], eax . mov eax, dword [ebp - var] . mov dword [var], var . mov eax, dword [var] . mov dword [var], eax . mov dword [var], var . mov dword [var], 1 . mov eax, dword [var] . mov dword [ebp - var], eax . mov eax, dword [var] . mov dword [ebp - var], eax . call dword [sym.imp.KERNEL32.dll_IsDebuggerPresent] . mov dword [var], eax . push 1 . call sub.MSVCR100.dll__crt_debugger_hook . pop ecx . push 0 . call dword [sym.imp.KERNEL32.dll_SetUnhandledExceptionFilter] . push var . call dword [sym.imp.KERNEL32.dll_UnhandledExceptionFilter] . cmp dword [var], 0 . jne var . push 1 . call sub.MSVCR100.dll__crt_debugger_hook . pop ecx . push var . call dword [sym.imp.KERNEL32.dll_GetCurrentProcess] . push eax . call dword [sym.imp.KERNEL32.dll_TerminateProcess] . leave . ret . mov edi, edi . push ebp . mov ebp, esp . mov eax, dword [ebp + 8] . mov eax, dword [eax] . cmp dword [eax], var . jne var . cmp dword [eax + var], 3
call var . jmp var . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll__vsnwprintf] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll__wcsicmp] . int . int . int . int . int . cmp ecx, dword [var] . jne var . ret 0 . jmp loc.0101ce37 . int . int . int . int . int . int . int . int . int . int . int . push ecx . lea ecx, [var] . sub ecx, eax . sbb eax, eax . not eax . and ecx, eax . mov eax, esp . and eax, var . cmp ecx, eax . jb var . mov eax, ecx . pop ecx . xchg eax, esp . mov eax, dword [eax] . mov dword [esp], eax . ret . sub eax, var . test dword [eax], eax . jmp var . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_memset] . int . int . int
call var . jmp var . int . int . int . int . int . cmp ecx, dword [section..data] . jne var . ret 0 . jmp loc.01002ef7 . int . int . int . int . int . mov edi, edi . push ebp . mov ebp, esp . mov eax, dword [ebp + 8] . mov eax, dword [eax] . cmp dword [eax], var . jne var . cmp dword [eax + var], 3 . jne var . mov eax, dword [eax + var] . cmp eax, var . je var . cmp eax, var . je var . cmp eax, var . je var . cmp eax, var . jne var . call dword [sym.imp.msvcrt.dll_void___cdecl_terminate_void] . xor eax, eax . pop ebp . ret 4 . int . int . int . int . int . push var . call dword [sym.imp.KERNEL32.dll_SetUnhandledExceptionFilter] . xor eax, eax . ret . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll__XcptFilter] . int . int . int . int . int . int . mov edi, edi . push ebp . mov ebp, esp . mov ecx, dword [var]
call var . jmp var . int . int . int . int . int . cmp ecx, dword [section..data] . jne var . ret 0 . jmp loc.01002267 . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_memset] . int . int . int . int . int . mov edi, edi . push ebp . mov ebp, esp . mov eax, dword [ebp + 8] . mov eax, dword [eax] . cmp dword [eax], var . jne var . cmp dword [eax + var], 3 . jne var . mov eax, dword [eax + var] . cmp eax, var . je var . cmp eax, var . je var . cmp eax, var . je var . cmp eax, var . jne var . call dword [sym.imp.msvcrt.dll_void___cdecl_terminate_void] . xor eax, eax . pop ebp . ret 4 . int . int . int . int . int . push var . call dword [sym.imp.KERNEL32.dll_SetUnhandledExceptionFilter] . xor eax, eax . ret . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll__XcptFilter] . int . int . int . int . int
call var . jmp var . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_fgetwc] . int . int . int . int . int . cmp ecx, dword [var] . jne var . ret 0 . jmp loc.010042d7 . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_memset] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_swprintf_s] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_memcpy] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_wcscpy_s] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_vswprintf_s] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_wcscat_s] . int . int . int . int . int . mov edi, edi
0000:0780 ba9200 mov dx, var . 0000:0783 8ed2 mov ss, dx . 0000:0785 bc0002 mov sp, var . 0000:0788 ba8a00 mov dx, var . 0000:078b 8eda mov ds, dx . 0000:078d b430 mov ah, var . 0000:078f cd21 int var . 0000:0791 7243 jb var . 0000:0793 3c05 cmp al, 5 . 0000:0795 7550 jne var . 0000:0797 b8305f mov ax, var . 0000:079a cd21 int var . 0000:079c 7351 jae var . 0000:079e e86000 call var . 0000:07a1 268e062c00 mov es, word es:[var] . 0000:07a6 b449 mov ah, var . 0000:07a8 cd21 int var . 0000:07aa b88a00 mov ax, var . 0000:07ad 8ed8 mov ds, ax . 0000:07af b86200 mov ax, var . 0000:07b2 8ec0 mov es, ax . 0000:07b4 26c70604000e. mov word es:[4], var . 0000:07bb be6c00 mov si, var . 0000:07be bf0600 mov di, 6 . 0000:07c1 fc cld . 0000:07c2 b90700 mov cx, 7 . 0000:07c5 f3a5 rep movsw word es:[di], word ptr [si] . 0000:07c7 ba7800 mov dx, var . 0000:07ca 81ea0000 sub dx, 0 . 0000:07ce 83c210 add dx, var . 0000:07d1 b80031 mov ax, var . 0000:07d4 cd21 int var . 0000:07d6 ba8a00 mov dx, var . 0000:07d9 8eda mov ds, dx . 0000:07db ba0000 mov dx, 0 . 0000:07de b409 mov ah, 9 . 0000:07e0 cd21 int var . 0000:07e2 06 push es . 0000:07e3 33c0 xor ax, ax . 0000:07e5 50 push ax . 0000:07e6 cb retf . 0000:07e7 ba0000 mov dx, 0 . 0000:07ea b93500 mov cx, var . 0000:07ed eb06 jmp var . 0000:07ef ba3600 mov dx, var . 0000:07f2 b92600 mov cx, var . 0000:07f5 bb0100 mov bx, 1 . 0000:07f8 b440 mov ah, var . 0000:07fa cd21 int var . 0000:07fc b8014c mov ax, var . 0000:07ff cd21 int var . 0000:0801 06 push es . 0000:0802 1e push ds . 0000:0803 ba0000 mov dx, 0 . 0000:0806 8eda mov ds, dx . 0000:0808 b82f35 mov ax, var . 0000:080b cd21 int var . 0000:080d 891e0000 mov word [0], bx . 0000:0811 8c060200 mov word [2], es . 0000:0815 ba7e00 mov dx, var . 0000:0818 b82f25 mov ax, var . 0000:081b cd21 int var . 0000:081d b82a35 mov ax, var . 0000:0820 cd21 int var
jmp dword [sym.imp.mscoree.dll__CorExeMain] . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al
call var . jmp var . int . int . int . int . int . mov edi, edi . push ebp . mov ebp, esp . mov eax, dword [ebp + 8] . mov eax, dword [eax] . cmp dword [eax], var . jne var . cmp dword [eax + var], 3 . jne var . mov eax, dword [eax + var] . cmp eax, var . je var . cmp eax, var . je var . cmp eax, var . je var . cmp eax, var . jne var . call dword [sym.imp.msvcrt.dll_void___cdecl_terminate_void] . xor eax, eax . pop ebp . ret 4 . int . int . int . int . int . push var . call dword [sym.imp.KERNEL32.dll_SetUnhandledExceptionFilter] . xor eax, eax . ret . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll__XcptFilter] . int . int . int . int . int . int . int . int . mov edi, edi . push ebp . mov ebp, esp . mov ecx, dword [var] . mov eax, var . cmp word [ecx], ax . je var . xor eax, eax . pop ebp . ret . mov eax, dword [ecx + var] . add eax, ecx
call var . jmp var . nop . nop . nop . nop . nop . nop . nop . mov edi, edi . push ebp . mov ebp, esp . sub esp, var . mov eax, dword [var] . and dword [lpSystemTimeAsFileTime], 0 . and dword [var], 0 . push ebx . push edi . mov edi, var . mov ebx, var . cmp eax, edi . jne var . push esi . lea eax, [lpSystemTimeAsFileTime] . push eax . call dword [sym.imp.KERNEL32.dll_GetSystemTimeAsFileTime] . mov esi, dword [var] . xor esi, dword [lpSystemTimeAsFileTime] . call dword [sym.imp.KERNEL32.dll_GetCurrentProcessId] . xor esi, eax . call dword [sym.imp.KERNEL32.dll_GetCurrentThreadId] . xor esi, eax . call dword [sym.imp.KERNEL32.dll_GetTickCount] . xor esi, eax . lea eax, [lpPerformanceCount] . push eax . call dword [sym.imp.KERNEL32.dll_QueryPerformanceCounter] . mov eax, dword [var] . xor eax, dword [lpPerformanceCount] . xor esi, eax . cmp esi, edi . je var . test dword [var], ebx . je var . mov dword [var], esi . not esi . mov dword [var], esi . pop esi . pop edi . pop ebx . leave . ret . mov esi, var . jmp var . nop . nop . nop . nop . nop . mov edi, edi . push ebp . mov ebp, esp . mov ecx, dword [var] . cmp ecx, 2
call var . jmp var . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_memset] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_void___cdecl_operator_delete_void] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_void_____cdecl_operator_new_unsigned_int] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll__vsnwprintf] . int . int . int . int . int . cmp ecx, dword [var] . jne var . ret 0 . jmp loc.0100a73f . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_memcpy] . int . int . int . int . int . push var . push var . call var . mov eax, dword [var] . mov dword [var], eax . cmp eax, var . jne var . push dword [var] . call dword [sym.imp.msvcrt.dll__onexit] . pop ecx . jmp var . push 8 . call sub.msvcrt.dll__lock . pop ecx . and dword [var], 0
call var . jmp var . int . int . int . int . int . mov edi, edi . push ebp . mov ebp, esp . mov eax, dword [ebp + 8] . mov eax, dword [eax] . cmp dword [eax], var . jne var . cmp dword [eax + var], 3 . jne var . mov eax, dword [eax + var] . cmp eax, var . je var . cmp eax, var . je var . cmp eax, var . je var . cmp eax, var . jne var . call dword [sym.imp.msvcrt.dll_void___cdecl_terminate_void] . xor eax, eax . pop ebp . ret 4 . int . int . int . int . int . push var . call dword [sym.imp.API_MS_Win_Core_ErrorHandling_L1_1_0.dll_SetUnhandledExceptionFilter] . xor eax, eax . ret . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll__XcptFilter] . int . int . int . int . int . int . int . int . int . int . int . int . mov edi, edi . push ebp . mov ebp, esp . mov ecx, dword [var] . mov eax, var . cmp word [ecx], ax . je var . xor eax, eax
call var . jmp var . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_memcpy_s] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_memmove_s] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_public_virtual:_void___thiscall_exception::_destructor_void] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_public:_void___thiscall_exception::constructor_char_const___const_const] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll___CxxFrameHandler3] . int . int . int . int . int . cmp ecx, dword [var] . jne var . ret 0 . jmp loc.0103df78 . int . int . int . int . int . push eax . push dword fs:[0] . lea eax, [var] . sub esp, dword [var] . push ebx . push esi . push edi . mov dword [eax], ebp . mov ebp, eax . mov eax, dword [var] . xor eax, ebp . push eax . push dword [ebp - 4]
call var . jmp var . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_memset] . int . int . int . int . int . mov edi, edi . push ebp . mov ebp, esp . mov eax, dword [ebp + 8] . mov eax, dword [eax] . cmp dword [eax], var . jne var . cmp dword [eax + var], 3 . jne var . mov eax, dword [eax + var] . cmp eax, var . je var . cmp eax, var . je var . cmp eax, var . je var . cmp eax, var . jne var . call dword [sym.imp.msvcrt.dll_void___cdecl_terminate_void] . xor eax, eax . pop ebp . ret 4 . int . int . int . int . int . push var . call dword [sym.imp.KERNEL32.dll_SetUnhandledExceptionFilter] . xor eax, eax . ret . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll__XcptFilter] . int . int . int . int . int . int . int . int . int . int . int . int . int . int
call var . jmp var . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_memcpy] . int . int . int . int . int . cmp ecx, dword [var] . jne var . ret 0 . jmp loc.01002437 . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_memset] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll___CxxFrameHandler3] . int . int . int . int . int . push eax . push dword fs:[0] . lea eax, [var] . sub esp, dword [var] . push ebx . push esi . push edi . mov dword [eax], ebp . mov ebp, eax . mov eax, dword [var] . xor eax, ebp . push eax . push dword [ebp - 4] . mov dword [ebp - 4], var . lea eax, [ebp - var] . mov dword fs:[0], eax . ret . int . int . int . int . int . mov ecx, dword [var] . mov dword fs:[0], ecx . pop ecx . pop edi . pop edi . pop esi . pop ebx
call var . jmp var . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_void___cdecl_operator_delete_void] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_void_____cdecl_operator_new_unsigned_int] . int . int . int . int . int . cmp ecx, dword [var] . jne var . ret 0 . jmp loc.01006c67 . int . int . int . int . int . int . int . int . int . int . int . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_memset] . int . int . int . int . int . mov edi, edi . push ebp . mov ebp, esp . mov eax, dword [ebp + 8] . mov eax, dword [eax] . cmp dword [eax], var . jne var . cmp dword [eax + var], 3 . jne var . mov eax, dword [eax + var] . cmp eax, var . je var . cmp eax, var . je var . cmp eax, var . je var
call var . jmp var . int . int . int . int . int . mov edi, edi . push ebp . mov ebp, esp . mov eax, dword [ebp + 8] . mov eax, dword [eax] . cmp dword [eax], var . jne var . cmp dword [eax + var], 3 . jne var . mov eax, dword [eax + var] . cmp eax, var . je var . cmp eax, var . je var . cmp eax, var . je var . cmp eax, var . jne var . call dword [sym.imp.msvcrt.dll_void___cdecl_terminate_void] . xor eax, eax . pop ebp . ret 4 . int . int . int . int . int . push var . call dword [sym.imp.KERNEL32.dll_SetUnhandledExceptionFilter] . xor eax, eax . ret . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll__XcptFilter] . int . int . int . int . int . int . int . int . int . int . int . int . int . int . mov edi, edi . push ebp . mov ebp, esp . mov ecx, dword [var] . mov eax, var . cmp word [ecx], ax
call var . jmp var . cmp ecx, dword [var] . jne var . ret . jmp loc.1000a048 . jmp dword [sym.imp.MSVCR80.dll___CxxFrameHandler3] . push eax . push dword fs:[0] . lea eax, [var] . sub esp, dword [var] . push ebx . push esi . push edi . mov dword [eax], ebp . mov ebp, eax . mov eax, dword [var] . xor eax, ebp . push eax . push dword [ebp - 4] . mov dword [ebp - 4], var . lea eax, [ebp - var] . mov dword fs:[0], eax . ret . push eax . push dword fs:[0] . lea eax, [var] . sub esp, dword [var] . push ebx . push esi . push edi . mov dword [eax], ebp . mov ebp, eax . mov eax, dword [var] . xor eax, ebp . push eax . mov dword [ebp - var], esp . push dword [ebp - 4] . mov dword [ebp - 4], var . lea eax, [ebp - var] . mov dword fs:[0], eax . ret . push eax . push dword fs:[0] . lea eax, [var] . sub esp, dword [var] . push ebx . push esi . push edi . mov dword [eax], ebp . mov ebp, eax . mov eax, dword [var] . xor eax, ebp . push eax . mov dword [ebp - var], eax . push dword [ebp - 4] . mov dword [ebp - 4], var . lea eax, [ebp - var] . mov dword fs:[0], eax . ret . mov ecx, dword [var] . mov dword fs:[0], ecx . pop ecx . pop edi
jmp dword [sym.imp.mscoree.dll__CorExeMain] . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al
call var . jmp var . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_wcscpy_s] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_swprintf_s] . int . int . int . int . int . cmp ecx, dword [var] . jne var . ret 0 . jmp loc.010050b7 . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_memcpy] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_vswprintf_s] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_wcscat_s] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_memset] . int . int . int . int . int . mov edi, edi . push ebp . mov ebp, esp . mov eax, dword [ebp + 8] . mov eax, dword [eax] . cmp dword [eax], var . jne var . cmp dword [eax + var], 3
call var . jmp var . push var . push ebx . push 2 . call dword [sym.imp.KERNEL32.dll_OpenEventW] . mov edi, eax . cmp edi, ebx . jne var . push ebx . mov dword [uExitCode], ebx . mov byte [var], 1 . call dword [sym.imp.KERNEL32.dll_GetModuleHandleW] . mov dword [var], eax . mov dword [var], ebx . mov dword [var], ebx . mov dword [var], ebx . mov dword [var], ebx . mov dword [var], ebx . call dword [sym.imp.KERNEL32.dll_GetCommandLineW] . push var . push eax . mov dword [lpString], eax . call var . push var . push dword [lpString] . test eax, eax . setne byte [var] . call var . add esp, var . test eax, eax . push var . setne byte [var] . call dword [sym.imp.USER32.dll_GetSystemMetrics] . test eax, eax . jne var . call var . test al, al . jne var . xor edi, edi . inc edi . push edi . call dword [sym.imp.KERNEL32.dll_GetCurrentThread] . push eax . call dword [sym.imp.KERNEL32.dll_SetThreadPriority] . call dword [sym.imp.KERNEL32.dll_GetProcessHeap] . mov dword [hHeap], eax . cmp eax, ebx . je var . lea eax, [lpStartupInfo] . push eax . mov dword [var], ebx . mov dword [lpStartupInfo], var . call dword [sym.imp.KERNEL32.dll_GetStartupInfoW] . push var . push edi . push ebx . call dword [sym.imp.KERNEL32.dll_CreateMutexW] . jmp var . nop . nop . nop . nop . dec esp
call var . jmp var . int . int . int . int . int . cmp ecx, dword [var] . jne var . ret 0 . jmp loc.01004bdd . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_sprintf_s] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_strcat_s] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_strcpy_s] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_memcpy] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll__snprintf_s] . int . int . int . int . int . mov edi, edi . push ebp . mov ebp, esp . push dword [ebp + var] . push dword [ebp + var] . push dword [ebp + var] . push dword [ebp + 8] . push var . push var . call sub.msvcrt.dll__except_handler4_common . add esp, var . pop ebp . ret . int
call var . jmp var . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_void___cdecl_operator_delete_void] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_void_____cdecl_operator_new_unsigned_int] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_swscanf_s] . int . int . int . int . int . cmp ecx, dword [var] . jne var . ret 0 . jmp loc.01007447 . int . int . int . int . int . push var . push var . call var . mov eax, dword [var] . mov dword [var], eax . cmp eax, var . jne var . push dword [var] . call dword [sym.imp.msvcrt.dll__onexit] . pop ecx . jmp var . push 8 . call sub.msvcrt.dll__lock . pop ecx . and dword [var], 0 . mov eax, dword [var] . mov dword [var], eax . mov eax, dword [var] . mov dword [var], eax . lea eax, [var] . push eax . lea eax, [var] . push eax . push dword [var] . call sub.msvcrt.dll___dllonexit . add esp, var . mov dword [var], eax . mov eax, dword [var]
call var . jmp var . int . int . int . int . int . mov edi, edi . push ebp . mov ebp, esp . push esi . jmp var . push dword [var] . call var . pop ecx . test eax, eax . je var . push dword [var] . call var . mov esi, eax . pop ecx . test esi, esi . je var . mov eax, esi . pop esi . pop ebp . ret . int . int . int . int . int . mov edi, edi . push ebp . mov ebp, esp . sub esp, var . push ebx . xor ebx, ebx . cmp dword [var], ebx . jne var . call var . push ebx . push ebx . push ebx . push ebx . push ebx . mov dword [eax], var . call var . add esp, var . or eax, var . jmp var . mov eax, dword [var] . push esi . mov esi, dword [var] . cmp eax, ebx . je var . cmp esi, ebx . jne var . call var . push ebx . push ebx . push ebx . push ebx . push ebx
call var . push var . push var . call var . xor ebx, ebx . mov dword [var], ebx . mov dword [var], ebx . lea eax, [lpStartupInfo] . push eax . call dword [sym.imp.KERNEL32.dll_GetStartupInfoW] . mov dword [var], var . mov dword [var], 1 . mov eax, dword fs:[var] . mov esi, dword [eax + 4] . mov dword [var], ebx . mov edi, var . push ebx . push esi . push edi . call dword [sym.imp.KERNEL32.dll_InterlockedCompareExchange] . cmp eax, ebx . jne var . xor esi, esi . inc esi . mov eax, dword [var] . cmp eax, esi . je var . mov eax, dword [var] . test eax, eax . jne var . mov dword [var], esi . push var . push var . call var . pop ecx . pop ecx . test eax, eax . jne var . mov eax, dword [var] . cmp eax, esi . jne var . push var . push var . call sub.msvcrt.dll__initterm . pop ecx . pop ecx . mov dword [var], 2 . cmp dword [var], ebx . jne var . push ebx . push edi . call dword [sym.imp.KERNEL32.dll_InterlockedExchange] . cmp dword [var], ebx . jne var . mov eax, dword [sym.imp.msvcrt.dll__wcmdln] . cmp dword [eax], ebx . je var . mov eax, dword [eax] . mov dword [var], eax . movzx ecx, word [eax] . cmp cx, var . jbe var . cmp cx, var . je var
call var . jmp var . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll__vsnwprintf] . int . int . int . int . int . cmp ecx, dword [var] . jne var . ret 0 . jmp loc.01007337 . int . int . int . int . int . int . int . int . int . int . int . int . int . int . int . int . int . int . int . push ecx . lea ecx, [esp + 4] . sub ecx, eax . sbb eax, eax . not eax . and ecx, eax . mov eax, esp . and eax, var . cmp ecx, eax . jb var . mov eax, ecx . pop ecx . xchg eax, esp . mov eax, dword [eax] . mov dword [esp], eax . ret . sub eax, var . test dword [eax], eax . jmp var . int . int . int . int . int . mov edi, edi . push ebp . mov ebp, esp
call var . jmp var . int . int . int . int . int . mov edi, edi . push ebp . mov ebp, esp . mov eax, dword [ebp + 8] . mov eax, dword [eax] . cmp dword [eax], var . jne var . cmp dword [eax + var], 3 . jne var . mov eax, dword [eax + var] . cmp eax, var . je var . cmp eax, var . je var . cmp eax, var . je var . cmp eax, var . jne var . call dword [sym.imp.msvcrt.dll_void___cdecl_terminate_void] . xor eax, eax . pop ebp . ret 4 . int . int . int . int . int . push var . call dword [sym.imp.KERNEL32.dll_SetUnhandledExceptionFilter] . xor eax, eax . ret . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll__XcptFilter] . int . int . int . int . int . int . mov edi, edi . push ebp . mov ebp, esp . mov ecx, dword [var] . mov eax, var . cmp word [ecx], ax . je var . xor eax, eax . pop ebp . ret . mov eax, dword [ecx + var] . add eax, ecx . cmp dword [eax], var . jne var
call var . push var . push var . call var . xor ebx, ebx . mov dword [var], ebx . mov dword [var], ebx . lea eax, [lpStartupInfo] . push eax . call dword [sym.imp.KERNEL32.dll_GetStartupInfoA] . mov dword [var], var . mov dword [var], 1 . mov eax, dword fs:[var] . mov esi, dword [eax + 4] . mov edi, var . push 0 . push esi . push edi . call dword [sym.imp.KERNEL32.dll_InterlockedCompareExchange] . test eax, eax . jne var . xor esi, esi . inc esi . mov eax, dword [var] . cmp eax, esi . je var . mov eax, dword [var] . test eax, eax . jne var . mov dword [var], esi . push var . push var . call var . pop ecx . pop ecx . test eax, eax . jne var . mov eax, dword [var] . cmp eax, esi . jne var . push var . push var . call sub.msvcrt.dll__initterm . pop ecx . pop ecx . mov dword [var], 2 . test ebx, ebx . jne var . push ebx . push edi . call dword [sym.imp.KERNEL32.dll_InterlockedExchange] . cmp dword [var], 0 . jne var . mov eax, dword [sym.imp.msvcrt.dll__acmdln] . mov esi, dword [eax] . mov dword [var], esi . mov al, byte [esi] . cmp al, var . jbe var . cmp al, var . je var . movzx eax, al . push eax . call dword [sym.imp.msvcrt.dll__ismbblead]
call var . jmp var . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll__wcsicmp] . int . int . int . int . int . cmp ecx, dword [section..data] . jne var . ret 0 . jmp loc.01009dc7 . int . int . int . int . int . mov edi, edi . push ebp . mov ebp, esp . sub esp, var . mov eax, dword [section..data] . xor eax, ebp . mov dword [var], eax . mov dword [var], eax . mov dword [var], ecx . mov dword [var], edx . mov dword [var], ebx . mov dword [var], esi . mov dword [var], edi . mov word [var], ss . mov word [var], cs . mov word [var], ds . mov word [var], es . mov word [var], fs . mov word [var], gs . pushfd . pop dword [var] . mov eax, dword [var] . mov dword [var], eax . lea eax, [var] . mov dword [var], var . mov dword [var], eax . mov eax, dword [eax - 4] . push var . mov dword [var], eax . call dword [sym.imp.KERNEL32.dll_OutputDebugStringA] . mov ecx, dword [var] . xor ecx, ebp . call var . leave . ret . int . int . int . int . int . mov edi, edi
call var . jmp var . int . int . int . int . int . cmp ecx, dword [var] . jne var . ret 0 . jmp loc.0101cf97 . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_memset] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_void_____cdecl_operator_new_unsigned_int] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_void___cdecl_operator_delete_void] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_memcpy] . int . int . int . int . int . mov edi, edi . push ebp . mov ebp, esp . mov eax, dword [ebp + 8] . mov eax, dword [eax] . cmp dword [eax], var . jne var . cmp dword [eax + var], 3 . jne var . mov eax, dword [eax + var] . cmp eax, var . je var . cmp eax, var . je var . cmp eax, var . je var . cmp eax, var . jne var . call dword [sym.imp.msvcrt.dll_void___cdecl_terminate_void] . xor eax, eax
call var . jmp var . int . int . int . int . int . cmp ecx, dword [var] . jne var . ret 0 . jmp loc.01007ee7 . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_memset] . int . int . int . int . int . push var . push var . call var . mov eax, dword [var] . mov dword [var], eax . cmp eax, var . jne var . push dword [var] . call dword [sym.imp.msvcrt.dll__onexit] . pop ecx . jmp var . push 8 . call sub.msvcrt.dll__lock . pop ecx . and dword [var], 0 . mov eax, dword [var] . mov dword [var], eax . mov eax, dword [var] . mov dword [var], eax . lea eax, [var] . push eax . lea eax, [var] . push eax . push dword [var] . call sub.msvcrt.dll___dllonexit . add esp, var . mov dword [var], eax . mov eax, dword [var] . mov dword [var], eax . mov eax, dword [var] . mov dword [var], eax . mov dword [var], var . call var . mov eax, dword [var] . call var . ret . push 8 . call sub.msvcrt.dll__unlock . pop ecx . ret . int
call var . jmp var . int . int . int . int . int . mov edi, edi . push ebp . mov ebp, esp . push esi . mov esi, ecx . call dword [sym.imp.msvcrt.dll_public_virtual:_void___thiscall_type_info::_destructor_void] . test byte [ebp + 8], 1 . je var . push esi . call sub.MFC42u.dll_operatordelete . pop ecx . mov eax, esi . pop esi . pop ebp . ret 4 . int . int . int . int . int . cmp ecx, dword [var] . jne var . ret 0 . jmp loc.010101f7 . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll___CxxFrameHandler3] . int . int . int . int . int . push eax . push dword fs:[0] . lea eax, [var] . sub esp, dword [var] . push ebx . push esi . push edi . mov dword [eax], ebp . mov ebp, eax . mov eax, dword [var] . xor eax, ebp . push eax . push dword [ebp - 4] . mov dword [ebp - 4], var . lea eax, [ebp - var] . mov dword fs:[0], eax . ret . int . int . int . int
call var . jmp var . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_memcpy] . int . int . int . int . int . cmp ecx, dword [section..data] . jne var . ret 0 . jmp loc.01001e27 . int . int . int . int . int . mov edi, edi . push ebp . mov ebp, esp . mov eax, dword [ebp + 8] . mov eax, dword [eax] . cmp dword [eax], var . jne var . cmp dword [eax + var], 3 . jne var . mov eax, dword [eax + var] . cmp eax, var . je var . cmp eax, var . je var . cmp eax, var . je var . cmp eax, var . jne var . call dword [sym.imp.msvcrt.dll_void___cdecl_terminate_void] . xor eax, eax . pop ebp . ret 4 . int . int . int . int . int . push var . call dword [sym.imp.KERNEL32.dll_SetUnhandledExceptionFilter] . xor eax, eax . ret . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll__XcptFilter] . int . int . int
call var . jmp var . int . int . int . int . int . cmp ecx, dword [section..data] . jne var . ret 0 . jmp loc.010046a7 . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll___CxxFrameHandler3] . int . int . int . int . int . push eax . push dword fs:[0] . lea eax, [var] . sub esp, dword [var] . push ebx . push esi . push edi . mov dword [eax], ebp . mov ebp, eax . mov eax, dword [section..data] . xor eax, ebp . push eax . push dword [ebp - 4] . mov dword [ebp - 4], var . lea eax, [ebp - var] . mov dword fs:[0], eax . ret . int . int . int . int . int . push eax . push dword fs:[0] . lea eax, [var] . sub esp, dword [var] . push ebx . push esi . push edi . mov dword [eax], ebp . mov ebp, eax . mov eax, dword [section..data] . xor eax, ebp . push eax . mov dword [ebp - var], eax . push dword [ebp - 4] . mov dword [ebp - 4], var . lea eax, [ebp - var] . mov dword fs:[0], eax . ret . int
call var . jmp var . int . int . int . int . int . mov edi, edi . push ebp . mov ebp, esp . mov eax, dword [ebp + 8] . mov eax, dword [eax] . cmp dword [eax], var . jne var . cmp dword [eax + var], 3 . jne var . mov eax, dword [eax + var] . cmp eax, var . je var . cmp eax, var . je var . cmp eax, var . je var . cmp eax, var . jne var . call dword [sym.imp.msvcrt.dll_void___cdecl_terminate_void] . xor eax, eax . pop ebp . ret 4 . int . int . int . int . int . push var . call dword [sym.imp.KERNEL32.dll_SetUnhandledExceptionFilter] . xor eax, eax . ret . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll__XcptFilter] . int . int . int . int . int . int . int . int . int . int . int . int . mov edi, edi . push ebp . mov ebp, esp . mov ecx, dword [var] . mov eax, var . cmp word [ecx], ax . je var . xor eax, eax
call var . jmp var . int . int . int . int . int . cmp ecx, dword [section..data] . jne var . ret 0 . jmp var . int . int . int . int . int . mov edi, edi . push ebp . mov ebp, esp . mov eax, dword [ebp + 8] . mov eax, dword [eax] . cmp dword [eax], var . jne var . cmp dword [eax + var], 3 . jne var . mov eax, dword [eax + var] . cmp eax, var . je var . cmp eax, var . je var . cmp eax, var . je var . cmp eax, var . jne var . call dword [sym.imp.msvcrt.dll_void___cdecl_terminate_void] . xor eax, eax . pop ebp . ret 4 . int . int . int . int . int . push var . call dword [sym.imp.KERNEL32.dll_SetUnhandledExceptionFilter] . xor eax, eax . ret . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll__XcptFilter] . int . int . int . int . int . int . int . int . mov edi, edi . push ebp . mov ebp, esp
0000:1d90 8be8 mov bp, ax . 0000:1d92 8cc0 mov ax, es . 0000:1d94 051000 add ax, var . 0000:1d97 0e push cs . 0000:1d98 1f pop ds . 0000:1d99 a30400 mov word [4], ax . 0000:1d9c 03060c00 add ax, word [var] . 0000:1da0 8ec0 mov es, ax . 0000:1da2 8b0e0600 mov cx, word [6] . 0000:1da6 8bf9 mov di, cx . 0000:1da8 4f dec di . 0000:1da9 8bf7 mov si, di . 0000:1dab fd std . 0000:1dac f3a4 rep movsb byte es:[di], byte ptr [si] . 0000:1dae 50 push ax . 0000:1daf b83400 mov ax, var . 0000:1db2 50 push ax . 0000:1db3 cb retf . 0000:1db4 8cc3 mov bx, es . 0000:1db6 8cd8 mov ax, ds . 0000:1db8 48 dec ax . 0000:1db9 8ed8 mov ds, ax . 0000:1dbb 8ec0 mov es, ax . 0000:1dbd bf0f00 mov di, var . 0000:1dc0 b91000 mov cx, var . 0000:1dc3 b0ff mov al, var . 0000:1dc5 f3ae repe scasb al, byte es:[di] . 0000:1dc7 47 inc di . 0000:1dc8 8bf7 mov si, di . 0000:1dca 8bc3 mov ax, bx . 0000:1dcc 48 dec ax . 0000:1dcd 8ec0 mov es, ax . 0000:1dcf bf0f00 mov di, var . 0000:1dd2 b104 mov cl, 4 . 0000:1dd4 8bc6 mov ax, si . 0000:1dd6 f7d0 not ax . 0000:1dd8 d3e8 shr ax, cl . 0000:1dda 8cda mov dx, ds . 0000:1ddc 2bd0 sub dx, ax . 0000:1dde 7304 jae var . 0000:1de0 8cd8 mov ax, ds . 0000:1de2 2bd2 sub dx, dx . 0000:1de4 d3e0 shl ax, cl . 0000:1de6 03f0 add si, ax . 0000:1de8 8eda mov ds, dx . 0000:1dea 8bc7 mov ax, di . 0000:1dec f7d0 not ax . 0000:1dee d3e8 shr ax, cl . 0000:1df0 8cc2 mov dx, es . 0000:1df2 2bd0 sub dx, ax . 0000:1df4 7304 jae var . 0000:1df6 8cc0 mov ax, es . 0000:1df8 2bd2 sub dx, dx . 0000:1dfa d3e0 shl ax, cl . 0000:1dfc 03f8 add di, ax . 0000:1dfe 8ec2 mov es, dx . 0000:1e00 ac lodsb al, byte [si] . 0000:1e01 8ad0 mov dl, al . 0000:1e03 4e dec si . 0000:1e04 ad lodsw ax, word [si] . 0000:1e05 8bc8 mov cx, ax . 0000:1e07 46 inc si . 0000:1e08 8ac2 mov al, dl . 0000:1e0a 24fe and al, var
call var . jmp var . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_void___cdecl_operator_delete_void] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_void___cdecl_operator_delete___void] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_free] . int . int . int . int . int . int . int . int . push var . push dword fs:[0] . mov eax, dword [var] . mov dword [var], ebp . lea ebp, [var] . sub esp, eax . push ebx . push esi . push edi . mov eax, dword [var] . xor dword [ebp - 4], eax . xor eax, ebp . push eax . mov dword [ebp - var], esp . push dword [ebp - 8] . mov eax, dword [ebp - 4] . mov dword [ebp - 4], var . mov dword [ebp - 8], eax . lea eax, [ebp - var] . mov dword fs:[0], eax . ret . mov ecx, dword [var] . mov dword fs:[0], ecx . pop ecx . pop edi . pop edi . pop esi . pop ebx . mov esp, ebp . pop ebp . push ecx . ret . int
call var . jmp var . nop . nop . nop . nop . nop . mov edi, edi . push ebp . mov ebp, esp . sub esp, var . mov eax, dword [var] . and dword [lpSystemTimeAsFileTime], 0 . and dword [var], 0 . push ebx . push edi . mov edi, var . mov ebx, var . cmp eax, edi . jne var . push esi . lea eax, [lpSystemTimeAsFileTime] . push eax . call dword [sym.imp.KERNEL32.dll_GetSystemTimeAsFileTime] . mov esi, dword [var] . xor esi, dword [lpSystemTimeAsFileTime] . call dword [sym.imp.KERNEL32.dll_GetCurrentProcessId] . xor esi, eax . call dword [sym.imp.KERNEL32.dll_GetCurrentThreadId] . xor esi, eax . call dword [sym.imp.KERNEL32.dll_GetTickCount] . xor esi, eax . lea eax, [lpPerformanceCount] . push eax . call dword [sym.imp.KERNEL32.dll_QueryPerformanceCounter] . mov eax, dword [var] . xor eax, dword [lpPerformanceCount] . xor esi, eax . cmp esi, edi . je var . test dword [var], ebx . je var . mov dword [var], esi . not esi . mov dword [var], esi . pop esi . pop edi . pop ebx . leave . ret . mov esi, var . jmp var . cmp byte [esi + var], 0 . je var . push dword [esi + 4] . call var . jmp var . nop . nop . nop . nop . nop . mov edi, edi . push ebp
call var . jmp var . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_void___cdecl_operator_delete___void] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_void_____cdecl_operator_new___unsigned_int] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll___CxxFrameHandler3] . int . int . int . int . int . cmp ecx, dword [var] . jne var . ret 0 . jmp loc.01003cc7 . int . int . int . int . int . push eax . push dword fs:[0] . lea eax, [var] . sub esp, dword [var] . push ebx . push esi . push edi . mov dword [eax], ebp . mov ebp, eax . mov eax, dword [var] . xor eax, ebp . push eax . push dword [ebp - 4] . mov dword [ebp - 4], var . lea eax, [ebp - var] . mov dword fs:[0], eax . ret . int . int . int . int . int . push eax . push dword fs:[0] . lea eax, [var] . sub esp, dword [var] . push ebx . push esi
call var . jmp var . int . int . int . int . int . cmp ecx, dword [var] . jne var . ret 0 . jmp loc.01003049 . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_wcscat_s] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll__snwprintf_s] . int . int . int . int . int . mov edi, edi . push ebp . mov ebp, esp . mov eax, dword [ebp + 8] . mov eax, dword [eax] . cmp dword [eax], var . jne var . cmp dword [eax + var], 3 . jne var . mov eax, dword [eax + var] . cmp eax, var . je var . cmp eax, var . je var . cmp eax, var . je var . cmp eax, var . jne var . call dword [sym.imp.msvcrt.dll_void___cdecl_terminate_void] . xor eax, eax . pop ebp . ret 4 . int . int . int . int . int . push var . call dword [sym.imp.KERNEL32.dll_SetUnhandledExceptionFilter] . xor eax, eax . ret . int . int . int
0000:78fa b80000 mov ax, 0 . 0000:78fd 8ed8 mov ds, ax . 0000:78ff 8c062e47 mov word [var], es . 0000:7903 8ed0 mov ss, ax . 0000:7905 bc0001 mov sp, var . 0000:7908 1e push ds . 0000:7909 8cc8 mov ax, cs . 0000:790b 8ed8 mov ds, ax . 0000:790d ba6905 mov dx, var . 0000:7910 b82425 mov ax, var . 0000:7913 cd21 int var . 0000:7915 1f pop ds . 0000:7916 1e push ds . 0000:7917 b80516 mov ax, var . 0000:791a 33db xor bx, bx . 0000:791c 8bcb mov cx, bx . 0000:791e 8bf3 mov si, bx . 0000:7920 8edb mov ds, bx . 0000:7922 8ec3 mov es, bx . 0000:7924 ba0100 mov dx, 1 . 0000:7927 bf0a03 mov di, var . 0000:792a cd2f int var . 0000:792c 58 pop ax . 0000:792d 8ed8 mov ds, ax . 0000:792f 8ec0 mov es, ax . 0000:7931 e308 jcxz var . 0000:7933 c606474702 mov byte [var], 2 . 0000:7938 e95e01 jmp var . 0000:793b e8b615 call var . 0000:793e 7303 jae var . 0000:7940 e9dc00 jmp var . 0000:7943 1e push ds . 0000:7944 50 push ax . 0000:7945 b84000 mov ax, var . 0000:7948 8ed8 mov ds, ax . 0000:794a 9f lahf . 0000:794b f70614030024 test word [var], var . 0000:7951 750c jne var . 0000:7953 f081261403ff. lock and word [var], var . 0000:795a 9e sahf . 0000:795b 58 pop ax . 0000:795c 1f pop ds . 0000:795d eb03 jmp var . 0000:795f fa cli . 0000:7960 ebf8 jmp var . 0000:7962 e8a907 call var . 0000:7965 e82809 call var . 0000:7968 ea0600c700 ljmp var . 0000:796d e89609 call var . 0000:7970 bbbf0d mov bx, var . 0000:7973 c1eb04 shr bx, 4 . 0000:7976 2e031e0000 add bx, word cs:[0] . 0000:797b 2b1e2e47 sub bx, word [var] . 0000:797f 06 push es . 0000:7980 8e062e47 mov es, word [var] . 0000:7984 b44a mov ah, var . 0000:7986 cd21 int var . 0000:7988 07 pop es . 0000:7989 e81302 call var . 0000:798c 891e1169 mov word [var], bx . 0000:7990 e8fd08 call var . 0000:7993 eac400c700 ljmp var:var . 0000:7998 e86b09 call var . 0000:799b 1e push ds
call var . jmp var . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_void___cdecl_operator_delete_void] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_void_____cdecl_operator_new_unsigned_int] . int . int . int . int . int . cmp ecx, dword [section..data] . jne var . ret 0 . jmp loc.01002957 . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_memset] . int . int . int . int . int . mov edi, edi . push ebp . mov ebp, esp . mov eax, dword [ebp + 8] . mov eax, dword [eax] . cmp dword [eax], var . jne var . cmp dword [eax + var], 3 . jne var . mov eax, dword [eax + var] . cmp eax, var . je var . cmp eax, var . je var . cmp eax, var . je var . cmp eax, var . jne var . call dword [sym.imp.msvcrt.dll_void___cdecl_terminate_void] . xor eax, eax . pop ebp . ret 4 . int . int . int . int . int . push var . call dword [sym.imp.KERNEL32.dll_SetUnhandledExceptionFilter]
call var . jmp var . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_memcpy] . int . int . int . int . int . cmp ecx, dword [var] . jne var . ret 0 . jmp loc.0100ccb7 . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_memset] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_void_____cdecl_operator_new_unsigned_int] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_swscanf_s] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_wcsncpy_s] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_void___cdecl_operator_delete_void] . int . int . int . int . int . mov edi, edi . push ebp . mov ebp, esp . mov eax, dword [ebp + 8] . mov eax, dword [eax] . cmp dword [eax], var . jne var
call var . jmp var . int . int . int . int . int . push var . push var . call var . and dword [var], 0 . dec dword [var] . js var . mov ecx, dword [var] . sub ecx, dword [var] . mov dword [var], ecx . call dword [var] . jmp var . mov eax, dword [ebp - var] . mov dword [ebp - var], eax . mov eax, dword [ebp - var] . mov eax, dword [eax] . mov dword [ebp - var], eax . mov eax, dword [ebp - var] . cmp dword [eax], var . je var . mov dword [ebp - var], 0 . mov eax, dword [ebp - var] . ret . call dword [sym.imp.msvcrt.dll_void___cdecl_terminate_void] . mov esp, dword [ebp - var] . mov dword [var], var . call var . ret var . int . int . int . int . int . push var . push var . call var . and dword [var], 0 . mov esi, dword [var] . mov eax, esi . imul eax, dword [var] . add dword [var], eax . and dword [var], 0 . dec dword [var] . js var . sub dword [var], esi . mov ecx, dword [var] . call dword [var] . jmp var . mov dword [var], 1 . mov dword [var], var . call var . call var . ret var . cmp dword [var], 0 . jne var . push dword [var] . push dword [var] . push dword [var]
call var . jmp var . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_void___cdecl_operator_delete___void] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_void_____cdecl_operator_new___unsigned_int] . int . int . int . int . int . cmp ecx, dword [var] . jne var . ret 0 . jmp loc.010033d7 . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_memset] . int . int . int . int . int . mov edi, edi . push ebp . mov ebp, esp . mov eax, dword [ebp + 8] . mov eax, dword [eax] . cmp dword [eax], var . jne var . cmp dword [eax + var], 3 . jne var . mov eax, dword [eax + var] . cmp eax, var . je var . cmp eax, var . je var . cmp eax, var . je var . cmp eax, var . jne var . call dword [sym.imp.msvcrt.dll_void___cdecl_terminate_void] . xor eax, eax . pop ebp . ret 4 . int . int . int . int . int . push var . call dword [sym.imp.KERNEL32.dll_SetUnhandledExceptionFilter]
call var . jmp var . mov edi, edi . push ebp . mov ebp, esp . sub esp, var . mov dword [var], eax . mov dword [var], ecx . mov dword [var], edx . mov dword [var], ebx . mov dword [var], esi . mov dword [var], edi . mov word [var], ss . mov word [var], cs . mov word [var], ds . mov word [var], es . mov word [var], fs . mov word [var], gs . pushfd . pop dword [var] . mov eax, dword [ebp] . mov dword [var], eax . mov eax, dword [ebp + 4] . mov dword [var], eax . lea eax, [ebp + 8] . mov dword [var], eax . mov eax, dword [ebp - var] . mov dword [var], var . mov eax, dword [var] . mov dword [var], eax . mov dword [var], var . mov dword [var], 1 . mov eax, dword [section..data] . mov dword [ebp - var], eax . mov eax, dword [var] . mov dword [ebp - var], eax . call dword [sym.imp.KERNEL32.dll_IsDebuggerPresent] . mov dword [var], eax . push 1 . call sub.MSVCR90.dll__crt_debugger_hook . pop ecx . push 0 . call dword [sym.imp.KERNEL32.dll_SetUnhandledExceptionFilter] . push var . call dword [sym.imp.KERNEL32.dll_UnhandledExceptionFilter] . cmp dword [var], 0 . jne var . push 1 . call sub.MSVCR90.dll__crt_debugger_hook . pop ecx . push var . call dword [sym.imp.KERNEL32.dll_GetCurrentProcess] . push eax . call dword [sym.imp.KERNEL32.dll_TerminateProcess] . leave . ret . mov edi, edi . push ebp . mov ebp, esp . mov eax, dword [ebp + 8] . mov eax, dword [eax] . cmp dword [eax], var . jne var . cmp dword [eax + var], 3
call var . jmp var . int . int . int . int . int . int . int . int . push var . push dword fs:[0] . mov eax, dword [var] . mov dword [var], ebp . lea ebp, [var] . sub esp, eax . push ebx . push esi . push edi . mov eax, dword [var] . xor dword [ebp - 4], eax . xor eax, ebp . mov dword [ebp - var], eax . push eax . mov dword [ebp - var], esp . push dword [ebp - 8] . mov eax, dword [ebp - 4] . mov dword [ebp - 4], var . mov dword [ebp - 8], eax . lea eax, [ebp - var] . mov dword fs:[0], eax . ret . mov ecx, dword [var] . xor ecx, ebp . call var . jmp var . int . int . int . int . int . mov edi, edi . push ebp . mov ebp, esp . push dword [ebp + var] . push dword [ebp + var] . push dword [ebp + var] . push dword [ebp + 8] . push var . push var . call sub.msvcrt.dll__except_handler4_common . add esp, var . pop ebp . ret . int . int . int . int . int . mov edi, edi . push ebp . mov ebp, esp . mov eax, dword [ebp + 8] . mov eax, dword [eax]
call var . jmp var . int . int . int . int . int . mov edi, edi . push ebp . mov ebp, esp . mov eax, dword [ebp + 8] . mov eax, dword [eax] . cmp dword [eax], var . jne var . cmp dword [eax + var], 3 . jne var . mov eax, dword [eax + var] . cmp eax, var . je var . cmp eax, var . je var . cmp eax, var . je var . cmp eax, var . jne var . call dword [sym.imp.msvcrt.dll_void___cdecl_terminate_void] . xor eax, eax . pop ebp . ret 4 . int . int . int . int . int . push var . call dword [sym.imp.KERNEL32.dll_SetUnhandledExceptionFilter] . xor eax, eax . ret . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll__XcptFilter] . int . int . int . int . int . int . int . int . int . int . int . int . int . int . mov edi, edi . push ebp . mov ebp, esp . mov ecx, dword [var] . mov eax, var . cmp word [ecx], ax
call var . jmp var . push var . push var . call var . xor eax, eax . mov dword [var], eax . mov dword [var], eax . mov dword [var], eax . mov eax, dword [var] . cmp eax, dword [var] . jge var . mov esi, dword [var] . mov ecx, esi . call dword [var] . add esi, dword [var] . mov dword [var], esi . inc dword [var] . jmp var . mov dword [var], 1 . mov dword [var], reloc.USER32.dll_DispatchMessageW . call var . call var . ret var . cmp dword [var], 0 . jne var . push dword [var] . push dword [var] . push dword [var] . push dword [var] . call var . ret . push var . push var . call var . and dword [var], 0 . dec dword [var] . js var . mov ecx, dword [var] . sub ecx, dword [var] . mov dword [var], ecx . call dword [var] . jmp var . mov eax, dword [ebp - var] . mov dword [ebp - var], eax . mov eax, dword [ebp - var] . mov eax, dword [eax] . mov dword [ebp - var], eax . mov eax, dword [ebp - var] . cmp dword [eax], reloc.USER32.dll_DispatchMessageW . je var . mov dword [ebp - var], 0 . mov eax, dword [ebp - var] . ret . call sub.MSVCR100.dll_void___cdecl_terminate_void . mov esp, dword [ebp - var] . mov dword [var], reloc.USER32.dll_DispatchMessageW . call var . ret var . push var . push var . call var . and dword [var], 0 . mov esi, dword [var]
call var . jmp var . int . int . int . int . int . cmp ecx, dword [var] . jne var . ret 0 . jmp loc.01005d27 . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_memset] . int . int . int . int . int . mov edi, edi . push ebp . mov ebp, esp . mov eax, dword [ebp + 8] . mov eax, dword [eax] . cmp dword [eax], var . jne var . cmp dword [eax + var], 3 . jne var . mov eax, dword [eax + var] . cmp eax, var . je var . cmp eax, var . je var . cmp eax, var . je var . cmp eax, var . jne var . call dword [sym.imp.msvcrt.dll_void___cdecl_terminate_void] . xor eax, eax . pop ebp . ret 4 . int . int . int . int . int . push var . call dword [sym.imp.KERNEL32.dll_SetUnhandledExceptionFilter] . xor eax, eax . ret . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll__XcptFilter] . int . int . int . int . int
call var . jmp var . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_void___cdecl_operator_delete_void] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_void_____cdecl_operator_new_unsigned_int] . int . int . int . int . int . int . int . int . push var . push dword fs:[0] . mov eax, dword [var] . mov dword [var], ebp . lea ebp, [var] . sub esp, eax . push ebx . push esi . push edi . mov eax, dword [section..data] . xor dword [ebp - 4], eax . xor eax, ebp . push eax . mov dword [ebp - var], esp . push dword [ebp - 8] . mov eax, dword [ebp - 4] . mov dword [ebp - 4], var . mov dword [ebp - 8], eax . lea eax, [ebp - var] . mov dword fs:[0], eax . ret . mov ecx, dword [var] . mov dword fs:[0], ecx . pop ecx . pop edi . pop edi . pop esi . pop ebx . mov esp, ebp . pop ebp . push ecx . ret . int . int . int . int . int . mov edi, edi . push ebp . mov ebp, esp . push dword [ebp + var]
call var . jmp var . int . int . int . int . int . cmp ecx, dword [var] . jne var . ret 0 . jmp loc.01010de7 . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_memset] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_public:_void___thiscall_exception::constructor_char_const___const_const] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_public_virtual:_char_const_____thiscall_exception::what_void_const] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_public_virtual:_void___thiscall_exception::_destructor_void] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_public:_void___thiscall_exception::constructor_class_exception_const] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll__CxxThrowException] . int . int . int . int . int . mov edi, edi . push ebp . mov ebp, esp . push esi . mov esi, ecx . call dword [sym.imp.msvcrt.dll_public_virtual:_void___thiscall_type_info::_destructor_void]
call var . jmp var . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_memcpy] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_memset] . int . int . int . int . int . cmp ecx, dword [var] . jne var . ret 0 . jmp loc.010077b7 . int . int . int . int . int . int . int . int . int . int . int . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll__vsnprintf] . int . int . int . int . int . int . int . int . int . int . int . int . int . int . int . int . int . int . int . int . push ecx . lea ecx, [esp + 4]
call var . jmp var . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_swprintf_s] . int . int . int . int . int . cmp ecx, dword [var] . jne var . ret 0 . jmp loc.01002dc7 . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_wcscpy_s] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_vswprintf_s] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_wcscat_s] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_memset] . int . int . int . int . int . mov edi, edi . push ebp . mov ebp, esp . mov eax, dword [ebp + 8] . mov eax, dword [eax] . cmp dword [eax], var . jne var . cmp dword [eax + var], 3 . jne var . mov eax, dword [eax + var] . cmp eax, var . je var . cmp eax, var . je var . cmp eax, var
call var . jmp var . int . int . int . int . int . cmp ecx, dword [var] . jne var . ret 0 . jmp loc.010053e7 . int . int . int . int . int . int . int . int . int . int . int . int . int . int . int . int . int . int . int . int . push ecx . lea ecx, [var] . sub ecx, eax . sbb eax, eax . not eax . and ecx, eax . mov eax, esp . and eax, var . cmp ecx, eax . jb var . mov eax, ecx . pop ecx . xchg eax, esp . mov eax, dword [eax] . mov dword [esp], eax . ret . sub eax, var . test dword [eax], eax . jmp var . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_memset] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_memcpy] . int
call var . jmp var . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll___CxxFrameHandler3] . int . int . int . int . int . cmp ecx, dword [var] . jne var . ret 0 . jmp loc.0100a6f7 . int . int . int . int . int . push eax . push dword fs:[0] . lea eax, [var] . sub esp, dword [var] . push ebx . push esi . push edi . mov dword [eax], ebp . mov ebp, eax . mov eax, dword [var] . xor eax, ebp . push eax . push dword [ebp - 4] . mov dword [ebp - 4], var . lea eax, [ebp - var] . mov dword fs:[0], eax . ret . int . int . int . int . int . push eax . push dword fs:[0] . lea eax, [var] . sub esp, dword [var] . push ebx . push esi . push edi . mov dword [eax], ebp . mov ebp, eax . mov eax, dword [var] . xor eax, ebp . push eax . mov dword [ebp - var], esp . push dword [ebp - 4] . mov dword [ebp - 4], var . lea eax, [ebp - var] . mov dword fs:[0], eax . ret . int
mov edi, edi . push esi . call var . test eax, eax . jl var . call var . mov esi, eax . call var . jmp var . nop . nop . nop . nop . nop . call var . jmp var . nop . nop . nop . nop . nop . mov edi, edi . push ebp . mov ebp, esp . sub esp, var . mov eax, dword [var] . and dword [lpSystemTimeAsFileTime], 0 . and dword [var], 0 . push ebx . push edi . mov edi, var . mov ebx, var . cmp eax, edi . jne var . push esi . lea eax, [lpSystemTimeAsFileTime] . push eax . call dword [sym.imp.KERNEL32.dll_GetSystemTimeAsFileTime] . mov esi, dword [var] . xor esi, dword [lpSystemTimeAsFileTime] . call dword [sym.imp.KERNEL32.dll_GetCurrentProcessId] . xor esi, eax . call dword [sym.imp.KERNEL32.dll_GetCurrentThreadId] . xor esi, eax . call dword [sym.imp.KERNEL32.dll_GetTickCount] . xor esi, eax . lea eax, [lpPerformanceCount] . push eax . call dword [sym.imp.KERNEL32.dll_QueryPerformanceCounter] . mov eax, dword [var] . xor eax, dword [lpPerformanceCount] . xor esi, eax . cmp esi, edi . je var . test dword [var], ebx . je var . mov dword [var], esi . not esi . mov dword [var], esi . pop esi . pop edi . pop ebx . leave . ret
call var . jmp var . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_void___cdecl_operator_delete_void] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_void___cdecl_operator_delete___void] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_free] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_memcpy_s] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_wcscpy_s] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_wcsncpy_s] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_wcscat_s] . int . int . int . int . int . int . int . int . push var . push dword fs:[0] . mov eax, dword [var] . mov dword [var], ebp . lea ebp, [var] . sub esp, eax
call var . jmp var . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_void___cdecl_operator_delete_void] . int . int . int . int . int . mov edi, edi . push ebp . mov ebp, esp . push esi . mov esi, ecx . call dword [sym.imp.msvcrt.dll_public_virtual:_void___thiscall_type_info::_destructor_void] . test byte [ebp + 8], 1 . je var . push esi . call sub.msvcrt.dll_void___cdecl_operator_delete_void . pop ecx . mov eax, esi . pop esi . pop ebp . ret 4 . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_void___cdecl_operator_delete___void] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_memset] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_void_____cdecl_operator_new_unsigned_int] . int . int . int . int . int . cmp ecx, dword [var] . jne var . ret 0 . jmp loc.0101a6ec . int . int . int . int . int . int . int
call var . jmp var . â”œ 262: loc.00402da4 (int2_t var, int2_t var) . mov edi, edi . push ebp . mov ebp, esp . sub esp, var . mov dword [var], eax . mov dword [var], ecx . mov dword [var], edx . mov dword [var], ebx . mov dword [var], esi . mov dword [var], edi . mov word [var], ss . mov word [var], cs . mov word [var], ds . mov word [var], es . mov word [var], fs . mov word [var], gs . pushfd . pop dword [var] . mov eax, dword [ebp] . mov dword [var], eax . mov eax, dword [var] . mov dword [var], eax . lea eax, [var] . mov dword [var], eax . mov eax, dword [var] . mov dword [var], var . mov eax, dword [var] . mov dword [var], eax . mov dword [var], var . mov dword [var], 1 . mov eax, dword [var] . mov dword [var], eax . mov eax, dword [var] . mov dword [var], eax . call dword [sym.imp.KERNEL32.dll_IsDebuggerPresent] . mov dword [var], eax . push 1 . call var . pop ecx . push 0 . call dword [sym.imp.KERNEL32.dll_SetUnhandledExceptionFilter] . push var . call dword [sym.imp.KERNEL32.dll_UnhandledExceptionFilter] . cmp dword [var], 0 . jne var . push 1 . call var . pop ecx . push var . call dword [sym.imp.KERNEL32.dll_GetCurrentProcess] . push eax . call dword [sym.imp.KERNEL32.dll_TerminateProcess] . leave . ret . mov edi, edi . push ebp . mov ebp, esp . sub esp, var . mov eax, dword [var] . xor edx, edx . push ebx . push esi
call var . jmp var . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_void___cdecl_operator_delete_void] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_void___cdecl_operator_delete___void] . int . int . int . int . int . push var . push var . call var . and dword [var], 0 . dec dword [var] . js var . mov ecx, dword [var] . sub ecx, dword [var] . mov dword [var], ecx . call dword [var] . jmp var . mov eax, dword [ebp - var] . mov dword [ebp - var], eax . mov eax, dword [ebp - var] . mov eax, dword [eax] . mov dword [ebp - var], eax . mov eax, dword [ebp - var] . cmp dword [eax], var . je var . mov dword [ebp - var], 0 . mov eax, dword [ebp - var] . ret . call dword [sym.imp.msvcrt.dll_void___cdecl_terminate_void] . mov esp, dword [ebp - var] . mov dword [var], var . call var . ret var . int . int . int . int . int . push var . push var . call var . and dword [var], 0 . mov esi, dword [var] . mov eax, esi . imul eax, dword [var] . add dword [var], eax . and dword [var], 0 . dec dword [var] . js var . sub dword [var], esi
call var . jmp var . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll___CxxFrameHandler3] . int . int . int . int . int . cmp ecx, dword [var] . jne var . ret 0 . jmp loc.010090e7 . int . int . int . int . int . push eax . push dword fs:[0] . lea eax, [var] . sub esp, dword [var] . push ebx . push esi . push edi . mov dword [eax], ebp . mov ebp, eax . mov eax, dword [var] . xor eax, ebp . push eax . push dword [ebp - 4] . mov dword [ebp - 4], var . lea eax, [ebp - var] . mov dword fs:[0], eax . ret . int . int . int . int . int . push eax . push dword fs:[0] . lea eax, [var] . sub esp, dword [var] . push ebx . push esi . push edi . mov dword [eax], ebp . mov ebp, eax . mov eax, dword [var] . xor eax, ebp . push eax . mov dword [ebp - var], esp . push dword [ebp - 4] . mov dword [ebp - 4], var . lea eax, [ebp - var] . mov dword fs:[0], eax . ret . int . int
call var . jmp var . int . int . int . int . int . cmp ecx, dword [var] . jne var . ret 0 . jmp loc.01006138 . int . int . int . int . int . int . int . push ecx . lea ecx, [var] . sub ecx, eax . sbb eax, eax . not eax . and ecx, eax . mov eax, esp . and eax, var . cmp ecx, eax . jb var . mov eax, ecx . pop ecx . xchg eax, esp . mov eax, dword [eax] . mov dword [esp], eax . ret . sub eax, var . test dword [eax], eax . jmp var . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_memset] . int . int . int . int . int . push var . push var . call var . mov eax, dword [var] . mov dword [var], eax . cmp eax, var . jne var . push dword [var] . call dword [sym.imp.msvcrt.dll__onexit] . pop ecx . jmp var . push 8 . call sub.msvcrt.dll__lock . pop ecx . and dword [var], 0 . mov eax, dword [var]
call var . jmp var . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_memcpy_s] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_memmove_s] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_public:_void___thiscall_exception::constructor_char_const___const_const] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_public_virtual:_char_const_____thiscall_exception::what_void_const] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_public_virtual:_void___thiscall_exception::_destructor_void] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_public:_void___thiscall_exception::constructor_class_exception_const] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll__CxxThrowException] . int . int . int . int . int . mov edi, edi . push ebp . mov ebp, esp . push esi . mov esi, ecx . call dword [sym.imp.msvcrt.dll_public_virtual:_void___thiscall_type_info::_destructor_void] . test byte [ebp + 8], 1 . je var
call var . jmp var . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_void___cdecl_operator_delete_void] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_void___cdecl_operator_delete___void] . int . int . int . int . int . int . push var . push dword fs:[0] . mov eax, dword [var] . mov dword [var], ebp . lea ebp, [var] . sub esp, eax . push ebx . push esi . push edi . mov eax, dword [var] . xor dword [ebp - 4], eax . xor eax, ebp . push eax . mov dword [ebp - var], esp . push dword [ebp - 8] . mov eax, dword [ebp - 4] . mov dword [ebp - 4], var . mov dword [ebp - 8], eax . lea eax, [ebp - var] . mov dword fs:[0], eax . ret . mov ecx, dword [var] . mov dword fs:[0], ecx . pop ecx . pop edi . pop edi . pop esi . pop ebx . mov esp, ebp . pop ebp . push ecx . ret . int . int . int . int . int . mov edi, edi . push ebp . mov ebp, esp . push dword [ebp + var] . push dword [ebp + var]
0000:0030 8be8 mov bp, ax . 0000:0032 8cc0 mov ax, es . 0000:0034 051000 add ax, var . 0000:0037 0e push cs . 0000:0038 1f pop ds . 0000:0039 a30400 mov word [4], ax . 0000:003c 03060c00 add ax, word [var] . 0000:0040 8ec0 mov es, ax . 0000:0042 8b0e0600 mov cx, word [6] . 0000:0046 8bf9 mov di, cx . 0000:0048 4f dec di . 0000:0049 8bf7 mov si, di . 0000:004b fd std . 0000:004c f3a4 rep movsb byte es:[di], byte ptr [si] . 0000:004e 50 push ax . 0000:004f b83400 mov ax, var . 0000:0052 50 push ax . 0000:0053 cb retf . 0000:0054 8cc3 mov bx, es . 0000:0056 8cd8 mov ax, ds . 0000:0058 48 dec ax . 0000:0059 8ed8 mov ds, ax . 0000:005b 8ec0 mov es, ax . 0000:005d bf0f00 mov di, var . 0000:0060 b91000 mov cx, var . 0000:0063 b0ff mov al, var . 0000:0065 f3ae repe scasb al, byte es:[di] . 0000:0067 47 inc di . 0000:0068 8bf7 mov si, di . 0000:006a 8bc3 mov ax, bx . 0000:006c 48 dec ax . 0000:006d 8ec0 mov es, ax . 0000:006f bf0f00 mov di, var . 0000:0072 b104 mov cl, 4 . 0000:0074 8bc6 mov ax, si . 0000:0076 f7d0 not ax . 0000:0078 d3e8 shr ax, cl . 0000:007a 8cda mov dx, ds . 0000:007c 2bd0 sub dx, ax . 0000:007e 7304 jae var . 0000:0080 8cd8 mov ax, ds . 0000:0082 2bd2 sub dx, dx . 0000:0084 d3e0 shl ax, cl . 0000:0086 03f0 add si, ax . 0000:0088 8eda mov ds, dx . 0000:008a 8bc7 mov ax, di . 0000:008c f7d0 not ax . 0000:008e d3e8 shr ax, cl . 0000:0090 8cc2 mov dx, es . 0000:0092 2bd0 sub dx, ax . 0000:0094 7304 jae var . 0000:0096 8cc0 mov ax, es . 0000:0098 2bd2 sub dx, dx . 0000:009a d3e0 shl ax, cl . 0000:009c 03f8 add di, ax . 0000:009e 8ec2 mov es, dx . 0000:00a0 ac lodsb al, byte [si] . 0000:00a1 8ad0 mov dl, al . 0000:00a3 4e dec si . 0000:00a4 ad lodsw ax, word [si] . 0000:00a5 8bc8 mov cx, ax . 0000:00a7 46 inc si . 0000:00a8 8ac2 mov al, dl . 0000:00aa 24fe and al, var
call var . jmp var . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_swprintf_s] . int . int . int . int . int . cmp ecx, dword [var] . jne var . ret 0 . jmp loc.01004157 . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_wcscpy_s] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_vswprintf_s] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_wcscat_s] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_memset] . int . int . int . int . int . mov edi, edi . push ebp . mov ebp, esp . mov eax, dword [ebp + 8] . mov eax, dword [eax] . cmp dword [eax], var . jne var . cmp dword [eax + var], 3 . jne var . mov eax, dword [eax + var] . cmp eax, var . je var . cmp eax, var . je var . cmp eax, var
call var . jmp var . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_void___cdecl_operator_delete_void] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_memset] . int . int . int . int . int . cmp ecx, dword [var] . jne var . ret 0 . jmp loc.01024c8d . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_void_____cdecl_operator_new_unsigned_int] . int . int . int . int . int . push var . push var . call var . mov eax, dword [var] . mov dword [var], eax . cmp eax, var . jne var . push dword [var] . call dword [sym.imp.msvcrt.dll__onexit] . pop ecx . jmp var . push 8 . call sub.msvcrt.dll__lock . pop ecx . and dword [var], 0 . mov eax, dword [var] . mov dword [var], eax . mov eax, dword [var] . mov dword [var], eax . lea eax, [var] . push eax . lea eax, [var] . push eax . push dword [var] . call sub.msvcrt.dll___dllonexit . add esp, var . mov dword [var], eax . mov eax, dword [var]
call var . jmp var . int . int . int . int . int . cmp ecx, dword [section..data] . jne var . ret 0 . jmp loc.0100813d . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_memset] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_void___cdecl_operator_delete_void] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_void_____cdecl_operator_new_unsigned_int] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll__purecall] . int . int . int . int . int . mov edi, edi . push ebp . mov ebp, esp . mov eax, dword [ebp + 8] . mov eax, dword [eax] . cmp dword [eax], var . jne var . cmp dword [eax + var], 3 . jne var . mov eax, dword [eax + var] . cmp eax, var . je var . cmp eax, var . je var . cmp eax, var . je var . cmp eax, var . jne var . call dword [sym.imp.msvcrt.dll_void___cdecl_terminate_void] . xor eax, eax . pop ebp
call var . jmp var . int . int . int . int . int . cmp ecx, dword [var] . jne var . ret 0 . jmp loc.01006d1d . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll__snwprintf_s] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_void___cdecl_operator_delete_void] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll__ftol2] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_void_____cdecl_operator_new_unsigned_int] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_memset] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_memcpy] . int . int . int . int . int . int . int . int . push var . push dword fs:[0] . mov eax, dword [var] . mov dword [var], ebp
call var . jmp var . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_swprintf_s] . int . int . int . int . int . cmp ecx, dword [var] . jne var . ret 0 . jmp loc.01004967 . int . int . int . int . int . int . int . int . int . int . int . int . int . int . int . int . int . push ecx . lea ecx, [var] . sub ecx, eax . sbb eax, eax . not eax . and ecx, eax . mov eax, esp . and eax, var . cmp ecx, eax . jb var . mov eax, ecx . pop ecx . xchg eax, esp . mov eax, dword [eax] . mov dword [esp], eax . ret . sub eax, var . test dword [eax], eax . jmp var . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_wcscpy_s] . int . int . int . int . int
call var . jmp var . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll__vsnwprintf] . int . int . int . int . int . cmp ecx, dword [section..data] . jne var . ret 0 . jmp loc.01003dbd . int . int . int . int . int . int . int . int . int . int . int . int . int . int . int . push ecx . lea ecx, [var] . sub ecx, eax . sbb eax, eax . not eax . and ecx, eax . mov eax, esp . and eax, var . cmp ecx, eax . jb var . mov eax, ecx . pop ecx . xchg eax, esp . mov eax, dword [eax] . mov dword [esp], eax . ret . sub eax, var . test dword [eax], eax . jmp var . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_memset] . int . int . int . int . int . int
call var . jmp var . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_memset] . int . int . int . int . int . cmp ecx, dword [var] . jne var . ret 0 . jmp loc.01006c2d . int . int . int . int . int . push var . push dword fs:[0] . mov eax, dword [var] . mov dword [var], ebp . lea ebp, [var] . sub esp, eax . push ebx . push esi . push edi . mov eax, dword [var] . xor dword [ebp - 4], eax . xor eax, ebp . mov dword [ebp - var], eax . push eax . mov dword [ebp - var], esp . push dword [ebp - 8] . mov eax, dword [ebp - 4] . mov dword [ebp - 4], var . mov dword [ebp - 8], eax . lea eax, [ebp - var] . mov dword fs:[0], eax . ret . mov ecx, dword [var] . xor ecx, ebp . call var . jmp var . int . int . int . int . int . mov edi, edi . push ebp . mov ebp, esp . push dword [ebp + var] . push dword [ebp + var] . push dword [ebp + var] . push dword [ebp + 8] . push var . push var . call sub.msvcrt.dll__except_handler4_common
call var . jmp var . int . int . int . int . int . mov edi, edi . push ebp . mov ebp, esp . mov eax, dword [ebp + 8] . mov eax, dword [eax] . cmp dword [eax], var . jne var . cmp dword [eax + var], 3 . jne var . mov eax, dword [eax + var] . cmp eax, var . je var . cmp eax, var . je var . cmp eax, var . je var . cmp eax, var . jne var . call dword [sym.imp.msvcrt.dll_void___cdecl_terminate_void] . xor eax, eax . pop ebp . ret 4 . int . int . int . int . int . push var . call dword [sym.imp.KERNEL32.dll_SetUnhandledExceptionFilter] . xor eax, eax . ret . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll__XcptFilter] . int . int . int . int . int . int . int . int . int . int . int . int . int . int . mov edi, edi . push ebp . mov ebp, esp . mov ecx, dword [var] . mov eax, var . cmp word [ecx], ax
call var . jmp var . int . int . int . int . int . cmp ecx, dword [var] . jne var . ret 0 . jmp loc.0040362d . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_memset] . int . int . int . int . int . mov edi, edi . push ebp . mov ebp, esp . mov eax, dword [ebp + 8] . mov eax, dword [eax] . cmp dword [eax], var . jne var . cmp dword [eax + var], 3 . jne var . mov eax, dword [eax + var] . cmp eax, var . je var . cmp eax, var . je var . cmp eax, var . je var . cmp eax, var . jne var . call dword [sym.imp.msvcrt.dll_void___cdecl_terminate_void] . xor eax, eax . pop ebp . ret 4 . int . int . int . int . int . push var . call dword [sym.imp.KERNEL32.dll_SetUnhandledExceptionFilter] . xor eax, eax . ret . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll__XcptFilter] . int . int . int . int
jmp dword [sym.imp.mscoree.dll__CorExeMain] . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al
call var . push var . push var . call var . xor ebx, ebx . mov dword [var], ebx . mov dword [var], ebx . lea eax, [lpStartupInfo] . push eax . call dword [sym.imp.KERNEL32.dll_GetStartupInfoA] . mov dword [var], var . mov dword [var], 1 . mov eax, dword fs:[var] . mov esi, dword [eax + 4] . mov edi, var . push 0 . push esi . push edi . call dword [sym.imp.KERNEL32.dll_InterlockedCompareExchange] . test eax, eax . jne var . xor esi, esi . inc esi . mov eax, dword [var] . cmp eax, esi . je var . mov eax, dword [var] . test eax, eax . jne var . mov dword [var], esi . push var . push var . call var . pop ecx . pop ecx . test eax, eax . jne var . mov eax, dword [var] . cmp eax, esi . jne var . push var . push var . call sub.msvcrt.dll__initterm . pop ecx . pop ecx . mov dword [var], 2 . test ebx, ebx . jne var . push ebx . push edi . call dword [sym.imp.KERNEL32.dll_InterlockedExchange] . cmp dword [var], 0 . jne var . mov eax, dword [sym.imp.msvcrt.dll__acmdln] . mov esi, dword [eax] . mov dword [var], esi . mov al, byte [esi] . cmp al, var . jbe var . cmp al, var . je var . movzx eax, al . push eax . call dword [sym.imp.msvcrt.dll__ismbblead]
call var . jmp var . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_void___cdecl_operator_delete_void] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_void___cdecl_operator_delete___void] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll__wcsnicmp] . int . int . int . int . int . cmp ecx, dword [var] . jne var . ret 0 . jmp loc.0100bb67 . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_memset] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll__wcsicmp] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_void_____cdecl_operator_new_unsigned_int] . int . int . int . int . int . mov edi, edi . push ebp . mov ebp, esp . mov eax, dword [ebp + 8] . mov eax, dword [eax] . cmp dword [eax], var . jne var . cmp dword [eax + var], 3
call var . jmp var . int . int . int . int . int . mov edi, edi . push ebp . mov ebp, esp . mov eax, dword [ebp + 8] . mov eax, dword [eax] . cmp dword [eax], var . jne var . cmp dword [eax + var], 3 . jne var . mov eax, dword [eax + var] . cmp eax, var . je var . cmp eax, var . je var . cmp eax, var . je var . cmp eax, var . jne var . call dword [sym.imp.msvcrt.dll_void___cdecl_terminate_void] . xor eax, eax . pop ebp . ret 4 . int . int . int . int . int . push var . call dword [sym.imp.KERNEL32.dll_SetUnhandledExceptionFilter] . xor eax, eax . ret . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll__XcptFilter] . int . int . int . int . int . int . int . int . int . int . int . int . int . int . mov edi, edi . push ebp . mov ebp, esp . mov ecx, dword [var] . mov eax, var . cmp word [ecx], ax
call var . jmp var . int . int . int . int . int . mov edi, edi . push ebp . mov ebp, esp . sub esp, var . push ebx . xor ebx, ebx . cmp dword [var], ebx . jne var . call var . push ebx . push ebx . push ebx . push ebx . push ebx . mov dword [eax], var . call var . add esp, var . or eax, var . jmp var . mov ecx, dword [var] . push esi . mov esi, dword [var] . cmp ecx, ebx . je var . cmp esi, ebx . jne var . call var . push ebx . push ebx . push ebx . push ebx . push ebx . mov dword [eax], var . call var . add esp, var . or eax, var . jmp var . mov eax, var . mov dword [var], eax . cmp ecx, eax . ja var . mov dword [var], ecx . push edi . push dword [var] . lea eax, [var] . push dword [var] . mov dword [var], var . push dword [var] . mov dword [var], esi . push eax . mov dword [var], esi . call var . add esp, var . mov edi, eax . cmp esi, ebx . je var . dec dword [var]
call var . jmp var . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_swprintf_s] . int . int . int . int . int . cmp ecx, dword [var] . jne var . ret 0 . jmp loc.0100585c . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_memcpy] . int . int . int . int . int . int . push var . push dword fs:[0] . mov eax, dword [var] . mov dword [var], ebp . lea ebp, [var] . sub esp, eax . push ebx . push esi . push edi . mov eax, dword [var] . xor dword [ebp - 4], eax . xor eax, ebp . push eax . mov dword [ebp - var], esp . push dword [ebp - 8] . mov eax, dword [ebp - 4] . mov dword [ebp - 4], var . mov dword [ebp - 8], eax . lea eax, [ebp - var] . mov dword fs:[0], eax . ret . mov ecx, dword [var] . mov dword fs:[0], ecx . pop ecx . pop edi . pop edi . pop esi . pop ebx . mov esp, ebp . pop ebp . push ecx . ret . int . int . int
call var . jmp var . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll___CxxFrameHandler3] . int . int . int . int . int . cmp ecx, dword [var] . jne var . ret 0 . jmp loc.01007a57 . int . int . int . int . int . push eax . push dword fs:[0] . lea eax, [var] . sub esp, dword [var] . push ebx . push esi . push edi . mov dword [eax], ebp . mov ebp, eax . mov eax, dword [var] . xor eax, ebp . push eax . push dword [ebp - 4] . mov dword [ebp - 4], var . lea eax, [ebp - var] . mov dword fs:[0], eax . ret . int . int . int . int . int . push eax . push dword fs:[0] . lea eax, [var] . sub esp, dword [var] . push ebx . push esi . push edi . mov dword [eax], ebp . mov ebp, eax . mov eax, dword [var] . xor eax, ebp . push eax . mov dword [ebp - var], esp . push dword [ebp - 4] . mov dword [ebp - 4], var . lea eax, [ebp - var] . mov dword fs:[0], eax . ret . int
call var . jmp var . int . int . int . int . int . mov edi, edi . push ebp . mov ebp, esp . push esi . mov esi, dword [var] . push edi . xor edi, edi . cmp esi, edi . jne var . xor eax, eax . jmp var . cmp dword [var], edi . jne var . call var . push var . pop esi . mov dword [eax], esi . push edi . push edi . push edi . push edi . push edi . call var . add esp, var . mov eax, esi . jmp var . cmp dword [var], edi . je var . cmp dword [var], esi . jb var . push esi . push dword [var] . push dword [var] . call var . add esp, var . jmp var . push dword [var] . push edi . push dword [var] . call var . add esp, var . cmp dword [var], edi . je var . cmp dword [var], esi . jae var . call var . push var . pop ecx . mov dword [eax], ecx . mov esi, ecx . jmp var . push var . pop eax . pop edi . pop esi . pop ebp . ret
call var . jmp var . int . int . int . int . int . cmp ecx, dword [section..data] . jne var . ret 0 . jmp loc.0100c4b7 . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_memset] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_wcsncpy_s] . int . int . int . int . int . int . int . int . int . int . push ecx . lea ecx, [var] . sub ecx, eax . sbb eax, eax . not eax . and ecx, eax . mov eax, esp . and eax, var . cmp ecx, eax . jb var . mov eax, ecx . pop ecx . xchg eax, esp . mov eax, dword [eax] . mov dword [esp], eax . ret . sub eax, var . test dword [eax], eax . jmp var . int . int . int . int . int . mov edi, edi . push ebp . mov ebp, esp . mov eax, dword [ebp + 8] . mov eax, dword [eax] . cmp dword [eax], var
call var . jmp var . int . int . int . int . int . cmp ecx, dword [var] . jne var . ret 0 . jmp loc.0104792a . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_void___cdecl_operator_delete___void] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_void_____cdecl_operator_new_unsigned_int] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_void___cdecl_operator_delete_void] . int . int . int . int . int . int . int . int . int . int . int . int . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll__ftol2_sse] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_memset] . int . int . int . int . int . int
call var . jmp var . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_void___cdecl_operator_delete_void] . int . int . int . int . int . cmp ecx, dword [section..data] . jne var . ret 0 . jmp loc.01002177 . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_memset] . int . int . int . int . int . mov edi, edi . push ebp . mov ebp, esp . mov eax, dword [ebp + 8] . mov eax, dword [eax] . cmp dword [eax], var . jne var . cmp dword [eax + var], 3 . jne var . mov eax, dword [eax + var] . cmp eax, var . je var . cmp eax, var . je var . cmp eax, var . je var . cmp eax, var . jne var . call dword [sym.imp.msvcrt.dll_void___cdecl_terminate_void] . xor eax, eax . pop ebp . ret 4 . int . int . int . int . int . push var . call dword [sym.imp.KERNEL32.dll_SetUnhandledExceptionFilter] . xor eax, eax . ret . int . int . int . int . int
call var . jmp var . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_memset] . int . int . int . int . int . cmp ecx, dword [var] . jne var . ret 0 . jmp loc.010037f7 . int . int . int . int . int . mov edi, edi . push ebp . mov ebp, esp . mov eax, dword [ebp + 8] . mov eax, dword [eax] . cmp dword [eax], var . jne var . cmp dword [eax + var], 3 . jne var . mov eax, dword [eax + var] . cmp eax, var . je var . cmp eax, var . je var . cmp eax, var . je var . cmp eax, var . jne var . call dword [sym.imp.msvcrt.dll_void___cdecl_terminate_void] . xor eax, eax . pop ebp . ret 4 . int . int . int . int . int . push var . call dword [sym.imp.KERNEL32.dll_SetUnhandledExceptionFilter] . xor eax, eax . ret . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll__XcptFilter] . int . int . int
call var . jmp var . mov edi, edi . push ebp . mov ebp, esp . sub esp, var . mov eax, dword [var] . and dword [lpSystemTimeAsFileTime], 0 . and dword [var], 0 . push ebx . push edi . mov edi, var . mov ebx, var . cmp eax, edi . jne var . push esi . lea eax, [lpSystemTimeAsFileTime] . push eax . call dword [sym.imp.KERNEL32.dll_GetSystemTimeAsFileTime] . mov esi, dword [var] . xor esi, dword [lpSystemTimeAsFileTime] . call dword [sym.imp.KERNEL32.dll_GetCurrentProcessId] . xor esi, eax . call dword [sym.imp.KERNEL32.dll_GetCurrentThreadId] . xor esi, eax . call dword [sym.imp.KERNEL32.dll_GetTickCount] . xor esi, eax . lea eax, [lpPerformanceCount] . push eax . call dword [sym.imp.KERNEL32.dll_QueryPerformanceCounter] . mov eax, dword [var] . xor eax, dword [lpPerformanceCount] . xor esi, eax . cmp esi, edi . je var . test ebx, esi . je var . mov dword [var], esi . not esi . mov dword [var], esi . pop esi . pop edi . pop ebx . leave . ret . mov edi, edi . push ebp . mov ebp, esp . sub esp, var . push esi . push var . xor esi, esi . call dword [sym.imp.KERNEL32.dll_GetModuleHandleA] . test eax, eax . je var . push var . push eax . call dword [sym.imp.KERNEL32.dll_GetProcAddress] . test eax, eax . je var . call eax . movzx esi, ax . test si, si . je var
call var . jmp var . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_free] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_memcpy_s] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll__CxxThrowException] . int . int . int . int . int . mov edi, edi . push ebp . mov ebp, esp . push esi . mov esi, ecx . call dword [sym.imp.msvcrt.dll_public_virtual:_void___thiscall_type_info::_destructor_void] . test byte [ebp + 8], 1 . je var . push esi . call var . pop ecx . mov eax, esi . pop esi . pop ebp . ret 4 . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_wcsncpy_s] . int . int . int . int . int . int . push var . push dword fs:[0] . mov eax, dword [var] . mov dword [var], ebp . lea ebp, [var] . sub esp, eax . push ebx . push esi . push edi . mov eax, dword [var]
call var . jmp var . push var . push var . call var . and dword [var], 0 . dec dword [var] . js var . mov ecx, dword [var] . sub ecx, dword [var] . mov dword [var], ecx . call dword [var] . jmp var . mov eax, dword [ebp - var] . mov dword [ebp - var], eax . mov eax, dword [ebp - var] . mov eax, dword [eax] . mov dword [ebp - var], eax . mov eax, dword [ebp - var] . cmp dword [eax], var . je var . mov dword [ebp - var], 0 . mov eax, dword [ebp - var] . ret . call sub.MSVCR100.dll_void___cdecl_terminate_void . mov esp, dword [ebp - var] . mov dword [var], var . call var . ret var . push var . push var . call var . and dword [var], 0 . mov esi, dword [var] . mov eax, esi . imul eax, dword [var] . add dword [var], eax . and dword [var], 0 . dec dword [var] . js var . sub dword [var], esi . mov ecx, dword [var] . call dword [var] . jmp var . mov dword [var], 1 . mov dword [var], var . call var . call var . ret var . cmp dword [var], 0 . jne var . push dword [var] . push dword [var] . push dword [var] . push dword [var] . call var . ret . push var . push var . call var . push dword [var] . mov esi, dword [sym.imp.KERNEL32.dll_DecodePointer] . call esi . mov dword [var], eax
call var . jmp var . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_swprintf_s] . int . int . int . int . int . cmp ecx, dword [var] . jne var . ret 0 . jmp loc.01002db7 . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_wcscpy_s] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_vswprintf_s] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_wcscat_s] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_memset] . int . int . int . int . int . mov edi, edi . push ebp . mov ebp, esp . mov eax, dword [ebp + 8] . mov eax, dword [eax] . cmp dword [eax], var . jne var . cmp dword [eax + var], 3 . jne var . mov eax, dword [eax + var] . cmp eax, var . je var . cmp eax, var . je var . cmp eax, var
call var . jmp var . int . int . int . int . int . cmp ecx, dword [var] . jne var . ret 0 . jmp loc.01007957 . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_memset] . int . int . int . int . int . int . int . int . push ebx . mov eax, dword [var] . or eax, eax . jne var . mov ecx, dword [var] . mov eax, dword [var] . xor edx, edx . div ecx . mov eax, dword [var] . div ecx . mov eax, edx . xor edx, edx . jmp var . mov ecx, eax . mov ebx, dword [var] . mov edx, dword [var] . mov eax, dword [var] . shr ecx, 1 . rcr ebx, 1 . shr edx, 1 . rcr eax, 1 . or ecx, ecx . jne var . div ebx . mov ecx, eax . mul dword [var] . xchg eax, ecx . mul dword [var] . add edx, ecx . jb var . cmp edx, dword [var] . ja var . jb var . cmp eax, dword [var] . jbe var . sub eax, dword [var] . sbb edx, dword [var] . sub eax, dword [var]
call var . jmp var . int . int . int . int . int . cmp ecx, dword [var] . jne var . ret 0 . jmp loc.0101d8e7 . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_memset] . int . int . int . int . int . int . int . int . int . int . int . int . mov eax, dword [var] . mov ecx, dword [var] . or ecx, eax . mov ecx, dword [var] . jne var . mov eax, dword [var] . mul ecx . ret var . push ebx . mul ecx . mov ebx, eax . mov eax, dword [var] . mul dword [var] . add ebx, eax . mov eax, dword [var] . mul ecx . add edx, ebx . pop ebx . ret var . int . int . int . int . int . int . int . int . int . int . int . int . push ecx . lea ecx, [var] . sub ecx, eax
call var . jmp var . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll___CxxFrameHandler3] . int . int . int . int . int . cmp ecx, dword [var] . jne var . ret 0 . jmp loc.01036a1f . int . int . int . int . int . push eax . push dword fs:[0] . lea eax, [var] . sub esp, dword [var] . push ebx . push esi . push edi . mov dword [eax], ebp . mov ebp, eax . mov eax, dword [var] . xor eax, ebp . push eax . push dword [ebp - 4] . mov dword [ebp - 4], var . lea eax, [ebp - var] . mov dword fs:[0], eax . ret . int . int . int . int . int . push eax . push dword fs:[0] . lea eax, [var] . sub esp, dword [var] . push ebx . push esi . push edi . mov dword [eax], ebp . mov ebp, eax . mov eax, dword [var] . xor eax, ebp . push eax . mov dword [ebp - var], esp . push dword [ebp - 4] . mov dword [ebp - 4], var . lea eax, [ebp - var] . mov dword fs:[0], eax . ret . int
call var . jmp var . int . int . int . int . int . cmp ecx, dword [var] . jne var . ret 0 . jmp loc.01004cef . int . int . int . int . int . int . int . int . int . int . int . int . int . int . int . int . int . int . int . int . push ecx . lea ecx, [var] . sub ecx, eax . sbb eax, eax . not eax . and ecx, eax . mov eax, esp . and eax, var . cmp ecx, eax . jb var . mov eax, ecx . pop ecx . xchg eax, esp . mov eax, dword [eax] . mov dword [esp], eax . ret . sub eax, var . test dword [eax], eax . jmp var . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_memset] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_swprintf_s] . int
jmp dword [sym.imp.mscoree.dll__CorExeMain] . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al
call var . jmp var . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_void___cdecl_operator_delete_void] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_void___cdecl_operator_delete___void] . int . int . int . int . int . push var . push var . call var . and dword [var], 0 . dec dword [var] . js var . mov ecx, dword [var] . sub ecx, dword [var] . mov dword [var], ecx . call dword [var] . jmp var . mov eax, dword [ebp - var] . mov dword [ebp - var], eax . mov eax, dword [ebp - var] . mov eax, dword [eax] . mov dword [ebp - var], eax . mov eax, dword [ebp - var] . cmp dword [eax], var . je var . mov dword [ebp - var], 0 . mov eax, dword [ebp - var] . ret . call dword [sym.imp.msvcrt.dll_void___cdecl_terminate_void] . mov esp, dword [ebp - var] . mov dword [var], var . call var . ret var . int . int . int . int . int . push var . push var . call var . and dword [var], 0 . mov esi, dword [var] . mov eax, esi . imul eax, dword [var] . add dword [var], eax . and dword [var], 0 . dec dword [var] . js var . sub dword [var], esi
call var . jmp var . int . int . int . int . int . cmp ecx, dword [var] . jne var . ret 0 . jmp loc.0100a8e7 . int . int . int . int . int . push var . push var . call var . mov eax, dword [var] . mov dword [var], eax . cmp eax, var . jne var . push dword [var] . call dword [sym.imp.msvcrt.dll__onexit] . pop ecx . jmp var . push 8 . call sub.msvcrt.dll__lock . pop ecx . and dword [var], 0 . mov eax, dword [var] . mov dword [var], eax . mov eax, dword [var] . mov dword [var], eax . lea eax, [var] . push eax . lea eax, [var] . push eax . push dword [var] . call sub.msvcrt.dll___dllonexit . add esp, var . mov dword [var], eax . mov eax, dword [var] . mov dword [var], eax . mov eax, dword [var] . mov dword [var], eax . mov dword [var], var . call var . mov eax, dword [var] . call var . ret . push 8 . call sub.msvcrt.dll__unlock . pop ecx . ret . int . int . int . int . int . mov edi, edi . push ebp . mov ebp, esp
mov edi, edi . push esi . call var . test eax, eax . jge var . mov esi, eax . call var . mov eax, esi . pop esi . ret . mov eax, dword [var] . call eax . jmp var . jmp dword [sym.imp.msvcrt.dll_wcscpy_s] . jmp dword [sym.imp.msvcrt.dll_memcpy] . pushfd . push ebp . mov ebp, esp . sub esp, var . mov dword [ebp - var], eax . mov dword [ebp - var], ecx . mov ecx, var . mov dword [ebp - var], edx . mov dword [ebp - var], ebx . mov dword [ebp - var], esi . mov dword [ebp - var], edi . mov edi, var . lea eax, [ebp + 4] . sub eax, 4 . mov dword [ebp - var], eax . mov eax, dword [eax + 8] . mov edx, dword [eax] . shr edx, 1 . and edx, ecx . mov ebx, dword [eax + 8] . mov esi, dword [eax + 4] . mov dword [ebp - var], edx . add eax, var . and ebx, ecx . add ebx, edi . and esi, ecx . lea edx, [eax - 1] . cmp edx, var . mov dword [ebp - var], ebx . mov dword [ebp - var], esi . mov dword [ebp - var], eax . mov dword [ebp - var], edx . jb var . mov edx, dword [var] . mov ecx, dword [var] . imul ecx, edx . mov edx, dword [ebp - var] . lea ecx, [ecx + var] . cmp edx, ecx . jae var . mov ecx, dword [var] . mov eax, edx . sub eax, var . xor edx, edx . div ecx . mov ecx, dword [var] . mov edx, dword [ebp - var] . imul ecx, eax . lea ecx, [ecx + var]
jmp dword [sym.imp.mscoree.dll__CorExeMain] . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al
jmp dword [sym.imp.mscoree.dll__CorExeMain] . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al
jmp dword [sym.imp.mscoree.dll__CorExeMain] . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al
call var . jmp var . int . int . int . int . int . mov edi, edi . push ebp . mov ebp, esp . mov eax, dword [ebp + 8] . mov eax, dword [eax] . cmp dword [eax], var . jne var . cmp dword [eax + var], 3 . jne var . mov eax, dword [eax + var] . cmp eax, var . je var . cmp eax, var . je var . cmp eax, var . je var . cmp eax, var . jne var . call dword [sym.imp.msvcrt.dll_void___cdecl_terminate_void] . xor eax, eax . pop ebp . ret 4 . int . int . int . int . int . push var . call dword [sym.imp.KERNEL32.dll_SetUnhandledExceptionFilter] . xor eax, eax . ret . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll__XcptFilter] . int . int . int . int . int . int . int . int . int . int . int . int . int . int . mov edi, edi . push ebp . mov ebp, esp . mov ecx, dword [var] . mov eax, var . cmp word [ecx], ax
call var . jmp var . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_memset] . int . int . int . int . int . cmp ecx, dword [section..data] . jne var . ret 0 . jmp loc.01002f37 . int . int . int . int . int . mov edi, edi . push ebp . mov ebp, esp . mov eax, dword [ebp + 8] . mov eax, dword [eax] . cmp dword [eax], var . jne var . cmp dword [eax + var], 3 . jne var . mov eax, dword [eax + var] . cmp eax, var . je var . cmp eax, var . je var . cmp eax, var . je var . cmp eax, var . jne var . call dword [sym.imp.msvcrt.dll_void___cdecl_terminate_void] . xor eax, eax . pop ebp . ret 4 . int . int . int . int . int . push var . call dword [sym.imp.KERNEL32.dll_SetUnhandledExceptionFilter] . xor eax, eax . ret . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll__XcptFilter] . int . int . int
call var . jmp var . push var . push var . call var . push dword [var] . mov esi, dword [sym.imp.KERNEL32.dll_DecodePointer] . call esi . mov dword [var], eax . cmp eax, var . jne var . push dword [var] . call dword [sym.imp.MSVCR100.dll__onexit] . pop ecx . jmp var . push 8 . call sub.MSVCR100.dll__lock . pop ecx . and dword [var], 0 . push dword [var] . call esi . mov dword [var], eax . push dword [var] . call esi . mov dword [var], eax . lea eax, [var] . push eax . lea eax, [var] . push eax . push dword [var] . mov esi, dword [sym.imp.KERNEL32.dll_EncodePointer] . call esi . push eax . call sub.MSVCR100.dll___dllonexit . add esp, var . mov dword [var], eax . push dword [var] . call esi . mov dword [var], eax . push dword [var] . call esi . mov dword [var], eax . mov dword [var], var . call var . mov eax, dword [var] . call var . ret . push 8 . call sub.MSVCR100.dll__unlock . pop ecx . ret . mov edi, edi . push ebp . mov ebp, esp . push dword [var] . call var . neg eax . sbb eax, eax . neg eax . pop ecx . dec eax . pop ebp . ret . push var
jmp dword [sym.imp.mscoree.dll__CorExeMain] . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al
call var . jmp var . nop . nop . nop . nop . nop . mov edi, edi . push ebp . mov ebp, esp . sub esp, var . mov eax, dword [var] . and dword [lpSystemTimeAsFileTime], 0 . and dword [var], 0 . push ebx . push edi . mov edi, var . mov ebx, var . cmp eax, edi . jne var . push esi . lea eax, [lpSystemTimeAsFileTime] . push eax . call dword [sym.imp.KERNEL32.dll_GetSystemTimeAsFileTime] . mov esi, dword [var] . xor esi, dword [lpSystemTimeAsFileTime] . call dword [sym.imp.KERNEL32.dll_GetCurrentProcessId] . xor esi, eax . call dword [sym.imp.KERNEL32.dll_GetCurrentThreadId] . xor esi, eax . call dword [sym.imp.KERNEL32.dll_GetTickCount] . xor esi, eax . lea eax, [lpPerformanceCount] . push eax . call dword [sym.imp.KERNEL32.dll_QueryPerformanceCounter] . mov eax, dword [var] . xor eax, dword [lpPerformanceCount] . xor esi, eax . cmp esi, edi . jne var . jmp var . pop edi . pop ebx . leave . ret . nop . nop . nop . nop . nop . mov edi, edi . push ebp . mov ebp, esp . sub esp, var . and dword [lpWndClass], 0 . push edi . push 9 . pop ecx . xor eax, eax . lea edi, [var] . rep stosd dword es:[edi], eax . lea eax, [lpWndClass] . push eax . push var
call var . jmp var . int . int . int . int . int . cmp ecx, dword [section..data] . jne var . ret 0 . jmp loc.01002f97 . int . int . int . int . int . mov edi, edi . push ebp . mov ebp, esp . mov eax, dword [ebp + 8] . mov eax, dword [eax] . cmp dword [eax], var . jne var . cmp dword [eax + var], 3 . jne var . mov eax, dword [eax + var] . cmp eax, var . je var . cmp eax, var . je var . cmp eax, var . je var . cmp eax, var . jne var . call dword [sym.imp.msvcrt.dll_void___cdecl_terminate_void] . xor eax, eax . pop ebp . ret 4 . int . int . int . int . int . push var . call dword [sym.imp.KERNEL32.dll_SetUnhandledExceptionFilter] . xor eax, eax . ret . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll__XcptFilter] . int . int . int . int . int . int . int . int . int . int
call var . jmp var . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll___CxxFrameHandler3] . int . int . int . int . int . cmp ecx, dword [var] . jne var . ret 0 . jmp loc.01013ebf . int . int . int . int . int . push eax . push dword fs:[0] . lea eax, [var] . sub esp, dword [var] . push ebx . push esi . push edi . mov dword [eax], ebp . mov ebp, eax . mov eax, dword [var] . xor eax, ebp . push eax . push dword [ebp - 4] . mov dword [ebp - 4], var . lea eax, [ebp - var] . mov dword fs:[0], eax . ret . int . int . int . int . int . push eax . push dword fs:[0] . lea eax, [var] . sub esp, dword [var] . push ebx . push esi . push edi . mov dword [eax], ebp . mov ebp, eax . mov eax, dword [var] . xor eax, ebp . push eax . mov dword [ebp - var], eax . push dword [ebp - 4] . mov dword [ebp - 4], var . lea eax, [ebp - var] . mov dword fs:[0], eax . ret . int . int
call var . jmp var . int . int . int . int . int . cmp ecx, dword [var] . jne var . ret 0 . jmp loc.22917a87 . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll____U_YAPAXI_Z] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll____V_YAXPAX_Z] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll___3_YAXPAX_Z] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll___2_YAPAXI_Z] . int . int . int . int . int . int . int . int . int . int . int . int . int . int . int . int . int . int . int . int . int . int . push ebx . push esi . push edi
jmp dword [sym.imp.mscoree.dll__CorExeMain] . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al
call var . jmp var . mov edi, edi . push ebp . mov ebp, esp . sub esp, var . mov dword [var], eax . mov dword [var], ecx . mov dword [var], edx . mov dword [var], ebx . mov dword [var], esi . mov dword [var], edi . mov word [var], ss . mov word [var], cs . mov word [var], ds . mov word [var], es . mov word [var], fs . mov word [var], gs . pushfd . pop dword [var] . mov eax, dword [ebp] . mov dword [var], eax . mov eax, dword [ebp + 4] . mov dword [var], eax . lea eax, [ebp + 8] . mov dword [var], eax . mov eax, dword [ebp - var] . mov dword [var], var . mov eax, dword [var] . mov dword [var], eax . mov dword [var], var . mov dword [var], 1 . mov eax, dword [var] . mov dword [ebp - var], eax . mov eax, dword [var] . mov dword [ebp - var], eax . call dword [sym.imp.KERNEL32.dll_IsDebuggerPresent] . mov dword [var], eax . push 1 . call sub.MSVCR100.dll__crt_debugger_hook . pop ecx . push 0 . call dword [sym.imp.KERNEL32.dll_SetUnhandledExceptionFilter] . push var . call dword [sym.imp.KERNEL32.dll_UnhandledExceptionFilter] . cmp dword [var], 0 . jne var . push 1 . call sub.MSVCR100.dll__crt_debugger_hook . pop ecx . push var . call dword [sym.imp.KERNEL32.dll_GetCurrentProcess] . push eax . call dword [sym.imp.KERNEL32.dll_TerminateProcess] . leave . ret . mov edi, edi . push ebp . mov ebp, esp . mov eax, dword [ebp + 8] . mov eax, dword [eax] . cmp dword [eax], var . jne var . cmp dword [eax + var], 3
call var . jmp var . int . int . int . int . int . mov edi, edi . push ebp . mov ebp, esp . mov eax, dword [ebp + 8] . mov eax, dword [eax] . cmp dword [eax], var . jne var . cmp dword [eax + var], 3 . jne var . mov eax, dword [eax + var] . cmp eax, var . je var . cmp eax, var . je var . cmp eax, var . je var . cmp eax, var . jne var . call dword [sym.imp.msvcrt.dll_void___cdecl_terminate_void] . xor eax, eax . pop ebp . ret 4 . int . int . int . int . int . push var . call dword [sym.imp.KERNEL32.dll_SetUnhandledExceptionFilter] . xor eax, eax . ret . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll__XcptFilter] . int . int . int . int . int . int . mov edi, edi . push ebp . mov ebp, esp . mov ecx, dword [var] . mov eax, var . cmp word [ecx], ax . je var . xor eax, eax . pop ebp . ret . mov eax, dword [ecx + var] . add eax, ecx . cmp dword [eax], var . jne var
call var . jmp var . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_memset] . int . int . int . int . int . cmp ecx, dword [section..data] . jne var . ret 0 . jmp loc.01010d6d . int . int . int . int . int . push var . push dword fs:[0] . mov eax, dword [var] . mov dword [var], ebp . lea ebp, [var] . sub esp, eax . push ebx . push esi . push edi . mov eax, dword [section..data] . xor dword [ebp - 4], eax . xor eax, ebp . mov dword [ebp - var], eax . push eax . mov dword [ebp - var], esp . push dword [ebp - 8] . mov eax, dword [ebp - 4] . mov dword [ebp - 4], var . mov dword [ebp - 8], eax . lea eax, [ebp - var] . mov dword fs:[0], eax . ret . mov ecx, dword [var] . xor ecx, ebp . call var . jmp var . int . int . int . int . int . mov edi, edi . push ebp . mov ebp, esp . push dword [ebp + var] . push dword [ebp + var] . push dword [ebp + var] . push dword [ebp + 8] . push var . push section..data . call sub.msvcrt.dll__except_handler4_common
call var . push var . push var . call var . xor ebx, ebx . mov dword [var], ebx . mov eax, dword fs:[var] . mov esi, dword [eax + 4] . mov dword [var], ebx . mov edi, var . push ebx . push esi . push edi . call dword [sym.imp.API_MS_Win_Core_Interlocked_L1_1_0.dll_InterlockedCompareExchange] . cmp eax, ebx . jne var . xor esi, esi . inc esi . mov eax, dword [var] . cmp eax, esi . je var . mov eax, dword [var] . test eax, eax . jne var . mov dword [var], esi . push var . push var . call var . pop ecx . pop ecx . test eax, eax . jne var . mov eax, dword [var] . cmp eax, esi . jne var . push var . push var . call sub.msvcrt.dll__initterm . pop ecx . pop ecx . mov dword [var], 2 . cmp dword [var], ebx . jne var . push ebx . push edi . call dword [sym.imp.API_MS_Win_Core_Interlocked_L1_1_0.dll_InterlockedExchange] . cmp dword [var], ebx . jne var . push dword [var] . push dword [var] . push dword [var] . call var . jmp var . mov dword [var], esi . jmp var . nop . add byte [eax], al . add byte [eax], al . xchg eax, esp . sub al, byte [ecx] . add dword [eax], eax . add byte [eax], al . add byte [eax], al . add byte [eax], al
call var . jmp var . int . int . int . int . int . cmp ecx, dword [var] . jne var . ret 0 . jmp loc.010295aa . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_memset] . int . int . int . int . int . int . push ecx . lea ecx, [var] . sub ecx, eax . sbb eax, eax . not eax . and ecx, eax . mov eax, esp . and eax, var . cmp ecx, eax . jb var . mov eax, ecx . pop ecx . xchg eax, esp . mov eax, dword [eax] . mov dword [esp], eax . ret . sub eax, var . test dword [eax], eax . jmp var . int . int . int . int . int . push var . push dword fs:[0] . mov eax, dword [var] . mov dword [var], ebp . lea ebp, [var] . sub esp, eax . push ebx . push esi . push edi . mov eax, dword [var] . xor dword [ebp - 4], eax . xor eax, ebp . mov dword [ebp - var], eax . push eax . mov dword [ebp - var], esp . push dword [ebp - 8] . mov eax, dword [ebp - 4]
call var . jmp var . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_memcpy_s] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_wcscpy_s] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_wcscat_s] . int . int . int . int . int . cmp ecx, dword [var] . jne var . ret 0 . jmp loc.01003b17 . int . int . int . int . int . int . int . push edi . push esi . push ebp . xor edi, edi . xor ebp, ebp . mov eax, dword [var] . or eax, eax . jge var . inc edi . inc ebp . mov edx, dword [var] . neg eax . neg edx . sbb eax, 0 . mov dword [var], eax . mov dword [var], edx . mov eax, dword [var] . or eax, eax . jge var . inc edi . mov edx, dword [var] . neg eax . neg edx . sbb eax, 0 . mov dword [var], eax
call var . jmp var . int . int . int . int . int . cmp ecx, dword [var] . jne var . ret 0 . jmp loc.01003a37 . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_memset] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_memcpy] . int . int . int . int . int . mov edi, edi . push ebp . mov ebp, esp . mov eax, dword [ebp + 8] . mov eax, dword [eax] . cmp dword [eax], var . jne var . cmp dword [eax + var], 3 . jne var . mov eax, dword [eax + var] . cmp eax, var . je var . cmp eax, var . je var . cmp eax, var . je var . cmp eax, var . jne var . call dword [sym.imp.msvcrt.dll_void___cdecl_terminate_void] . xor eax, eax . pop ebp . ret 4 . int . int . int . int . int . push var . call dword [sym.imp.KERNEL32.dll_SetUnhandledExceptionFilter] . xor eax, eax . ret . int . int . int
call var . jmp var . int . int . int . int . int . cmp ecx, dword [section..data] . jne var . ret 0 . jmp loc.010024b7 . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_memset] . int . int . int . int . int . mov edi, edi . push ebp . mov ebp, esp . mov eax, dword [ebp + 8] . mov eax, dword [eax] . cmp dword [eax], var . jne var . cmp dword [eax + var], 3 . jne var . mov eax, dword [eax + var] . cmp eax, var . je var . cmp eax, var . je var . cmp eax, var . je var . cmp eax, var . jne var . call dword [sym.imp.msvcrt.dll_void___cdecl_terminate_void] . xor eax, eax . pop ebp . ret 4 . int . int . int . int . int . push var . call dword [sym.imp.KERNEL32.dll_SetUnhandledExceptionFilter] . xor eax, eax . ret . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll__XcptFilter] . int . int . int . int
call var . jmp var . int . int . int . int . int . int . int . int . push var . push dword fs:[0] . mov eax, dword [var] . mov dword [var], ebp . lea ebp, [var] . sub esp, eax . push ebx . push esi . push edi . mov eax, dword [var] . xor dword [ebp - 4], eax . xor eax, ebp . push eax . mov dword [ebp - var], esp . push dword [ebp - 8] . mov eax, dword [ebp - 4] . mov dword [ebp - 4], var . mov dword [ebp - 8], eax . lea eax, [ebp - var] . mov dword fs:[0], eax . ret . mov ecx, dword [var] . mov dword fs:[0], ecx . pop ecx . pop edi . pop edi . pop esi . pop ebx . mov esp, ebp . pop ebp . push ecx . ret . int . int . int . int . int . mov edi, edi . push ebp . mov ebp, esp . push dword [ebp + var] . push dword [ebp + var] . push dword [ebp + var] . push dword [ebp + 8] . push var . push var . call sub.msvcrt.dll__except_handler4_common . add esp, var . pop ebp . ret . int . int . int . int
call var . jmp var . int . int . int . int . int . cmp ecx, dword [section..data] . jne var . ret 0 . jmp loc.01001947 . int . int . int . int . int . mov edi, edi . push ebp . mov ebp, esp . mov eax, dword [ebp + 8] . mov eax, dword [eax] . cmp dword [eax], var . jne var . cmp dword [eax + var], 3 . jne var . mov eax, dword [eax + var] . cmp eax, var . je var . cmp eax, var . je var . cmp eax, var . je var . cmp eax, var . jne var . call dword [sym.imp.msvcrt.dll_void___cdecl_terminate_void] . xor eax, eax . pop ebp . ret 4 . int . int . int . int . int . push var . call dword [sym.imp.KERNEL32.dll_SetUnhandledExceptionFilter] . xor eax, eax . ret . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll__XcptFilter] . int . int . int . int . int . int . int . int . int . int . int
call var . jmp var . int . int . int . int . int . cmp ecx, dword [section..data] . jne var . ret 0 . jmp loc.01001db7 . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_memset] . int . int . int . int . int . mov edi, edi . push ebp . mov ebp, esp . mov eax, dword [ebp + 8] . mov eax, dword [eax] . cmp dword [eax], var . jne var . cmp dword [eax + var], 3 . jne var . mov eax, dword [eax + var] . cmp eax, var . je var . cmp eax, var . je var . cmp eax, var . je var . cmp eax, var . jne var . call dword [sym.imp.msvcrt.dll_void___cdecl_terminate_void] . xor eax, eax . pop ebp . ret 4 . int . int . int . int . int . push var . call dword [sym.imp.KERNEL32.dll_SetUnhandledExceptionFilter] . xor eax, eax . ret . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll__XcptFilter] . int . int . int . int . int
call var . jmp var . int . int . int . int . int . cmp ecx, dword [var] . jne var . ret 0 . jmp loc.01005ee7 . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_memcpy] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_sprintf_s] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_strcpy_s] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_memset] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_wcscpy_s] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll__snwprintf_s] . int . int . int . int . int . int . int . int . int . int . int
call var . jmp var . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_void___cdecl_operator_delete_void] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_void_____cdecl_operator_new___unsigned_int] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll___CxxFrameHandler3] . int . int . int . int . int . cmp ecx, dword [var] . jne var . ret 0 . jmp loc.0102b6cc . int . int . int . int . int . push eax . push dword fs:[0] . lea eax, [var] . sub esp, dword [var] . push ebx . push esi . push edi . mov dword [eax], ebp . mov ebp, eax . mov eax, dword [var] . xor eax, ebp . push eax . push dword [ebp - 4] . mov dword [ebp - 4], var . lea eax, [ebp - var] . mov dword fs:[0], eax . ret . int . int . int . int . int . push eax . push dword fs:[0] . lea eax, [var] . sub esp, dword [var] . push ebx . push esi
call var . jmp var . int . int . int . int . int . int . int . push var . push dword fs:[0] . mov eax, dword [var] . mov dword [var], ebp . lea ebp, [var] . sub esp, eax . push ebx . push esi . push edi . mov eax, dword [var] . xor dword [ebp - 4], eax . xor eax, ebp . mov dword [ebp - var], eax . push eax . mov dword [ebp - var], esp . push dword [ebp - 8] . mov eax, dword [ebp - 4] . mov dword [ebp - 4], var . mov dword [ebp - 8], eax . lea eax, [ebp - var] . mov dword fs:[0], eax . ret . mov ecx, dword [var] . xor ecx, ebp . call var . jmp var . int . int . int . int . int . mov edi, edi . push ebp . mov ebp, esp . push dword [ebp + var] . push dword [ebp + var] . push dword [ebp + var] . push dword [ebp + 8] . push var . push var . call sub.msvcrt.dll__except_handler4_common . add esp, var . pop ebp . ret . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_wcscat_s] . int . int . int . int . int
call var . jmp var . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_void___cdecl_operator_delete___void] . int . int . int . int . int . cmp ecx, dword [var] . jne var . ret 0 . jmp loc.01007e37 . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll___CxxFrameHandler3] . int . int . int . int . int . push eax . push dword fs:[0] . lea eax, [var] . sub esp, dword [var] . push ebx . push esi . push edi . mov dword [eax], ebp . mov ebp, eax . mov eax, dword [var] . xor eax, ebp . push eax . push dword [ebp - 4] . mov dword [ebp - 4], var . lea eax, [ebp - var] . mov dword fs:[0], eax . ret . int . int . int . int . int . push eax . push dword fs:[0] . lea eax, [var] . sub esp, dword [var] . push ebx . push esi . push edi . mov dword [eax], ebp . mov ebp, eax . mov eax, dword [var] . xor eax, ebp . push eax . mov dword [ebp - var], esp . push dword [ebp - 4]
call var . jmp var . int . int . int . int . int . mov edi, edi . push ebp . mov ebp, esp . pop ebp . jmp var . int . int . int . int . int . mov edi, edi . push ebp . mov ebp, esp . pop ebp . jmp var . int . int . int . int . int . mov edi, edi . push ebp . mov ebp, esp . sub esp, var . push ebx . xor ebx, ebx . cmp dword [var], ebx . jne var . call var . push ebx . push ebx . push ebx . push ebx . push ebx . mov dword [eax], var . call var . add esp, var . or eax, var . jmp var . mov eax, dword [var] . push esi . mov esi, dword [var] . cmp eax, ebx . je var . cmp esi, ebx . jne var . call var . push ebx . push ebx . push ebx . push ebx . push ebx . mov dword [eax], var . call var . add esp, var . or eax, var . jmp var
call var . jmp var . nop . nop . nop . nop . nop . mov edi, edi . push ebp . mov ebp, esp . sub esp, var . mov eax, dword [section..data] . and dword [lpSystemTimeAsFileTime], 0 . and dword [var], 0 . push ebx . push edi . mov edi, var . mov ebx, var . cmp eax, edi . jne var . push esi . lea eax, [lpSystemTimeAsFileTime] . push eax . call dword [sym.imp.KERNEL32.dll_GetSystemTimeAsFileTime] . mov esi, dword [var] . xor esi, dword [lpSystemTimeAsFileTime] . call dword [sym.imp.KERNEL32.dll_GetCurrentProcessId] . xor esi, eax . call dword [sym.imp.KERNEL32.dll_GetCurrentThreadId] . xor esi, eax . call dword [sym.imp.KERNEL32.dll_GetTickCount] . xor esi, eax . lea eax, [lpPerformanceCount] . push eax . call dword [sym.imp.KERNEL32.dll_QueryPerformanceCounter] . mov eax, dword [var] . xor eax, dword [lpPerformanceCount] . xor esi, eax . cmp esi, edi . je var . test dword [section..data], ebx . je var . mov dword [section..data], esi . not esi . mov dword [var], esi . pop esi . pop edi . pop ebx . leave . ret . mov esi, var . jmp var . cmp dword [var], 0 . jne var . call var . push eax . mov dword [var], eax . call var . test eax, eax . je var . push 0 . push var . push dword [var] . call var
call var . jmp var . int . int . int . int . int . int . int . int . int . int . int . int . int . int . int . int . int . int . int . cmp ecx, dword [var] . jne var . ret 0 . jmp loc.0040507d . int . int . int . int . int . int . int . int . int . int . int . push ecx . lea ecx, [esp + 4] . sub ecx, eax . sbb eax, eax . not eax . and ecx, eax . mov eax, esp . and eax, var . cmp ecx, eax . jb var . mov eax, ecx . pop ecx . xchg eax, esp . mov eax, dword [eax] . mov dword [esp], eax . ret . sub eax, var . test dword [eax], eax . jmp var . int . int . int . int . int . push ebx . push esi . push edi . mov edx, dword [var]
jmp dword [sym.imp.mscoree.dll__CorExeMain] . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al
call var . jmp var . int . int . int . int . int . mov edi, edi . push ebp . mov ebp, esp . sub esp, var . mov eax, dword [var] . xor eax, ebp . mov dword [var], eax . mov dword [var], eax . mov dword [var], ecx . mov dword [var], edx . mov dword [var], ebx . mov dword [var], esi . mov dword [var], edi . mov word [var], ss . mov word [var], cs . mov word [var], ds . mov word [var], es . mov word [var], fs . mov word [var], gs . pushfd . pop dword [var] . mov eax, dword [var] . mov dword [var], eax . lea eax, [var] . mov dword [var], var . mov dword [var], eax . mov eax, dword [eax - 4] . push var . mov dword [var], eax . call dword [sym.imp.KERNEL32.dll_OutputDebugStringA] . mov ecx, dword [var] . xor ecx, ebp . call var . leave . ret . int . int . int . int . int . mov edi, edi . push ebp . mov ebp, esp . pop ebp . jmp var . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_memcpy_s] . int . int . int . int . int . int
call var . jmp var . int . int . int . int . int . cmp ecx, dword [var] . jne var . ret 0 . jmp loc.010039ac . int . int . int . int . int . int . int . int . push var . push dword fs:[0] . mov eax, dword [var] . mov dword [var], ebp . lea ebp, [var] . sub esp, eax . push ebx . push esi . push edi . mov eax, dword [var] . xor dword [ebp - 4], eax . xor eax, ebp . push eax . mov dword [ebp - var], esp . push dword [ebp - 8] . mov eax, dword [ebp - 4] . mov dword [ebp - 4], var . mov dword [ebp - 8], eax . lea eax, [ebp - var] . mov dword fs:[0], eax . ret . mov ecx, dword [var] . mov dword fs:[0], ecx . pop ecx . pop edi . pop edi . pop esi . pop ebx . mov esp, ebp . pop ebp . push ecx . ret . int . int . int . int . int . mov edi, edi . push ebp . mov ebp, esp . push dword [ebp + var] . push dword [ebp + var] . push dword [ebp + var] . push dword [ebp + 8] . push var
mov edi, edi . push esi . call var . test eax, eax . jge var . mov esi, eax . call var . mov eax, esi . pop esi . ret . mov eax, dword [var] . call eax . jmp var . pushfd . push ebp . mov ebp, esp . sub esp, var . mov dword [ebp - var], eax . mov dword [ebp - 8], ecx . mov dword [ebp - var], edx . mov dword [ebp - 4], ebx . lea edx, [ebp + 4] . mov dword [ebp - var], esi . mov dword [ebp - var], edi . push 4 . pop ebx . sub edx, ebx . mov esi, dword [edx + 8] . mov edi, dword [esi + 4] . mov eax, dword [edx + 4] . mov ecx, edi . shr ecx, 6 . and ecx, var . cmp ecx, var . jne var . shr eax, 7 . not eax . and eax, 1 . mov ecx, eax . jmp var . cmp ecx, var . jne var . shr eax, 4 . jmp var . cmp ecx, var . jne var . test al, 1 . jne var . test eax, var . jmp var . cmp ecx, 8 . jne var . test bl, al . je var . mov ecx, eax . shr ecx, 5 . xor ecx, eax . test cl, var . jmp var . cmp ecx, var . jne var . and al, 1 . xor ecx, ecx . cmp al, 1
call var . jmp var . int . int . int . int . int . cmp ecx, dword [var] . jne var . ret 0 . jmp loc.01008717 . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll__mbscat_s] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll__setjmp3] . int . int . int . int . int . int . int . int . int . int . int . int . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_memset] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_memcpy] . int . int . int . int . int . mov edi, edi . push ebp . mov ebp, esp . mov eax, dword [ebp + 8] . mov eax, dword [eax] . cmp dword [eax], var . jne var . cmp dword [eax + var], 3
call var . jmp var . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll__CxxThrowException] . int . int . int . int . int . mov edi, edi . push ebp . mov ebp, esp . push esi . mov esi, ecx . call dword [sym.imp.msvcrt.dll_public_virtual:_void___thiscall_type_info::_destructor_void] . test byte [ebp + 8], 1 . je var . push esi . call var . pop ecx . mov eax, esi . pop esi . pop ebp . ret 4 . int . int . int . int . int . push var . push var . call var . and dword [var], 0 . dec dword [var] . js var . mov ecx, dword [var] . sub ecx, dword [var] . mov dword [var], ecx . call dword [var] . jmp var . mov eax, dword [ebp - var] . mov dword [ebp - var], eax . mov eax, dword [ebp - var] . mov eax, dword [eax] . mov dword [ebp - var], eax . mov eax, dword [ebp - var] . cmp dword [eax], var . je var . mov dword [ebp - var], 0 . mov eax, dword [ebp - var] . ret . call dword [sym.imp.msvcrt.dll_void___cdecl_terminate_void] . mov esp, dword [ebp - var] . mov dword [var], var . call var . ret var . int . int . int . int
call var . jmp var . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_void___cdecl_operator_delete_void] . int . int . int . int . int . cmp ecx, dword [var] . jne var . ret 0 . jmp loc.010145b7 . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_memset] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_void_____cdecl_operator_new_unsigned_int] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll__purecall] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_memcpy] . int . int . int . int . int . mov edi, edi . push ebp . mov ebp, esp . mov eax, dword [ebp + 8] . mov eax, dword [eax] . cmp dword [eax], var . jne var . cmp dword [eax + var], 3 . jne var . mov eax, dword [eax + var] . cmp eax, var . je var . cmp eax, var . je var
call var . jmp var . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_void___cdecl_operator_delete_void] . int . int . int . int . int . cmp ecx, dword [var] . jne var . ret 0 . jmp loc.01004ca4 . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_memset] . int . int . int . int . int . int . int . int . int . int . int . int . int . int . push ecx . lea ecx, [var] . sub ecx, eax . sbb eax, eax . not eax . and ecx, eax . mov eax, esp . and eax, var . cmp ecx, eax . jb var . mov eax, ecx . pop ecx . xchg eax, esp . mov eax, dword [eax] . mov dword [esp], eax . ret . sub eax, var . test dword [eax], eax . jmp var . int . int . int . int . int . push var . push dword fs:[0]
call var . jmp var . int . int . int . int . int . cmp ecx, dword [var] . jne var . ret 0 . jmp loc.01017c85 . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll__CxxThrowException] . int . int . int . int . int . mov edi, edi . push ebp . mov ebp, esp . push esi . mov esi, ecx . call dword [sym.imp.msvcrt.dll_public_virtual:_void___thiscall_type_info::_destructor_void] . test byte [ebp + 8], 1 . je var . push esi . call var . pop ecx . mov eax, esi . pop esi . pop ebp . ret 4 . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll___CxxFrameHandler3] . int . int . int . int . int . push eax . push dword fs:[0] . lea eax, [var] . sub esp, dword [var] . push ebx . push esi . push edi . mov dword [eax], ebp . mov ebp, eax . mov eax, dword [var] . xor eax, ebp . push eax . push dword [ebp - 4] . mov dword [ebp - 4], var . lea eax, [ebp - var]
call var . jmp var . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_void___cdecl_operator_delete_void] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_void___cdecl_operator_delete___void] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_memcpy_s] . int . int . int . int . int . int . push var . push dword fs:[0] . mov eax, dword [var] . mov dword [var], ebp . lea ebp, [var] . sub esp, eax . push ebx . push esi . push edi . mov eax, dword [var] . xor dword [ebp - 4], eax . xor eax, ebp . push eax . mov dword [ebp - var], esp . push dword [ebp - 8] . mov eax, dword [ebp - 4] . mov dword [ebp - 4], var . mov dword [ebp - 8], eax . lea eax, [ebp - var] . mov dword fs:[0], eax . ret . mov ecx, dword [var] . mov dword fs:[0], ecx . pop ecx . pop edi . pop edi . pop esi . pop ebx . mov esp, ebp . pop ebp . push ecx . ret . int . int . int . int
call var . jmp var . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_void___cdecl_operator_delete_void] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_void___cdecl_operator_delete___void] . int . int . int . int . int . push var . push var . call var . and dword [var], 0 . dec dword [var] . js var . mov ecx, dword [var] . sub ecx, dword [var] . mov dword [var], ecx . call dword [var] . jmp var . mov eax, dword [ebp - var] . mov dword [ebp - var], eax . mov eax, dword [ebp - var] . mov eax, dword [eax] . mov dword [ebp - var], eax . mov eax, dword [ebp - var] . cmp dword [eax], var . je var . mov dword [ebp - var], 0 . mov eax, dword [ebp - var] . ret . call dword [sym.imp.msvcrt.dll_void___cdecl_terminate_void] . mov esp, dword [ebp - var] . mov dword [var], var . call var . ret var . int . int . int . int . int . push var . push var . call var . and dword [var], 0 . mov esi, dword [var] . mov eax, esi . imul eax, dword [var] . add dword [var], eax . and dword [var], 0 . dec dword [var] . js var
call var . jmp var . int . int . int . int . int . push var . push var . call var . and dword [var], 0 . dec dword [var] . js var . mov ecx, dword [var] . sub ecx, dword [var] . mov dword [var], ecx . call dword [var] . jmp var . mov eax, dword [ebp - var] . mov dword [ebp - var], eax . mov eax, dword [ebp - var] . mov eax, dword [eax] . mov dword [ebp - var], eax . mov eax, dword [ebp - var] . cmp dword [eax], var . je var . mov dword [ebp - var], 0 . mov eax, dword [ebp - var] . ret . call dword [sym.imp.msvcrt.dll_void___cdecl_terminate_void] . mov esp, dword [ebp - var] . mov dword [var], var . call var . ret var . int . int . int . int . int . push var . push var . call var . and dword [var], 0 . mov esi, dword [var] . mov eax, esi . imul eax, dword [var] . add dword [var], eax . and dword [var], 0 . dec dword [var] . js var . sub dword [var], esi . mov ecx, dword [var] . call dword [var] . jmp var . mov dword [var], 1 . mov dword [var], var . call var . call var . ret var . cmp dword [var], 0 . jne var . push dword [var] . push dword [var] . push dword [var]
call var . jmp var . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_memset] . int . int . int . int . int . cmp ecx, dword [var] . jne var . ret 0 . jmp loc.01007b17 . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_memcpy] . int . int . int . int . int . mov edi, edi . push ebp . mov ebp, esp . mov eax, dword [ebp + 8] . mov eax, dword [eax] . cmp dword [eax], var . jne var . cmp dword [eax + var], 3 . jne var . mov eax, dword [eax + var] . cmp eax, var . je var . cmp eax, var . je var . cmp eax, var . je var . cmp eax, var . jne var . call dword [sym.imp.msvcrt.dll_void___cdecl_terminate_void] . xor eax, eax . pop ebp . ret 4 . int . int . int . int . int . push var . call dword [sym.imp.KERNEL32.dll_SetUnhandledExceptionFilter] . xor eax, eax . ret . int . int . int . int . int
call var . jmp var . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_public:_void___thiscall_exception::constructor_char_const___const_const] . int . int . int . int . int . mov edi, edi . push ebp . mov ebp, esp . push esi . mov esi, ecx . call dword [sym.imp.msvcrt.dll_public_virtual:_void___thiscall_type_info::_destructor_void] . test byte [ebp + 8], 1 . je var . push esi . call var . pop ecx . mov eax, esi . pop esi . pop ebp . ret 4 . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_public_virtual:_char_const_____thiscall_exception::what_void_const] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_public_virtual:_void___thiscall_exception::_destructor_void] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_public:_void___thiscall_exception::constructor_class_exception_const] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_memcpy_s] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_memmove_s] . int . int
call var . jmp var . int . int . int . int . int . cmp ecx, dword [var] . jne var . ret 0 . jmp loc.0100264d . int . int . int . int . int . int . push var . push dword fs:[0] . mov eax, dword [var] . mov dword [var], ebp . lea ebp, [var] . sub esp, eax . push ebx . push esi . push edi . mov eax, dword [var] . xor dword [ebp - 4], eax . xor eax, ebp . mov dword [ebp - var], eax . push eax . mov dword [ebp - var], esp . push dword [ebp - 8] . mov eax, dword [ebp - 4] . mov dword [ebp - 4], var . mov dword [ebp - 8], eax . lea eax, [ebp - var] . mov dword fs:[0], eax . ret . mov ecx, dword [var] . xor ecx, ebp . call var . jmp var . int . int . int . int . int . mov edi, edi . push ebp . mov ebp, esp . push dword [ebp + var] . push dword [ebp + var] . push dword [ebp + var] . push dword [ebp + 8] . push var . push var . call sub.msvcrt.dll__except_handler4_common . add esp, var . pop ebp . ret . int . int . int
call var . jmp var . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_void___cdecl_operator_delete___void] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_memset] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_memcpy] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_void___cdecl_operator_delete_void] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll___CxxFrameHandler3] . int . int . int . int . int . cmp ecx, dword [var] . jne var . ret 0 . jmp loc.0100887c . int . int . int . int . int . push eax . push dword fs:[0] . lea eax, [var] . sub esp, dword [var] . push ebx . push esi . push edi . mov dword [eax], ebp . mov ebp, eax . mov eax, dword [var] . xor eax, ebp . push eax . push dword [ebp - 4] . mov dword [ebp - 4], var
call var . jmp var . int . jmp dword [sym.imp.MSVCR110.dll_free] . int . int . push ecx . lea ecx, [esp + 4] . sub ecx, eax . sbb eax, eax . not eax . and ecx, eax . mov eax, esp . and eax, var . cmp ecx, eax . jb var . mov eax, ecx . pop ecx . xchg eax, esp . mov eax, dword [eax] . mov dword [esp], eax . ret . sub eax, var . test dword [eax], eax . jmp var . int . jmp dword [sym.imp.MSVCR110.dll__lock] . jmp dword [sym.imp.MSVCR110.dll__unlock] . jmp dword [sym.imp.MSVCR110.dll___dllonexit] . int . int . push var . push dword fs:[0] . mov eax, dword [var] . mov dword [var], ebp . lea ebp, [var] . sub esp, eax . push ebx . push esi . push edi . mov eax, dword [var] . xor dword [ebp - 4], eax . xor eax, ebp . push eax . mov dword [ebp - var], esp . push dword [ebp - 8] . mov eax, dword [ebp - 4] . mov dword [ebp - 4], var . mov dword [ebp - 8], eax . lea eax, [ebp - var] . mov dword fs:[0], eax . ret . mov ecx, dword [var] . mov dword fs:[0], ecx . pop ecx . pop edi . pop edi . pop esi . pop ebx . mov esp, ebp . pop ebp . push ecx . ret . push ebp
call var . jmp var . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_public:_void___thiscall_exception::constructor_char_const___const_const] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_public_virtual:_char_const_____thiscall_exception::what_void_const] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_public_virtual:_void___thiscall_exception::_destructor_void] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_public:_void___thiscall_exception::constructor_class_exception_const] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_memmove_s] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_memcpy_s] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll__wcsicmp] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll__CxxThrowException] . int . int . int . int . int . mov edi, edi
call var . jmp var . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_fgetwc] . int . int . int . int . int . cmp ecx, dword [var] . jne var . ret 0 . jmp loc.0103ffc8 . int . int . int . int . int . mov eax, dword [var] . mov ecx, dword [var] . or ecx, eax . mov ecx, dword [var] . jne var . mov eax, dword [var] . mul ecx . ret var . push ebx . mul ecx . mov ebx, eax . mov eax, dword [var] . mul dword [var] . add ebx, eax . mov eax, dword [var] . mul ecx . add edx, ebx . pop ebx . ret var . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_memset] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_memcpy] . int . int . int . int . int . int . int . int . int
0000:95e0 8be8 mov bp, ax . 0000:95e2 8cc0 mov ax, es . 0000:95e4 051000 add ax, var . 0000:95e7 0e push cs . 0000:95e8 1f pop ds . 0000:95e9 a30400 mov word [4], ax . 0000:95ec 03060c00 add ax, word [var] . 0000:95f0 8ec0 mov es, ax . 0000:95f2 8b0e0600 mov cx, word [6] . 0000:95f6 8bf9 mov di, cx . 0000:95f8 4f dec di . 0000:95f9 8bf7 mov si, di . 0000:95fb fd std . 0000:95fc f3a4 rep movsb byte es:[di], byte ptr [si] . 0000:95fe 50 push ax . 0000:95ff b83400 mov ax, var . 0000:9602 50 push ax . 0000:9603 cb retf . 0000:9604 8cc3 mov bx, es . 0000:9606 8cd8 mov ax, ds . 0000:9608 48 dec ax . 0000:9609 8ed8 mov ds, ax . 0000:960b 8ec0 mov es, ax . 0000:960d bf0f00 mov di, var . 0000:9610 b91000 mov cx, var . 0000:9613 ~ b0ff mov al, var . 0000:9614 fff3 push bx . 0000:9616 ae scasb al, byte es:[di] . 0000:9617 47 inc di . 0000:9618 8bf7 mov si, di . 0000:961a 8bc3 mov ax, bx . 0000:961c 48 dec ax . 0000:961d 8ec0 mov es, ax . 0000:961f bf0f00 mov di, var . 0000:9622 b104 mov cl, 4 . 0000:9624 8bc6 mov ax, si . 0000:9626 ~ f7d0 not ax . 0000:9627 d0d3 rcl bl, 1 . 0000:9629 ~ e88cda call var . 0000:962a 8cda mov dx, ds . 0000:962c 2bd0 sub dx, ax . 0000:962e 7304 jae var . 0000:9630 8cd8 mov ax, ds . 0000:9632 2bd2 sub dx, dx . 0000:9634 d3e0 shl ax, cl . 0000:9636 03f0 add si, ax . 0000:9638 8eda mov ds, dx . 0000:963a 8bc7 mov ax, di . 0000:963c f7d0 not ax . 0000:963e d3e8 shr ax, cl . 0000:9640 8cc2 mov dx, es . 0000:9642 2bd0 sub dx, ax . 0000:9644 7304 jae var . 0000:9646 8cc0 mov ax, es . 0000:9648 2bd2 sub dx, dx . 0000:964a d3e0 shl ax, cl . 0000:964c 03f8 add di, ax . 0000:964e 8ec2 mov es, dx . 0000:9650 ac lodsb al, byte [si] . 0000:9651 8ad0 mov dl, al . 0000:9653 4e dec si . 0000:9654 ad lodsw ax, word [si] . 0000:9655 8bc8 mov cx, ax . 0000:9657 46 inc si
call var . jmp var . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_public:_void___thiscall_exception::constructor_void] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_public_virtual:_char_const_____thiscall_exception::what_void_const] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_public_virtual:_void___thiscall_exception::_destructor_void] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_public:_void___thiscall_exception::constructor_class_exception_const] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_free] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll__CxxThrowException] . int . int . int . int . int . mov edi, edi . push ebp . mov ebp, esp . push esi . mov esi, ecx . call dword [sym.imp.msvcrt.dll_public_virtual:_void___thiscall_type_info::_destructor_void] . test byte [ebp + 8], 1 . je var . push esi . call var . pop ecx . mov eax, esi . pop esi . pop ebp . ret 4 . int
call var . jmp var . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_void___cdecl_operator_delete_void] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_memset] . int . int . int . int . int . cmp ecx, dword [var] . jne var . ret 0 . jmp loc.01014e0c . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_void_____cdecl_operator_new_unsigned_int] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll__purecall] . int . int . int . int . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll__ftol2_sse] . int . int . int . int . int . int . int . int . int . int . int . int . int . int . int
call var . jmp var . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_swprintf_s] . int . int . int . int . int . cmp ecx, dword [var] . jne var . ret 0 . jmp loc.01004157 . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_memcpy] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_wcscpy_s] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_vswprintf_s] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_wcscat_s] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_memset] . int . int . int . int . int . mov edi, edi . push ebp . mov ebp, esp . mov eax, dword [ebp + 8] . mov eax, dword [eax] . cmp dword [eax], var . jne var . cmp dword [eax + var], 3
jmp dword [sym.imp.mscoree.dll__CorExeMain] . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al
call var . jmp var . int . int . int . int . int . cmp ecx, dword [var] . jne var . ret 0 . jmp loc.01024bd7 . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_memcpy] . int . int . int . int . int . int . int . int . int . int . int . int . int . int . int . int . mov eax, dword [var] . mov ecx, dword [var] . or ecx, eax . mov ecx, dword [var] . jne var . mov eax, dword [var] . mul ecx . ret var . push ebx . mul ecx . mov ebx, eax . mov eax, dword [var] . mul dword [var] . add ebx, eax . mov eax, dword [var] . mul ecx . add edx, ebx . pop ebx . ret var . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_memset] . int . int . int . int . int
call var . jmp var . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_memset] . int . int . int . int . int . int . push var . push dword fs:[0] . mov eax, dword [var] . mov dword [var], ebp . lea ebp, [var] . sub esp, eax . push ebx . push esi . push edi . mov eax, dword [var] . xor dword [ebp - 4], eax . xor eax, ebp . mov dword [ebp - var], eax . push eax . mov dword [ebp - var], esp . push dword [ebp - 8] . mov eax, dword [ebp - 4] . mov dword [ebp - 4], var . mov dword [ebp - 8], eax . lea eax, [ebp - var] . mov dword fs:[0], eax . ret . mov ecx, dword [var] . xor ecx, ebp . call var . jmp var . int . int . int . int . int . mov edi, edi . push ebp . mov ebp, esp . push dword [ebp + var] . push dword [ebp + var] . push dword [ebp + var] . push dword [ebp + 8] . push var . push var . call sub.msvcrt.dll__except_handler4_common . add esp, var . pop ebp . ret . int . int . int . int . int . int
call var . jmp var . int . int . int . int . int . push var . push var . call var . and dword [var], 0 . dec dword [var] . js var . mov ecx, dword [var] . sub ecx, dword [var] . mov dword [var], ecx . call dword [var] . jmp var . mov eax, dword [ebp - var] . mov dword [ebp - var], eax . mov eax, dword [ebp - var] . mov eax, dword [eax] . mov dword [ebp - var], eax . mov eax, dword [ebp - var] . cmp dword [eax], var . je var . mov dword [ebp - var], 0 . mov eax, dword [ebp - var] . ret . call dword [sym.imp.msvcrt.dll_void___cdecl_terminate_void] . mov esp, dword [ebp - var] . mov dword [var], var . call var . ret var . int . int . int . int . int . push var . push var . call var . and dword [var], 0 . mov esi, dword [var] . mov eax, esi . imul eax, dword [var] . add dword [var], eax . and dword [var], 0 . dec dword [var] . js var . sub dword [var], esi . mov ecx, dword [var] . call dword [var] . jmp var . mov dword [var], 1 . mov dword [var], var . call var . call var . ret var . cmp dword [var], 0 . jne var . push dword [var] . push dword [var] . push dword [var]
call var . jmp var . mov edi, edi . push ebp . mov ebp, esp . pop ebp . jmp var . mov edi, edi . push ebp . mov ebp, esp . push ecx . push ebx . push esi . mov esi, dword [sym.imp.KERNEL32.dll_DecodePointer] . push edi . push dword [var] . call esi . push dword [var] . mov ebx, eax . mov dword [var], ebx . call esi . mov esi, eax . cmp esi, ebx . jb var . mov edi, esi . sub edi, ebx . lea eax, [edi + 4] . cmp eax, 4 . jb var . push ebx . call var . mov ebx, eax . lea eax, [edi + 4] . pop ecx . cmp ebx, eax . jae var . mov eax, var . cmp ebx, eax . jae var . mov eax, ebx . add eax, ebx . cmp eax, ebx . jb var . push eax . push dword [var] . call var . pop ecx . pop ecx . test eax, eax . jne var . lea eax, [ebx + var] . cmp eax, ebx . jb var . push eax . push dword [var] . call var . pop ecx . pop ecx . test eax, eax . je var . sar edi, 2 . push eax . lea esi, [eax + edi*4] . call dword [sym.imp.KERNEL32.dll_EncodePointer]
call var . jmp var . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll__wcsicmp] . int . int . int . int . int . cmp ecx, dword [section..data] . jne var . ret 0 . jmp loc.010068a7 . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_memset] . int . int . int . int . int . mov edi, edi . push ebp . mov ebp, esp . mov eax, dword [ebp + 8] . mov eax, dword [eax] . cmp dword [eax], var . jne var . cmp dword [eax + var], 3 . jne var . mov eax, dword [eax + var] . cmp eax, var . je var . cmp eax, var . je var . cmp eax, var . je var . cmp eax, var . jne var . call dword [sym.imp.msvcrt.dll_void___cdecl_terminate_void] . xor eax, eax . pop ebp . ret 4 . int . int . int . int . int . push var . call dword [sym.imp.KERNEL32.dll_SetUnhandledExceptionFilter] . xor eax, eax . ret . int . int . int . int
call var . jmp var . int . int . int . int . int . cmp ecx, dword [var] . jne var . ret 0 . jmp loc.01003ea7 . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_vswprintf_s] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_fgetwc] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_wcscpy_s] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_wcscat_s] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_wcsncpy_s] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_sprintf_s] . int . int . int . int . int . mov edi, edi . push ebp . mov ebp, esp . mov eax, dword [ebp + 8] . mov eax, dword [eax] . cmp dword [eax], var . jne var
call var . jmp var . int . int . int . int . int . cmp ecx, dword [var] . jne var . ret 0 . jmp loc.01004837 . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_wcscpy_s] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_memset] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_swprintf_s] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_memcpy] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_vswprintf_s] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_wcscat_s] . int . int . int . int . int . mov edi, edi . push ebp . mov ebp, esp . mov eax, dword [ebp + 8] . mov eax, dword [eax] . cmp dword [eax], var
call var . jmp var . int . int . int . int . int . push var . push var . call var . and dword [var], 0 . dec dword [var] . js var . mov ecx, dword [var] . sub ecx, dword [var] . mov dword [var], ecx . call dword [var] . jmp var . mov eax, dword [ebp - var] . mov dword [ebp - var], eax . mov eax, dword [ebp - var] . mov eax, dword [eax] . mov dword [ebp - var], eax . mov eax, dword [ebp - var] . cmp dword [eax], var . je var . mov dword [ebp - var], 0 . mov eax, dword [ebp - var] . ret . call dword [sym.imp.msvcrt.dll_void___cdecl_terminate_void] . mov esp, dword [ebp - var] . mov dword [var], var . call var . ret var . int . int . int . int . int . push var . push var . call var . and dword [var], 0 . mov esi, dword [var] . mov eax, esi . imul eax, dword [var] . add dword [var], eax . and dword [var], 0 . dec dword [var] . js var . sub dword [var], esi . mov ecx, dword [var] . call dword [var] . jmp var . mov dword [var], 1 . mov dword [var], var . call var . call var . ret var . cmp dword [var], 0 . jne var . push dword [var] . push dword [var] . push dword [var]
call var . jmp var . int . int . int . int . int . cmp ecx, dword [section..data] . jne var . ret 0 . jmp loc.01007d27 . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_memcpy] . int . int . int . int . int . mov edi, edi . push ebp . mov ebp, esp . mov eax, dword [ebp + 8] . mov eax, dword [eax] . cmp dword [eax], var . jne var . cmp dword [eax + var], 3 . jne var . mov eax, dword [eax + var] . cmp eax, var . je var . cmp eax, var . je var . cmp eax, var . je var . cmp eax, var . jne var . call dword [sym.imp.msvcrt.dll_void___cdecl_terminate_void] . xor eax, eax . pop ebp . ret 4 . int . int . int . int . int . push var . call dword [sym.imp.KERNEL32.dll_SetUnhandledExceptionFilter] . xor eax, eax . ret . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll__XcptFilter] . int . int . int . int
jmp dword [sym.imp.mscoree.dll__CorExeMain] . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al
call var . jmp var . int . int . int . int . int . int . int . int . int . int . int . int . int . int . mov ecx, dword [var] . test ecx, 3 . je var . mov al, byte [ecx] . add ecx, 1 . test al, al . je var . test ecx, 3 . jne var . add eax, 0 . lea esp, [esp] . lea esp, [esp] . mov eax, dword [ecx] . mov edx, var . add edx, eax . xor eax, var . xor eax, edx . add ecx, 4 . test eax, var . je var . mov eax, dword [ecx - 4] . test al, al . je var . test ah, ah . je var . test eax, var . je var . test eax, var . je var . jmp var . lea eax, [ecx - 1] . mov ecx, dword [var] . sub eax, ecx . ret . lea eax, [ecx - 2] . mov ecx, dword [var] . sub eax, ecx . ret . lea eax, [ecx - 3] . mov ecx, dword [var] . sub eax, ecx . ret . lea eax, [ecx - 4] . mov ecx, dword [var] . sub eax, ecx . ret . int . int
call var . jmp var . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_memset] . int . int . int . int . int . cmp ecx, dword [section..data] . jne var . ret 0 . jmp loc.01001f78 . int . int . int . int . int . mov edi, edi . push ebp . mov ebp, esp . mov eax, dword [ebp + 8] . mov eax, dword [eax] . cmp dword [eax], var . jne var . cmp dword [eax + var], 3 . jne var . mov eax, dword [eax + var] . cmp eax, var . je var . cmp eax, var . je var . cmp eax, var . je var . cmp eax, var . jne var . call dword [sym.imp.msvcrt.dll_void___cdecl_terminate_void] . xor eax, eax . pop ebp . ret 4 . int . int . int . int . int . push var . call dword [sym.imp.KERNEL32.dll_SetUnhandledExceptionFilter] . xor eax, eax . ret . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll__XcptFilter] . int . int . int . int
call var . jmp var . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_strcpy_s] . int . int . int . int . int . cmp ecx, dword [var] . jne var . ret 0 . jmp loc.0100d057 . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_memset] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_strncpy_s] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_strcat_s] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_sprintf_s] . int . int . int . int . int . int . int . int . int . int . int . int . int . int . int . int . int . int . push ecx . lea ecx, [var]
jmp dword [sym.imp.mscoree.dll__CorExeMain] . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al
call var . push var . push var . call var . xor ebx, ebx . mov dword [var], ebx . mov dword [var], ebx . lea eax, [lpStartupInfo] . push eax . call dword [sym.imp.KERNEL32.dll_GetStartupInfoW] . mov dword [var], var . mov dword [var], 1 . mov eax, dword fs:[var] . mov esi, dword [eax + 4] . mov dword [var], ebx . mov edi, var . push ebx . push esi . push edi . call dword [sym.imp.KERNEL32.dll_InterlockedCompareExchange] . cmp eax, ebx . jne var . xor esi, esi . inc esi . mov eax, dword [var] . cmp eax, esi . je var . mov eax, dword [var] . test eax, eax . jne var . mov dword [var], esi . push var . push var . call var . pop ecx . pop ecx . test eax, eax . jne var . mov eax, dword [var] . cmp eax, esi . jne var . push var . push var . call sub.msvcrt.dll__initterm . pop ecx . pop ecx . mov dword [var], 2 . cmp dword [var], ebx . jne var . push ebx . push edi . call dword [sym.imp.KERNEL32.dll_InterlockedExchange] . cmp dword [var], ebx . jne var . mov eax, dword [sym.imp.msvcrt.dll__wcmdln] . cmp dword [eax], ebx . je var . mov eax, dword [eax] . mov dword [var], eax . movzx ecx, word [eax] . cmp cx, var . jbe var . cmp cx, var . je var
call var . jmp var . int . int . int . int . int . cmp ecx, dword [var] . jne var . ret 0 . jmp loc.01006bc5 . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_memset] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_void___cdecl_operator_delete_void] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_void_____cdecl_operator_new_unsigned_int] . int . int . int . int . int . int . int . int . int . int . int . int . int . int . int . int . int . int . push ecx . lea ecx, [var] . sub ecx, eax . sbb eax, eax . not eax . and ecx, eax . mov eax, esp . and eax, var . cmp ecx, eax . jb var . mov eax, ecx . pop ecx . xchg eax, esp . mov eax, dword [eax] . mov dword [esp], eax
push ebp . mov ebp, esp . sub esp, var . push ebx . push esi . push edi . lea edi, [var] . mov ecx, var . mov eax, var . rep stosd dword es:[edi], eax . mov eax, dword [var] . xor eax, ebp . mov dword [var], eax . mov esi, esp . push var . lea eax, [lpFilename] . push eax . push 0 . call dword [sym.imp.KERNEL32.dll_GetModuleFileNameW] . cmp esi, esp . call var . test eax, eax . je var . lea eax, [lpFilename] . push eax . call var . pop ecx . xor eax, eax . push edx . mov ecx, ebp . push eax . lea edx, [var] . call var . pop eax . pop edx . pop edi . pop esi . pop ebx . mov ecx, dword [var] . xor ecx, ebp . call var . add esp, var . cmp ebp, esp . call var . mov esp, ebp . pop ebp . ret . nop . add dword [eax], eax . add byte [eax], al . aad var . inc eax . add al, dh . std . invalid . dec dword [eax] . add al, byte [eax] . add cl, ah . adc al, var . add byte [ebp + var], ah . arpl word gs:[eax + var], dx . je var . 00558b add byte [ebp - var], dl . push ebp
jmp dword [sym.imp.mscoree.dll__CorExeMain] . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al
call var . jmp var . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_memset] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll___CxxFrameHandler3] . int . int . int . int . int . cmp ecx, dword [var] . jne var . ret 0 . jmp loc.01002ad7 . int . int . int . int . int . push eax . push dword fs:[0] . lea eax, [var] . sub esp, dword [var] . push ebx . push esi . push edi . mov dword [eax], ebp . mov ebp, eax . mov eax, dword [var] . xor eax, ebp . push eax . push dword [ebp - 4] . mov dword [ebp - 4], var . lea eax, [ebp - var] . mov dword fs:[0], eax . ret . int . int . int . int . int . mov ecx, dword [var] . mov dword fs:[0], ecx . pop ecx . pop edi . pop edi . pop esi . pop ebx . mov esp, ebp . pop ebp . push ecx . ret . int . int
call var . jmp var . int . int . int . int . int . mov edi, edi . push ebp . mov ebp, esp . push esi . mov esi, ecx . call dword [sym.imp.msvcrt.dll_public_virtual:_void___thiscall_type_info::_destructor_void] . test byte [ebp + 8], 1 . je var . push esi . call var . pop ecx . mov eax, esi . pop esi . pop ebp . ret 4 . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll___CxxFrameHandler3] . int . int . int . int . int . cmp ecx, dword [var] . jne var . ret 0 . jmp loc.010ab367 . int . int . int . int . int . push eax . push dword fs:[0] . lea eax, [var] . sub esp, dword [var] . push ebx . push esi . push edi . mov dword [eax], ebp . mov ebp, eax . mov eax, dword [var] . xor eax, ebp . push eax . push dword [ebp - 4] . mov dword [ebp - 4], var . lea eax, [ebp - var] . mov dword fs:[0], eax . ret . int . int . int . int . int
call var . jmp var . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_void___cdecl_operator_delete_void] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_void___cdecl_operator_delete___void] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_memcpy_s] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_free] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_wcsncpy_s] . int . int . int . int . int . int . push var . push dword fs:[0] . mov eax, dword [var] . mov dword [var], ebp . lea ebp, [var] . sub esp, eax . push ebx . push esi . push edi . mov eax, dword [var] . xor dword [ebp - 4], eax . xor eax, ebp . push eax . mov dword [ebp - var], esp . push dword [ebp - 8] . mov eax, dword [ebp - 4] . mov dword [ebp - 4], var . mov dword [ebp - 8], eax . lea eax, [ebp - var] . mov dword fs:[0], eax . ret . mov ecx, dword [var]
call var . jmp var . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_void___cdecl_operator_delete_void] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_void_____cdecl_operator_new_unsigned_int] . int . int . int . int . int . mov edi, edi . push ebp . mov ebp, esp . mov eax, dword [ebp + 8] . mov eax, dword [eax] . cmp dword [eax], var . jne var . cmp dword [eax + var], 3 . jne var . mov eax, dword [eax + var] . cmp eax, var . je var . cmp eax, var . je var . cmp eax, var . je var . cmp eax, var . jne var . call dword [sym.imp.msvcrt.dll_void___cdecl_terminate_void] . xor eax, eax . pop ebp . ret 4 . int . int . int . int . int . push var . call dword [sym.imp.KERNEL32.dll_SetUnhandledExceptionFilter] . xor eax, eax . ret . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll__XcptFilter] . int . int . int . int . int . int . mov edi, edi
call var . jmp var . int . int . int . int . int . mov edi, edi . push ebp . mov ebp, esp . mov eax, dword [ebp + 8] . mov eax, dword [eax] . cmp dword [eax], var . jne var . cmp dword [eax + var], 3 . jne var . mov eax, dword [eax + var] . cmp eax, var . je var . cmp eax, var . je var . cmp eax, var . je var . cmp eax, var . jne var . call dword [sym.imp.msvcrt.dll_void___cdecl_terminate_void] . xor eax, eax . pop ebp . ret 4 . int . int . int . int . int . push var . call dword [sym.imp.KERNEL32.dll_SetUnhandledExceptionFilter] . xor eax, eax . ret . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll__XcptFilter] . int . int . int . int . int . int . int . int . int . int . int . int . int . int . int . int . int . int . int . int
call var . jmp var . int . int . int . int . int . cmp ecx, dword [section..data] . jne var . ret 0 . jmp loc.01006787 . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_memset] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_memcpy] . int . int . int . int . int . mov edi, edi . push ebp . mov ebp, esp . mov eax, dword [ebp + 8] . mov eax, dword [eax] . cmp dword [eax], var . jne var . cmp dword [eax + var], 3 . jne var . mov eax, dword [eax + var] . cmp eax, var . je var . cmp eax, var . je var . cmp eax, var . je var . cmp eax, var . jne var . call dword [sym.imp.msvcrt.dll_void___cdecl_terminate_void] . xor eax, eax . pop ebp . ret 4 . int . int . int . int . int . push var . call dword [sym.imp.KERNEL32.dll_SetUnhandledExceptionFilter] . xor eax, eax . ret . int . int . int . int
jmp dword [sym.imp.mscoree.dll__CorExeMain] . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al
call var . jmp var . int . int . int . int . int . push var . push var . call var . and dword [var], 0 . mov esi, dword [var] . cmp esi, dword [var] . ja var . push 4 . call var . pop ecx . and dword [var], 0 . push esi . call var . pop ecx . mov dword [var], eax . mov dword [var], var . call var . mov eax, dword [var] . call var . ret . push 4 . call var . pop ecx . ret . int . int . int . int . int . mov edi, edi . push ebp . mov ebp, esp . push esi . mov esi, dword [var] . cmp esi, var . ja var . push ebx . push edi . mov edi, dword [sym.imp.KERNEL32.dll_HeapAlloc] . cmp dword [var], 0 . jne var . call var . push var . call var . push var . call var . pop ecx . pop ecx . mov eax, dword [var] . cmp eax, 1 . jne var . test esi, esi . je var . mov eax, esi . jmp var . xor eax, eax . inc eax
call var . jmp var . int . int . int . int . int . mov edi, edi . push ebp . mov ebp, esp . push esi . mov esi, dword [var] . push edi . xor edi, edi . cmp esi, edi . jne var . xor eax, eax . jmp var . cmp dword [var], edi . jne var . call var . push var . pop esi . mov dword [eax], esi . push edi . push edi . push edi . push edi . push edi . call var . add esp, var . mov eax, esi . jmp var . cmp dword [var], edi . je var . cmp dword [var], esi . jb var . push esi . push dword [var] . push dword [var] . call var . add esp, var . jmp var . push dword [var] . push edi . push dword [var] . call var . add esp, var . cmp dword [var], edi . je var . cmp dword [var], esi . jae var . call var . push var . pop ecx . mov dword [eax], ecx . mov esi, ecx . jmp var . push var . pop eax . pop edi . pop esi . pop ebp . ret
call var . jmp var . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_memset] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_void___cdecl_operator_delete_void] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll__snprintf_s] . int . int . int . int . int . cmp ecx, dword [var] . jne var . ret 0 . jmp loc.0100ddac . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_strcpy_s] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_memcpy] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll__snwprintf_s] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_void_____cdecl_operator_new_unsigned_int] . int . int . int . int . int . int
call var . jmp var . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_memset] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_memcpy] . int . int . int . int . int . cmp ecx, dword [var] . jne var . ret 0 . jmp loc.010753cf . int . int . int . int . int . int . int . int . int . int . int . int . int . int . int . int . int . int . int . int . int . int . int . int . int . int . int . mov eax, dword [var] . mov ecx, dword [var] . or ecx, eax . mov ecx, dword [var] . jne var . mov eax, dword [var] . mul ecx . ret var . push ebx . mul ecx . mov ebx, eax . mov eax, dword [var] . mul dword [var]
call var . jmp var . push ebp . mov ebp, esp . sub esp, var . xor eax, eax . push ebx . mov ebx, var . cmp dword [var], eax . je var . cmp dword [var], ebx . jne var . push esi . push eax . push eax . push 1 . call dword [sym.imp.KERNEL32.dll_GetProcessHeap] . push eax . call dword [sym.imp.KERNEL32.dll_HeapSetInformation] . lea eax, [ebp - var] . push eax . call dword [sym.imp.KERNEL32.dll_GetSystemTimeAsFileTime] . mov esi, dword [ebp - 8] . xor esi, dword [ebp - var] . call dword [sym.imp.KERNEL32.dll_GetCurrentProcessId] . xor esi, eax . call dword [sym.imp.KERNEL32.dll_GetCurrentThreadId] . xor esi, eax . call dword [sym.imp.KERNEL32.dll_GetTickCount] . xor esi, eax . lea eax, [ebp - var] . push eax . call dword [sym.imp.KERNEL32.dll_QueryPerformanceCounter] . mov eax, dword [ebp - var] . xor eax, dword [ebp - var] . xor esi, eax . lea eax, [ebp - 4] . push eax . push var . push 4 . push var . call dword [sym.imp.KERNEL32.dll_VirtualProtect] . mov dword [var], esi . test esi, esi . je var . lea eax, [ebp - 4] . push eax . push dword [ebp - 4] . mov esi, var . push 4 . push esi . call dword [sym.imp.KERNEL32.dll_VirtualProtect] . push 4 . push esi . call sub.KERNEL32.dll_WerRegisterMemoryBlock . mov eax, dword [var] . not eax . mov dword [var], eax . pop esi . pop ebx . leave . ret . jmp dword [sym.imp.KERNEL32.dll_WerRegisterMemoryBlock] . push var
call var . jmp var . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_void___cdecl_operator_delete_void] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_void___cdecl_operator_delete___void] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_void_____cdecl_operator_new___unsigned_int] . int . int . int . int . int . cmp ecx, dword [var] . jne var . ret 0 . jmp loc.01017614 . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_memset] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_free] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_memcpy_s] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_memmove_s] . int . int . int . int . int . int
jmp dword [sym.imp.mscoree.dll__CorExeMain] . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al
call var . jmp var . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_memset] . int . int . int . int . int . int . push var . push dword fs:[0] . mov eax, dword [var] . mov dword [var], ebp . lea ebp, [var] . sub esp, eax . push ebx . push esi . push edi . mov eax, dword [section..data] . xor dword [ebp - 4], eax . xor eax, ebp . push eax . mov dword [ebp - var], esp . push dword [ebp - 8] . mov eax, dword [ebp - 4] . mov dword [ebp - 4], var . mov dword [ebp - 8], eax . lea eax, [ebp - var] . mov dword fs:[0], eax . ret . mov ecx, dword [var] . mov dword fs:[0], ecx . pop ecx . pop edi . pop edi . pop esi . pop ebx . mov esp, ebp . pop ebp . push ecx . ret . int . int . int . int . int . mov edi, edi . push ebp . mov ebp, esp . push dword [ebp + var] . push dword [ebp + var] . push dword [ebp + var] . push dword [ebp + 8] . push var . push section..data . call sub.msvcrt.dll__except_handler4_common . add esp, var . pop ebp
call var . jmp var . int . int . int . int . int . push var . push var . call var . and dword [var], 0 . dec dword [var] . js var . mov ecx, dword [var] . sub ecx, dword [var] . mov dword [var], ecx . call dword [var] . jmp var . mov eax, dword [ebp - var] . mov dword [ebp - var], eax . mov eax, dword [ebp - var] . mov eax, dword [eax] . mov dword [ebp - var], eax . mov eax, dword [ebp - var] . cmp dword [eax], var . je var . mov dword [ebp - var], 0 . mov eax, dword [ebp - var] . ret . call dword [sym.imp.msvcrt.dll_void___cdecl_terminate_void] . mov esp, dword [ebp - var] . mov dword [var], var . call var . ret var . int . int . int . int . int . push var . push var . call var . and dword [var], 0 . mov esi, dword [var] . mov eax, esi . imul eax, dword [var] . add dword [var], eax . and dword [var], 0 . dec dword [var] . js var . sub dword [var], esi . mov ecx, dword [var] . call dword [var] . jmp var . mov dword [var], 1 . mov dword [var], var . call var . call var . ret var . cmp dword [var], 0 . jne var . push dword [var] . push dword [var] . push dword [var]
call var . jmp var . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_void___cdecl_operator_delete_void] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_memset] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll__wcsnicmp] . int . int . int . int . int . cmp ecx, dword [var] . jne var . ret 0 . jmp loc.0105550c . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll__wcsicmp] . int . int . int . int . int . int . int . int . int . int . int . int . int . int . int . int . int . int . int . push var . push var . call var . mov eax, dword [var] . mov dword [var], eax . cmp eax, var . jne var . push dword [var]
call var . jmp var . int . int . int . int . int . cmp ecx, dword [var] . jne var . ret 0 . jmp loc.01002f67 . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_memset] . int . int . int . int . int . mov edi, edi . push ebp . mov ebp, esp . mov eax, dword [ebp + 8] . mov eax, dword [eax] . cmp dword [eax], var . jne var . cmp dword [eax + var], 3 . jne var . mov eax, dword [eax + var] . cmp eax, var . je var . cmp eax, var . je var . cmp eax, var . je var . cmp eax, var . jne var . call dword [sym.imp.msvcrt.dll_void___cdecl_terminate_void] . xor eax, eax . pop ebp . ret 4 . int . int . int . int . int . push var . call dword [sym.imp.KERNEL32.dll_SetUnhandledExceptionFilter] . xor eax, eax . ret . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll__XcptFilter] . int . int . int . int
call var . jmp var . int . int . int . int . int . cmp ecx, dword [var] . jne var . ret 0 . jmp loc.010393fd . int . int . int . int . int . int . int . int . push var . push dword fs:[0] . mov eax, dword [var] . mov dword [var], ebp . lea ebp, [var] . sub esp, eax . push ebx . push esi . push edi . mov eax, dword [var] . xor dword [ebp - 4], eax . xor eax, ebp . mov dword [ebp - var], eax . push eax . mov dword [ebp - var], esp . push dword [ebp - 8] . mov eax, dword [ebp - 4] . mov dword [ebp - 4], var . mov dword [ebp - 8], eax . lea eax, [ebp - var] . mov dword fs:[0], eax . ret . mov ecx, dword [var] . xor ecx, ebp . call var . jmp var . int . int . int . int . int . mov edi, edi . push ebp . mov ebp, esp . push dword [ebp + var] . push dword [ebp + var] . push dword [ebp + var] . push dword [ebp + 8] . push var . push var . call var . add esp, var . pop ebp . ret . int
call var . jmp var . int . int . int . int . int . mov edi, edi . push ebp . mov ebp, esp . mov eax, dword [ebp + 8] . mov eax, dword [eax] . cmp dword [eax], var . jne var . cmp dword [eax + var], 3 . jne var . mov eax, dword [eax + var] . cmp eax, var . je var . cmp eax, var . je var . cmp eax, var . je var . cmp eax, var . jne var . call dword [sym.imp.msvcrt.dll_void___cdecl_terminate_void] . xor eax, eax . pop ebp . ret 4 . int . int . int . int . int . push var . call dword [sym.imp.KERNEL32.dll_SetUnhandledExceptionFilter] . xor eax, eax . ret . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll__XcptFilter] . int . int . int . int . int . int . int . int . mov edi, edi . push ebp . mov ebp, esp . mov ecx, dword [var] . mov eax, var . cmp word [ecx], ax . je var . xor eax, eax . pop ebp . ret . mov eax, dword [ecx + var]
call var . jmp var . int . int . int . int . int . push var . push var . call var . and dword [var], 0 . dec dword [var] . js var . mov ecx, dword [var] . sub ecx, dword [var] . mov dword [var], ecx . call dword [var] . jmp var . mov eax, dword [ebp - var] . mov dword [ebp - var], eax . mov eax, dword [ebp - var] . mov eax, dword [eax] . mov dword [ebp - var], eax . mov eax, dword [ebp - var] . cmp dword [eax], var . je var . mov dword [ebp - var], 0 . mov eax, dword [ebp - var] . ret . call dword [sym.imp.msvcrt.dll_void___cdecl_terminate_void] . mov esp, dword [ebp - var] . mov dword [var], var . call var . ret var . int . int . int . int . int . push var . push var . call var . and dword [var], 0 . mov esi, dword [var] . mov eax, esi . imul eax, dword [var] . add dword [var], eax . and dword [var], 0 . dec dword [var] . js var . sub dword [var], esi . mov ecx, dword [var] . call dword [var] . jmp var . mov dword [var], 1 . mov dword [var], var . call var . call var . ret var . cmp dword [var], 0 . jne var . push dword [var] . push dword [var] . push dword [var]
call var . jmp var . int . int . int . int . int . mov edi, edi . push ebp . mov ebp, esp . push esi . mov esi, ecx . call dword [sym.imp.msvcrt.dll_public_virtual:_void___thiscall_type_info::_destructor_void] . test byte [ebp + 8], 1 . je var . push esi . call sub.MFC42u.dll_operatordelete . pop ecx . mov eax, esi . pop esi . pop ebp . ret 4 . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll___CxxFrameHandler3] . int . int . int . int . int . cmp ecx, dword [var] . jne var . ret 0 . jmp loc.0101ddb7 . int . int . int . int . int . push eax . push dword fs:[0] . lea eax, [var] . sub esp, dword [var] . push ebx . push esi . push edi . mov dword [eax], ebp . mov ebp, eax . mov eax, dword [var] . xor eax, ebp . push eax . push dword [ebp - 4] . mov dword [ebp - 4], var . lea eax, [ebp - var] . mov dword fs:[0], eax . ret . int . int . int . int . int
call var . jmp var . int . int . int . int . int . mov edi, edi . push ebp . mov ebp, esp . mov eax, dword [ebp + 8] . mov eax, dword [eax] . cmp dword [eax], var . jne var . cmp dword [eax + var], 3 . jne var . mov eax, dword [eax + var] . cmp eax, var . je var . cmp eax, var . je var . cmp eax, var . je var . cmp eax, var . jne var . call dword [sym.imp.msvcrt.dll_void___cdecl_terminate_void] . xor eax, eax . pop ebp . ret 4 . int . int . int . int . int . push var . call dword [sym.imp.KERNEL32.dll_SetUnhandledExceptionFilter] . xor eax, eax . ret . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll__XcptFilter] . int . int . int . int . int . int . int . int . int . int . int . int . int . int . mov edi, edi . push ebp . mov ebp, esp . mov ecx, dword [var] . mov eax, var . cmp word [ecx], ax
call var . jmp var . int . int . int . int . int . mov edi, edi . push ebp . mov ebp, esp . mov eax, dword [ebp + 8] . mov eax, dword [eax] . cmp dword [eax], var . jne var . cmp dword [eax + var], 3 . jne var . mov eax, dword [eax + var] . cmp eax, var . je var . cmp eax, var . je var . cmp eax, var . je var . cmp eax, var . jne var . call dword [sym.imp.msvcrt.dll_void___cdecl_terminate_void] . xor eax, eax . pop ebp . ret 4 . int . int . int . int . int . push var . call dword [sym.imp.KERNEL32.dll_SetUnhandledExceptionFilter] . xor eax, eax . ret . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll__XcptFilter] . int . int . int . int . int . int . int . int . int . int . int . int . int . int . mov edi, edi . push ebp . mov ebp, esp . mov ecx, dword [var] . mov eax, var . cmp word [ecx], ax
call var . jmp var . int . int . int . int . int . mov edi, edi . push ebp . mov ebp, esp . mov eax, dword [ebp + 8] . mov eax, dword [eax] . cmp dword [eax], var . jne var . cmp dword [eax + var], 3 . jne var . mov eax, dword [eax + var] . cmp eax, var . je var . cmp eax, var . je var . cmp eax, var . je var . cmp eax, var . jne var . call dword [sym.imp.msvcrt.dll_void___cdecl_terminate_void] . xor eax, eax . pop ebp . ret 4 . int . int . int . int . int . push var . call dword [sym.imp.KERNEL32.dll_SetUnhandledExceptionFilter] . xor eax, eax . ret . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll__XcptFilter] . int . int . int . int . int . int . int . int . int . int . int . int . int . int . int . int . mov edi, edi . push ebp . mov ebp, esp
call var . jmp var . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll___2_YAPAXI_Z] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll___3_YAXPAX_Z] . int . int . int . int . int . cmp ecx, dword [var] . jne var . ret 0 . jmp loc.01002437 . int . int . int . int . int . mov edi, edi . push ebp . mov ebp, esp . sub esp, var . mov eax, dword [var] . xor eax, ebp . mov dword [var], eax . mov dword [var], eax . mov dword [var], ecx . mov dword [var], edx . mov dword [var], ebx . mov dword [var], esi . mov dword [var], edi . mov word [var], ss . mov word [var], cs . mov word [var], ds . mov word [var], es . mov word [var], fs . mov word [var], gs . pushfd . pop dword [var] . mov eax, dword [var] . mov dword [var], eax . lea eax, [var] . mov dword [var], var . mov dword [var], eax . mov eax, dword [eax - 4] . push var . mov dword [var], eax . call dword [sym.imp.KERNEL32.dll_OutputDebugStringA] . mov ecx, dword [var] . xor ecx, ebp . call var . leave . ret
call var . jmp var . int . int . int . int . int . cmp ecx, dword [var] . jne var . ret 0 . jmp loc.01003e37 . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_memset] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_strcat_s] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_strcpy_s] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_wcscpy_s] . int . int . int . int . int . mov edi, edi . push ebp . mov ebp, esp . mov eax, dword [ebp + 8] . mov eax, dword [eax] . cmp dword [eax], var . jne var . cmp dword [eax + var], 3 . jne var . mov eax, dword [eax + var] . cmp eax, var . je var . cmp eax, var . je var . cmp eax, var . je var . cmp eax, var . jne var . call dword [sym.imp.msvcrt.dll_void___cdecl_terminate_void] . xor eax, eax
call var . jmp var . int . int . int . int . int . cmp ecx, dword [var] . jne var . ret 0 . jmp loc.01005a9c . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_memset] . int . int . int . int . int . int . push var . push dword fs:[0] . mov eax, dword [var] . mov dword [var], ebp . lea ebp, [var] . sub esp, eax . push ebx . push esi . push edi . mov eax, dword [var] . xor dword [ebp - 4], eax . xor eax, ebp . push eax . mov dword [ebp - var], esp . push dword [ebp - 8] . mov eax, dword [ebp - 4] . mov dword [ebp - 4], var . mov dword [ebp - 8], eax . lea eax, [ebp - var] . mov dword fs:[0], eax . ret . mov ecx, dword [var] . mov dword fs:[0], ecx . pop ecx . pop edi . pop edi . pop esi . pop ebx . mov esp, ebp . pop ebp . push ecx . ret . int . int . int . int . int . mov edi, edi . push ebp . mov ebp, esp
call var . jmp var . int . int . int . int . int . cmp ecx, dword [var] . jne var . ret 0 . jmp loc.0100eac7 . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_memset] . int . int . int . int . int . int . int . int . int . int . int . int . int . int . int . int . int . int . int . int . push ecx . lea ecx, [var] . sub ecx, eax . sbb eax, eax . not eax . and ecx, eax . mov eax, esp . and eax, var . cmp ecx, eax . jb var . mov eax, ecx . pop ecx . xchg eax, esp . mov eax, dword [eax] . mov dword [esp], eax . ret . sub eax, var . test dword [eax], eax . jmp var . int . int . int . int . int . int . int
call var . jmp var . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll__vsnwprintf] . int . int . int . int . int . cmp ecx, dword [var] . jne var . ret 0 . jmp loc.0100b477 . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll__wcsicmp] . int . int . int . int . int . int . int . int . int . int . int . int . int . int . int . int . int . int . int . int . push ebx . push esi . mov eax, dword [var] . or eax, eax . jne var . mov ecx, dword [var] . mov eax, dword [var] . xor edx, edx . div ecx . mov ebx, eax . mov eax, dword [var] . div ecx . mov edx, ebx . jmp var . mov ecx, eax . mov ebx, dword [var] . mov edx, dword [var] . mov eax, dword [var] . shr ecx, 1 . rcr ebx, 1 . shr edx, 1
call var . jmp var . int . int . int . int . int . push var . push dword fs:[0] . mov eax, dword [var] . mov dword [var], ebp . lea ebp, [var] . sub esp, eax . push ebx . push esi . push edi . mov eax, dword [var] . xor dword [ebp - 4], eax . xor eax, ebp . push eax . mov dword [ebp - var], esp . push dword [ebp - 8] . mov eax, dword [ebp - 4] . mov dword [ebp - 4], var . mov dword [ebp - 8], eax . lea eax, [ebp - var] . mov dword fs:[0], eax . ret . mov ecx, dword [var] . mov dword fs:[0], ecx . pop ecx . pop edi . pop edi . pop esi . pop ebx . mov esp, ebp . pop ebp . push ecx . ret . int . int . int . int . int . mov edi, edi . push ebp . mov ebp, esp . push dword [ebp + var] . push dword [ebp + var] . push dword [ebp + var] . push dword [ebp + 8] . push var . push var . call sub.msvcrt.dll__except_handler4_common . add esp, var . pop ebp . ret . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_void_____cdecl_operator_new_unsigned_int] . int
call var . jmp var . int . int . int . int . int . cmp ecx, dword [var] . jne var . ret 0 . jmp loc.01003ccd . int . int . int . int . int . mov edi, edi . push ebp . mov ebp, esp . mov eax, dword [ebp + 8] . mov eax, dword [eax] . cmp dword [eax], var . jne var . cmp dword [eax + var], 3 . jne var . mov eax, dword [eax + var] . cmp eax, var . je var . cmp eax, var . je var . cmp eax, var . je var . cmp eax, var . jne var . call dword [sym.imp.msvcrt.dll_void___cdecl_terminate_void] . xor eax, eax . pop ebp . ret 4 . int . int . int . int . int . push var . call dword [sym.imp.KERNEL32.dll_SetUnhandledExceptionFilter] . xor eax, eax . ret . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll__XcptFilter] . int . int . int . int . int . int . int . int . int . int . int
call var . jmp var . â”œ 262: loc.00402da4 (int2_t var, int2_t var) . mov edi, edi . push ebp . mov ebp, esp . sub esp, var . mov dword [var], eax . mov dword [var], ecx . mov dword [var], edx . mov dword [var], ebx . mov dword [var], esi . mov dword [var], edi . mov word [var], ss . mov word [var], cs . mov word [var], ds . mov word [var], es . mov word [var], fs . mov word [var], gs . pushfd . pop dword [var] . mov eax, dword [ebp] . mov dword [var], eax . mov eax, dword [var] . mov dword [var], eax . lea eax, [var] . mov dword [var], eax . mov eax, dword [var] . mov dword [var], var . mov eax, dword [var] . mov dword [var], eax . mov dword [var], var . mov dword [var], 1 . mov eax, dword [var] . mov dword [var], eax . mov eax, dword [var] . mov dword [var], eax . call dword [sym.imp.KERNEL32.dll_IsDebuggerPresent] . mov dword [var], eax . push 1 . call var . pop ecx . push 0 . call dword [sym.imp.KERNEL32.dll_SetUnhandledExceptionFilter] . push var . call dword [sym.imp.KERNEL32.dll_UnhandledExceptionFilter] . cmp dword [var], 0 . jne var . push 1 . call var . pop ecx . push var . call dword [sym.imp.KERNEL32.dll_GetCurrentProcess] . push eax . call dword [sym.imp.KERNEL32.dll_TerminateProcess] . leave . ret . mov edi, edi . push ebp . mov ebp, esp . sub esp, var . mov eax, dword [var] . xor edx, edx . push ebx . push esi
call var . jmp var . int . int . int . int . int . mov edi, edi . push ebp . mov ebp, esp . mov eax, dword [ebp + 8] . mov eax, dword [eax] . cmp dword [eax], var . jne var . cmp dword [eax + var], 3 . jne var . mov eax, dword [eax + var] . cmp eax, var . je var . cmp eax, var . je var . cmp eax, var . je var . cmp eax, var . jne var . call dword [sym.imp.msvcrt.dll_void___cdecl_terminate_void] . xor eax, eax . pop ebp . ret 4 . int . int . int . int . int . push var . call dword [sym.imp.KERNEL32.dll_SetUnhandledExceptionFilter] . xor eax, eax . ret . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll__XcptFilter] . int . int . int . int . int . int . mov edi, edi . push ebp . mov ebp, esp . mov ecx, dword [var] . mov eax, var . cmp word [ecx], ax . je var . xor eax, eax . pop ebp . ret . mov eax, dword [ecx + var] . add eax, ecx . cmp dword [eax], var . jne var
call var . jmp var . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_void___cdecl_operator_delete_void] . int . int . int . int . int . cmp ecx, dword [var] . jne var . ret 0 . jmp loc.0101150d . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_memset] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_wcsnlen] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_wcscat_s] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_wcscpy_s] . int . int . int . int . int . int . push var . push dword fs:[0] . mov eax, dword [var] . mov dword [var], ebp . lea ebp, [var] . sub esp, eax . push ebx . push esi . push edi . mov eax, dword [var] . xor dword [ebp - 4], eax . xor eax, ebp . mov dword [ebp - var], eax . push eax
call var . jmp var . int . int . int . int . int . cmp ecx, dword [var] . jne var . ret 0 . jmp loc.01009d4c . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_memcpy] . int . int . int . int . int . int . push var . push dword fs:[0] . mov eax, dword [var] . mov dword [var], ebp . lea ebp, [var] . sub esp, eax . push ebx . push esi . push edi . mov eax, dword [var] . xor dword [ebp - 4], eax . xor eax, ebp . push eax . mov dword [ebp - var], esp . push dword [ebp - 8] . mov eax, dword [ebp - 4] . mov dword [ebp - 4], var . mov dword [ebp - 8], eax . lea eax, [ebp - var] . mov dword fs:[0], eax . ret . mov ecx, dword [var] . mov dword fs:[0], ecx . pop ecx . pop edi . pop edi . pop esi . pop ebx . mov esp, ebp . pop ebp . push ecx . ret . int . int . int . int . int . mov edi, edi . push ebp . mov ebp, esp . push dword [ebp + var]
call var . jmp var . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_sprintf_s] . int . int . int . int . int . cmp ecx, dword [var] . jne var . ret 0 . jmp loc.01003a67 . int . int . int . int . int . mov edi, edi . push ebp . mov ebp, esp . mov eax, dword [ebp + 8] . mov eax, dword [eax] . cmp dword [eax], var . jne var . cmp dword [eax + var], 3 . jne var . mov eax, dword [eax + var] . cmp eax, var . je var . cmp eax, var . je var . cmp eax, var . je var . cmp eax, var . jne var . call dword [sym.imp.msvcrt.dll_void___cdecl_terminate_void] . xor eax, eax . pop ebp . ret 4 . int . int . int . int . int . push var . call dword [sym.imp.KERNEL32.dll_SetUnhandledExceptionFilter] . xor eax, eax . ret . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll__XcptFilter] . int . int . int
call var . push var . push var . call var . xor ebx, ebx . mov dword [var], ebx . mov dword [var], ebx . lea eax, [lpStartupInfo] . push eax . call dword [sym.imp.KERNEL32.dll_GetStartupInfoA] . mov dword [var], var . mov dword [var], 1 . mov eax, dword fs:[var] . mov esi, dword [eax + 4] . mov edi, var . push 0 . push esi . push edi . call dword [sym.imp.KERNEL32.dll_InterlockedCompareExchange] . test eax, eax . jne var . xor esi, esi . inc esi . mov eax, dword [var] . cmp eax, esi . je var . mov eax, dword [var] . test eax, eax . jne var . mov dword [var], esi . push var . push var . call var . pop ecx . pop ecx . test eax, eax . jne var . mov eax, dword [var] . cmp eax, esi . jne var . push var . push var . call sub.msvcrt.dll__initterm . pop ecx . pop ecx . mov dword [var], 2 . test ebx, ebx . jne var . push ebx . push edi . call dword [sym.imp.KERNEL32.dll_InterlockedExchange] . cmp dword [var], 0 . jne var . mov eax, dword [sym.imp.msvcrt.dll__acmdln] . mov esi, dword [eax] . mov dword [var], esi . mov al, byte [esi] . cmp al, var . jbe var . cmp al, var . je var . movzx eax, al . push eax . call dword [sym.imp.msvcrt.dll__ismbblead]
jmp dword [sym.imp.mscoree.dll__CorExeMain] . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al
call var . push var . push var . call var . xor ebx, ebx . mov dword [ebp - var], ebx . mov dword [ebp - 4], ebx . lea eax, [ebp - var] . push eax . call dword [sym.imp.KERNEL32.dll_GetStartupInfoA] . mov dword [ebp - 4], var . mov dword [ebp - 4], 1 . mov eax, dword fs:[var] . mov esi, dword [eax + 4] . mov edi, var . push 0 . push esi . push edi . call dword [sym.imp.KERNEL32.dll_InterlockedCompareExchange] . test eax, eax . jne var . xor esi, esi . inc esi . mov eax, dword [var] . cmp eax, esi . je var . mov eax, dword [var] . test eax, eax . jne var . mov dword [var], esi . push var . push var . call var . pop ecx . pop ecx . test eax, eax . jne var . mov eax, dword [var] . cmp eax, esi . jne var . push var . push var . call sub.msvcrt.dll__initterm . pop ecx . pop ecx . mov dword [var], 2 . test ebx, ebx . jne var . push ebx . push edi . call dword [sym.imp.KERNEL32.dll_InterlockedExchange] . cmp dword [var], 0 . jne var . mov eax, dword [sym.imp.msvcrt.dll__acmdln] . mov esi, dword [eax] . mov dword [ebp - var], esi . mov al, byte [esi] . cmp al, var . jbe var . cmp al, var . je var . movzx eax, al . push eax . call dword [sym.imp.msvcrt.dll__ismbblead]
call var . jmp var . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll__snwprintf_s] . int . int . int . int . int . cmp ecx, dword [var] . jne var . ret 0 . jmp loc.0100b837 . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_memset] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_wcscat_s] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_wcscpy_s] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_strcpy_s] . int . int . int . int . int . int . int . int . int . int . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_void___cdecl_operator_delete_void] . int . int . int
0000:4d00 8be8 mov bp, ax . 0000:4d02 8cc0 mov ax, es . 0000:4d04 051000 add ax, var . 0000:4d07 0e push cs . 0000:4d08 1f pop ds . 0000:4d09 a30400 mov word [4], ax . 0000:4d0c 03060c00 add ax, word [var] . 0000:4d10 8ec0 mov es, ax . 0000:4d12 8b0e0600 mov cx, word [6] . 0000:4d16 8bf9 mov di, cx . 0000:4d18 4f dec di . 0000:4d19 8bf7 mov si, di . 0000:4d1b fd std . 0000:4d1c f3a4 rep movsb byte es:[di], byte ptr [si] . 0000:4d1e 50 push ax . 0000:4d1f b83400 mov ax, var . 0000:4d22 50 push ax . 0000:4d23 cb retf . 0000:4d24 8cc3 mov bx, es . 0000:4d26 8cd8 mov ax, ds . 0000:4d28 48 dec ax . 0000:4d29 8ed8 mov ds, ax . 0000:4d2b 8ec0 mov es, ax . 0000:4d2d bf0f00 mov di, var . 0000:4d30 b91000 mov cx, var . 0000:4d33 b0ff mov al, var . 0000:4d35 f3ae repe scasb al, byte es:[di] . 0000:4d37 47 inc di . 0000:4d38 8bf7 mov si, di . 0000:4d3a 8bc3 mov ax, bx . 0000:4d3c 48 dec ax . 0000:4d3d 8ec0 mov es, ax . 0000:4d3f bf0f00 mov di, var . 0000:4d42 b104 mov cl, 4 . 0000:4d44 8bc6 mov ax, si . 0000:4d46 f7d0 not ax . 0000:4d48 d3e8 shr ax, cl . 0000:4d4a 8cda mov dx, ds . 0000:4d4c 2bd0 sub dx, ax . 0000:4d4e 7304 jae var . 0000:4d50 8cd8 mov ax, ds . 0000:4d52 2bd2 sub dx, dx . 0000:4d54 d3e0 shl ax, cl . 0000:4d56 03f0 add si, ax . 0000:4d58 8eda mov ds, dx . 0000:4d5a 8bc7 mov ax, di . 0000:4d5c f7d0 not ax . 0000:4d5e d3e8 shr ax, cl . 0000:4d60 8cc2 mov dx, es . 0000:4d62 2bd0 sub dx, ax . 0000:4d64 7304 jae var . 0000:4d66 8cc0 mov ax, es . 0000:4d68 2bd2 sub dx, dx . 0000:4d6a d3e0 shl ax, cl . 0000:4d6c 03f8 add di, ax . 0000:4d6e 8ec2 mov es, dx . 0000:4d70 ac lodsb al, byte [si] . 0000:4d71 8ad0 mov dl, al . 0000:4d73 4e dec si . 0000:4d74 ad lodsw ax, word [si] . 0000:4d75 8bc8 mov cx, ax . 0000:4d77 46 inc si . 0000:4d78 8ac2 mov al, dl . 0000:4d7a 24fe and al, var
call var . jmp var . int . int . int . int . int . cmp ecx, dword [section..data] . jne var . ret 0 . jmp loc.01001a37 . int . int . int . int . int . int . int . int . int . int . int . int . int . int . int . int . int . int . push ecx . lea ecx, [var] . sub ecx, eax . sbb eax, eax . not eax . and ecx, eax . mov eax, esp . and eax, var . cmp ecx, eax . jb var . mov eax, ecx . pop ecx . xchg eax, esp . mov eax, dword [eax] . mov dword [esp], eax . ret . sub eax, var . test dword [eax], eax . jmp var . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_memset] . int . int . int . int . int . mov edi, edi . push ebp . mov ebp, esp . mov eax, dword [ebp + 8] . mov eax, dword [eax]
call var . jmp var . int . int . int . int . int . cmp ecx, dword [var] . jne var . ret 0 . jmp loc.010071cc . int . int . int . int . int . int . int . int . push edi . push esi . push ebx . xor edi, edi . mov eax, dword [var] . or eax, eax . jge var . inc edi . mov edx, dword [var] . neg eax . neg edx . sbb eax, 0 . mov dword [var], eax . mov dword [var], edx . mov eax, dword [var] . or eax, eax . jge var . inc edi . mov edx, dword [var] . neg eax . neg edx . sbb eax, 0 . mov dword [var], eax . mov dword [var], edx . or eax, eax . jne var . mov ecx, dword [var] . mov eax, dword [var] . xor edx, edx . div ecx . mov ebx, eax . mov eax, dword [var] . div ecx . mov edx, ebx . jmp var . mov ebx, eax . mov ecx, dword [var] . mov edx, dword [var] . mov eax, dword [var] . shr ebx, 1 . rcr ecx, 1 . shr edx, 1 . rcr eax, 1 . or ebx, ebx . jne var
call var . jmp var . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_memcpy_s] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_memmove_s] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_public:_void___thiscall_exception::constructor_char_const___const_const] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_public_virtual:_char_const_____thiscall_exception::what_void_const] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_public_virtual:_void___thiscall_exception::_destructor_void] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_public:_void___thiscall_exception::constructor_class_exception_const] . int . int . int . int . int . int . int . int . int . int . int . int . int . int . int . int . int . int . push ebx . push esi . mov eax, dword [var]
call var . push var . push var . call var . xor ebx, ebx . mov dword [var], ebx . mov dword [var], ebx . lea eax, [lpStartupInfo] . push eax . call dword [sym.imp.KERNEL32.dll_GetStartupInfoA] . mov dword [var], var . mov dword [var], 1 . mov eax, dword fs:[var] . mov esi, dword [eax + 4] . mov edi, var . push 0 . push esi . push edi . call dword [sym.imp.KERNEL32.dll_InterlockedCompareExchange] . test eax, eax . jne var . xor esi, esi . inc esi . mov eax, dword [var] . cmp eax, esi . je var . mov eax, dword [var] . test eax, eax . jne var . mov dword [var], esi . push var . push var . call var . pop ecx . pop ecx . test eax, eax . jne var . mov eax, dword [var] . cmp eax, esi . jne var . push var . push var . call sub.msvcrt.dll__initterm . pop ecx . pop ecx . mov dword [var], 2 . test ebx, ebx . jne var . push ebx . push edi . call dword [sym.imp.KERNEL32.dll_InterlockedExchange] . cmp dword [var], 0 . jne var . mov eax, dword [sym.imp.msvcrt.dll__acmdln] . mov esi, dword [eax] . mov dword [var], esi . mov al, byte [esi] . cmp al, var . jbe var . cmp al, var . je var . movzx eax, al . push eax . call dword [sym.imp.msvcrt.dll__ismbblead]
call var . jmp var . int . int . int . int . int . cmp ecx, dword [var] . jne var . ret 0 . jmp loc.01017fc8 . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll__purecall] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_memset] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_malloc] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll__callnewh] . int . int . int . int . int . int . â”œ 6: void sub.msvcrt.dll_free (void *ptr) . jmp dword [sym.imp.msvcrt.dll_free] . int . int . int . int . int . mov edi, edi . push ebp . mov ebp, esp . mov eax, dword [ebp + 8] . mov eax, dword [eax] . cmp dword [eax], var . jne var . cmp dword [eax + var], 3 . jne var . mov eax, dword [eax + var] . cmp eax, var . je var . cmp eax, var
call var . jmp var . push var . push var . call var . xor esi, esi . mov dword [var], esi . mov dword [var], esi . call dword [sym.imp.MSVCR120.dll___crtGetShowWindowMode] . movzx ebx, ax . mov dword [var], esi . mov eax, dword fs:[var] . mov edx, dword [eax + 4] . mov edi, esi . mov esi, var . mov ecx, edx . xor eax, eax . lock cmpxchg dword [esi], ecx . test eax, eax . je var . cmp eax, edx . jne var . xor esi, esi . inc esi . mov edi, esi . jmp var . xor esi, esi . inc esi . cmp dword [var], esi . jne var . push var . call sub.MSVCR120.dll__amsg_exit . pop ecx . jmp var . cmp dword [var], 0 . jne var . mov dword [var], esi . push var . push var . call sub.MSVCR120.dll__initterm_e . pop ecx . pop ecx . test eax, eax . je var . mov dword [var], var . mov eax, var . jmp var . mov dword [var], esi . cmp dword [var], esi . jne var . push var . push var . call sub.MSVCR120.dll__initterm . pop ecx . pop ecx . mov dword [var], 2 . test edi, edi . jne var . xor eax, eax . mov ecx, var . xchg dword [ecx], eax . cmp dword [var], 0 . je var . push var
call var . jmp var . int . int . int . int . int . mov edi, edi . push ebp . mov ebp, esp . mov eax, dword [ebp + 8] . mov eax, dword [eax] . cmp dword [eax], var . jne var . cmp dword [eax + var], 3 . jne var . mov eax, dword [eax + var] . cmp eax, var . je var . cmp eax, var . je var . cmp eax, var . je var . cmp eax, var . jne var . call dword [sym.imp.msvcrt.dll_void___cdecl_terminate_void] . xor eax, eax . pop ebp . ret 4 . int . int . int . int . int . push var . call dword [sym.imp.KERNEL32.dll_SetUnhandledExceptionFilter] . xor eax, eax . ret . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll__XcptFilter] . int . int . int . int . int . int . int . int . int . int . mov edi, edi . push ebp . mov ebp, esp . mov ecx, dword [var] . mov eax, var . cmp word [ecx], ax . je var . xor eax, eax . pop ebp . ret
call var . jmp var . push ebp . mov ebp, esp . sub esp, var . push ebx . xor ebx, ebx . cmp dword [var], ebx . jne var . call var . push ebx . push ebx . push ebx . push ebx . push ebx . mov dword [eax], var . call var . add esp, var . or eax, var . jmp var . push esi . mov esi, dword [var] . push edi . mov edi, dword [var] . cmp edi, ebx . je var . cmp esi, ebx . jne var . call var . push ebx . push ebx . push ebx . push ebx . push ebx . mov dword [eax], var . call var . add esp, var . or eax, var . jmp var . cmp edi, var . mov dword [var], var . mov dword [var], esi . mov dword [var], esi . jbe var . mov dword [var], var . jmp var . lea eax, [edi + edi] . mov dword [var], eax . push dword [var] . lea eax, [var] . push dword [var] . push dword [var] . push eax . call dword [var] . add esp, var . cmp esi, ebx . mov dword [var], eax . je var . cmp eax, ebx . jl var . dec dword [var] . js var . mov eax, dword [var] . mov byte [eax], bl
call var . jmp var . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_void___cdecl_operator_delete_void] . int . int . int . int . int . cmp ecx, dword [var] . jne var . ret 0 . jmp loc.0100265d . int . int . int . int . int . mov edi, edi . push ebp . mov ebp, esp . mov eax, dword [ebp + 8] . mov eax, dword [eax] . cmp dword [eax], var . jne var . cmp dword [eax + var], 3 . jne var . mov eax, dword [eax + var] . cmp eax, var . je var . cmp eax, var . je var . cmp eax, var . je var . cmp eax, var . jne var . call dword [sym.imp.msvcrt.dll_void___cdecl_terminate_void] . xor eax, eax . pop ebp . ret 4 . int . int . int . int . int . push var . call dword [sym.imp.KERNEL32.dll_SetUnhandledExceptionFilter] . xor eax, eax . ret . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll__XcptFilter] . int . int . int . int
call var . jmp var . int . int . int . int . int . cmp ecx, dword [var] . jne var . ret 0 . jmp loc.0100410d . int . int . int . int . int . int . int . push var . push dword fs:[0] . mov eax, dword [var] . mov dword [var], ebp . lea ebp, [var] . sub esp, eax . push ebx . push esi . push edi . mov eax, dword [var] . xor dword [ebp - 4], eax . xor eax, ebp . mov dword [ebp - var], eax . push eax . mov dword [ebp - var], esp . push dword [ebp - 8] . mov eax, dword [ebp - 4] . mov dword [ebp - 4], var . mov dword [ebp - 8], eax . lea eax, [ebp - var] . mov dword fs:[0], eax . ret . mov ecx, dword [var] . xor ecx, ebp . call var . jmp var . int . int . int . int . int . mov edi, edi . push ebp . mov ebp, esp . push dword [ebp + var] . push dword [ebp + var] . push dword [ebp + var] . push dword [ebp + 8] . push var . push var . call sub.msvcrt.dll__except_handler4_common . add esp, var . pop ebp . ret . int . int
call var . jmp var . int . int . int . int . int . cmp ecx, dword [var] . jne var . ret 0 . jmp loc.01002b27 . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_memcpy] . int . int . int . int . int . mov edi, edi . push ebp . mov ebp, esp . mov eax, dword [ebp + 8] . mov eax, dword [eax] . cmp dword [eax], var . jne var . cmp dword [eax + var], 3 . jne var . mov eax, dword [eax + var] . cmp eax, var . je var . cmp eax, var . je var . cmp eax, var . je var . cmp eax, var . jne var . call dword [sym.imp.msvcrt.dll_void___cdecl_terminate_void] . xor eax, eax . pop ebp . ret 4 . int . int . int . int . int . push var . call dword [sym.imp.KERNEL32.dll_SetUnhandledExceptionFilter] . xor eax, eax . ret . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll__XcptFilter] . int . int . int . int
call var . jmp var . int . int . int . int . int . mov edi, edi . push ebp . mov ebp, esp . mov eax, dword [ebp + 8] . mov eax, dword [eax] . cmp dword [eax], var . jne var . cmp dword [eax + var], 3 . jne var . mov eax, dword [eax + var] . cmp eax, var . je var . cmp eax, var . je var . cmp eax, var . je var . cmp eax, var . jne var . call dword [sym.imp.msvcrt.dll_void___cdecl_terminate_void] . xor eax, eax . pop ebp . ret 4 . int . int . int . int . int . push var . call dword [sym.imp.KERNEL32.dll_SetUnhandledExceptionFilter] . xor eax, eax . ret . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll__XcptFilter] . int . int . int . int . int . int . int . int . int . int . int . int . mov edi, edi . push ebp . mov ebp, esp . mov ecx, dword [var] . mov eax, var . cmp word [ecx], ax . je var
call var . jmp var . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll___CxxFrameHandler3] . int . int . int . int . int . cmp ecx, dword [var] . jne var . ret 0 . jmp loc.01002ef7 . int . int . int . int . int . push eax . push dword fs:[0] . lea eax, [var] . sub esp, dword [var] . push ebx . push esi . push edi . mov dword [eax], ebp . mov ebp, eax . mov eax, dword [var] . xor eax, ebp . push eax . push dword [ebp - 4] . mov dword [ebp - 4], var . lea eax, [ebp - var] . mov dword fs:[0], eax . ret . int . int . int . int . int . push eax . push dword fs:[0] . lea eax, [var] . sub esp, dword [var] . push ebx . push esi . push edi . mov dword [eax], ebp . mov ebp, eax . mov eax, dword [var] . xor eax, ebp . push eax . mov dword [ebp - var], eax . push dword [ebp - 4] . mov dword [ebp - 4], var . lea eax, [ebp - var] . mov dword fs:[0], eax . ret . int . int
call var . jmp var . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_void___cdecl_operator_delete_void] . int . int . int . int . int . cmp ecx, dword [var] . jne var . ret 0 . jmp loc.01008a67 . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_memset] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll__purecall] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_void_____cdecl_operator_new_unsigned_int] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll__vsnwprintf] . int . int . int . int . int . mov edi, edi . push ebp . mov ebp, esp . mov eax, dword [ebp + 8] . mov eax, dword [eax] . cmp dword [eax], var . jne var . cmp dword [eax + var], 3 . jne var . mov eax, dword [eax + var] . cmp eax, var . je var . cmp eax, var . je var
jmp dword [sym.imp.mscoree.dll__CorExeMain] . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al
call var . jmp var . int . int . int . int . int . cmp ecx, dword [var] . jne var . ret 0 . jmp loc.01009b57 . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_memcpy_s] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_memmove_s] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_public:_void___thiscall_exception::constructor_char_const___const_const] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_public_virtual:_char_const_____thiscall_exception::what_void_const] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_public_virtual:_void___thiscall_exception::_destructor_void] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_public:_void___thiscall_exception::constructor_class_exception_const] . int . int . int . int . int . mov edi, edi . push ebp . mov ebp, esp . pop ebp . jmp var . int
call var . jmp var . cmp ecx, dword [var] . jne var . ret . mov edi, edi . push ebp . mov ebp, esp . mov edx, dword [var] . push esi . push edi . test edx, edx . je var . mov edi, dword [var] . test edi, edi . jne var . call var . push var . pop esi . mov dword [eax], esi . call var . mov eax, esi . jmp var . mov eax, dword [var] . test eax, eax . jne var . mov byte [edx], al . jmp var . mov esi, edx . sub esi, eax . mov cl, byte [eax] . mov byte [esi + eax], cl . inc eax . test cl, cl . je var . dec edi . jne var . test edi, edi . jne var . mov byte [edx], 0 . call var . push var . pop ecx . mov dword [eax], ecx . mov esi, ecx . jmp var . xor eax, eax . pop edi . pop esi . pop ebp . ret . mov edi, edi . push ebp . mov ebp, esp . mov ecx, dword [var] . push esi . push edi . test ecx, ecx . je var . mov edi, dword [var] . test edi, edi . jne var . call var . push var
jmp dword [sym.imp.mscoree.dll__CorExeMain] . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al
call var . jmp var . int . int . int . int . int . mov edi, edi . push ebp . mov ebp, esp . push esi . mov esi, ecx . call dword [sym.imp.msvcrt.dll_public_virtual:_void___thiscall_type_info::_destructor_void] . test byte [ebp + 8], 1 . je var . push esi . call sub.MFC42u.dll_operatordelete . pop ecx . mov eax, esi . pop esi . pop ebp . ret 4 . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll___CxxFrameHandler3] . int . int . int . int . int . cmp ecx, dword [var] . jne var . ret 0 . jmp loc.01004477 . int . int . int . int . int . push eax . push dword fs:[0] . lea eax, [var] . sub esp, dword [var] . push ebx . push esi . push edi . mov dword [eax], ebp . mov ebp, eax . mov eax, dword [var] . xor eax, ebp . push eax . push dword [ebp - 4] . mov dword [ebp - 4], var . lea eax, [ebp - var] . mov dword fs:[0], eax . ret . int . int . int . int . int
call var . jmp var . int . int . int . int . int . int . push var . push dword fs:[0] . mov eax, dword [var] . mov dword [var], ebp . lea ebp, [var] . sub esp, eax . push ebx . push esi . push edi . mov eax, dword [var] . xor dword [ebp - 4], eax . xor eax, ebp . mov dword [ebp - var], eax . push eax . mov dword [ebp - var], esp . push dword [ebp - 8] . mov eax, dword [ebp - 4] . mov dword [ebp - 4], var . mov dword [ebp - 8], eax . lea eax, [ebp - var] . mov dword fs:[0], eax . ret . mov ecx, dword [var] . xor ecx, ebp . call var . jmp var . int . int . int . int . int . mov edi, edi . push ebp . mov ebp, esp . push dword [ebp + var] . push dword [ebp + var] . push dword [ebp + var] . push dword [ebp + 8] . push var . push var . call var . add esp, var . pop ebp . ret . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_memset] . int . int . int . int . int . push var
call var . jmp var . jmp dword [sym.imp.MSVCR120.dll_void___cdecl_terminate_void] . jmp dword [sym.imp.MSVCR120.dll__lock] . jmp dword [sym.imp.MSVCR120.dll__unlock] . jmp dword [sym.imp.MSVCR120.dll___dllonexit] . jmp dword [sym.imp.MSVCR120.dll__except_handler4_common] . push ebp . mov ebp, esp . call dword [sym.imp.KERNEL32.dll_IsDebuggerPresent] . push 1 . mov dword [var], eax . call sub.MSVCR120.dll__crt_debugger_hook . push dword [var] . call sub.MSVCR120.dll___crtUnhandledException . cmp dword [var], 0 . pop ecx . pop ecx . jne var . push 1 . call sub.MSVCR120.dll__crt_debugger_hook . pop ecx . push var . call sub.MSVCR120.dll___crtTerminateProcess . pop ecx . pop ebp . ret . â”œ 251: loc.0040b23b (int2_t var, int2_t var) . push ebp . mov ebp, esp . sub esp, var . push var . call sub.KERNEL32.dll_IsProcessorFeaturePresent . test eax, eax . je var . push 2 . pop ecx . int var . mov dword [var], eax . mov dword [var], ecx . mov dword [var], edx . mov dword [var], ebx . mov dword [var], esi . mov dword [var], edi . mov word [var], ss . mov word [var], cs . mov word [var], ds . mov word [var], es . mov word [var], fs . mov word [var], gs . pushfd . pop dword [var] . mov eax, dword [ebp] . mov dword [var], eax . mov eax, dword [var] . mov dword [var], eax . lea eax, [var] . mov dword [var], eax . mov eax, dword [var] . mov dword [var], var . mov eax, dword [var] . mov dword [var], eax . mov dword [var], var . mov dword [var], 1 . mov dword [var], 1
0000:1840 8be8 mov bp, ax . 0000:1842 8cc0 mov ax, es . 0000:1844 051000 add ax, var . 0000:1847 0e push cs . 0000:1848 1f pop ds . 0000:1849 a30400 mov word [4], ax . 0000:184c 03060c00 add ax, word [var] . 0000:1850 8ec0 mov es, ax . 0000:1852 8b0e0600 mov cx, word [6] . 0000:1856 8bf9 mov di, cx . 0000:1858 4f dec di . 0000:1859 8bf7 mov si, di . 0000:185b fd std . 0000:185c f3a4 rep movsb byte es:[di], byte ptr [si] . 0000:185e 50 push ax . 0000:185f b83400 mov ax, var . 0000:1862 50 push ax . 0000:1863 cb retf . 0000:1864 8cc3 mov bx, es . 0000:1866 8cd8 mov ax, ds . 0000:1868 48 dec ax . 0000:1869 8ed8 mov ds, ax . 0000:186b 8ec0 mov es, ax . 0000:186d bf0f00 mov di, var . 0000:1870 b91000 mov cx, var . 0000:1873 b0ff mov al, var . 0000:1875 f3ae repe scasb al, byte es:[di] . 0000:1877 47 inc di . 0000:1878 8bf7 mov si, di . 0000:187a 8bc3 mov ax, bx . 0000:187c 48 dec ax . 0000:187d 8ec0 mov es, ax . 0000:187f bf0f00 mov di, var . 0000:1882 b104 mov cl, 4 . 0000:1884 8bc6 mov ax, si . 0000:1886 f7d0 not ax . 0000:1888 d3e8 shr ax, cl . 0000:188a 8cda mov dx, ds . 0000:188c 2bd0 sub dx, ax . 0000:188e 7304 jae var . 0000:1890 8cd8 mov ax, ds . 0000:1892 2bd2 sub dx, dx . 0000:1894 d3e0 shl ax, cl . 0000:1896 03f0 add si, ax . 0000:1898 8eda mov ds, dx . 0000:189a 8bc7 mov ax, di . 0000:189c f7d0 not ax . 0000:189e d3e8 shr ax, cl . 0000:18a0 8cc2 mov dx, es . 0000:18a2 2bd0 sub dx, ax . 0000:18a4 7304 jae var . 0000:18a6 8cc0 mov ax, es . 0000:18a8 2bd2 sub dx, dx . 0000:18aa d3e0 shl ax, cl . 0000:18ac 03f8 add di, ax . 0000:18ae 8ec2 mov es, dx . 0000:18b0 ac lodsb al, byte [si] . 0000:18b1 8ad0 mov dl, al . 0000:18b3 4e dec si . 0000:18b4 ad lodsw ax, word [si] . 0000:18b5 8bc8 mov cx, ax . 0000:18b7 46 inc si . 0000:18b8 8ac2 mov al, dl . 0000:18ba 24fe and al, var
call var . push var . push var . call var . xor ebx, ebx . mov dword [var], ebx . mov dword [var], ebx . lea eax, [lpStartupInfo] . push eax . call dword [sym.imp.KERNEL32.dll_GetStartupInfoW] . mov dword [var], var . mov dword [var], 1 . mov eax, dword fs:[var] . mov esi, dword [eax + 4] . mov dword [var], ebx . mov edi, var . push ebx . push esi . push edi . call dword [sym.imp.KERNEL32.dll_InterlockedCompareExchange] . cmp eax, ebx . jne var . xor esi, esi . inc esi . mov eax, dword [var] . cmp eax, esi . je var . mov eax, dword [var] . test eax, eax . jne var . mov dword [var], esi . push var . push var . call var . pop ecx . pop ecx . test eax, eax . jne var . mov eax, dword [var] . cmp eax, esi . jne var . push var . push var . call sub.msvcrt.dll__initterm . pop ecx . pop ecx . mov dword [var], 2 . cmp dword [var], ebx . jne var . push ebx . push edi . call dword [sym.imp.KERNEL32.dll_InterlockedExchange] . cmp dword [var], ebx . jne var . mov eax, dword [sym.imp.msvcrt.dll__wcmdln] . cmp dword [eax], ebx . je var . mov eax, dword [eax] . nop . nop . nop . nop . nop . nop
call var . jmp var . int . int . int . int . int . mov edi, edi . push ebp . mov ebp, esp . mov eax, dword [ebp + 8] . mov eax, dword [eax] . cmp dword [eax], var . jne var . cmp dword [eax + var], 3 . jne var . mov eax, dword [eax + var] . cmp eax, var . je var . cmp eax, var . je var . cmp eax, var . je var . cmp eax, var . jne var . call dword [sym.imp.msvcrt.dll_void___cdecl_terminate_void] . xor eax, eax . pop ebp . ret 4 . int . int . int . int . int . push var . call dword [sym.imp.KERNEL32.dll_SetUnhandledExceptionFilter] . xor eax, eax . ret . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll__XcptFilter] . int . int . int . int . int . int . int . int . int . int . int . int . int . int . mov edi, edi . push ebp . mov ebp, esp . mov ecx, dword [var] . mov eax, var
call var . jmp var . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_void___cdecl_operator_delete_void] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_void_____cdecl_operator_new_unsigned_int] . int . int . int . int . int . cmp ecx, dword [var] . jne var . ret 0 . jmp loc.01005407 . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_memcpy] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_wcscpy_s] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_vswprintf_s] . int . int . int . int . int . int . int . int . int . int . int . int . int . int . int . int . int . int . int . int
call var . jmp var . int . int . int . int . int . cmp ecx, dword [section..data] . jne var . ret 0 . jmp loc.00402667 . int . int . int . int . int . int . int . int . push ecx . lea ecx, [var] . sub ecx, eax . and ecx, var . add eax, ecx . sbb ecx, ecx . or eax, ecx . pop ecx . jmp loc.00402750 . push ecx . lea ecx, [esp + 8] . sub ecx, eax . and ecx, 7 . add eax, ecx . sbb ecx, ecx . or eax, ecx . pop ecx . jmp loc.00402750 . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_memset] . int . int . int . int . int . push var . push var . call var . mov eax, dword [var] . mov dword [var], eax . cmp eax, var . jne var . push dword [var] . call dword [sym.imp.msvcrt.dll__onexit] . pop ecx . jmp var . push 8 . call sub.msvcrt.dll__lock . pop ecx . and dword [var], 0
call var . jmp var . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll___CxxFrameHandler3] . int . int . int . int . int . cmp ecx, dword [var] . jne var . ret 0 . jmp loc.0100fb45 . int . int . int . int . int . push eax . push dword fs:[0] . lea eax, [var] . sub esp, dword [var] . push ebx . push esi . push edi . mov dword [eax], ebp . mov ebp, eax . mov eax, dword [var] . xor eax, ebp . push eax . push dword [ebp - 4] . mov dword [ebp - 4], var . lea eax, [ebp - var] . mov dword fs:[0], eax . ret . int . int . int . int . int . push eax . push dword fs:[0] . lea eax, [var] . sub esp, dword [var] . push ebx . push esi . push edi . mov dword [eax], ebp . mov ebp, eax . mov eax, dword [var] . xor eax, ebp . push eax . mov dword [ebp - var], esp . push dword [ebp - 4] . mov dword [ebp - 4], var . lea eax, [ebp - var] . mov dword fs:[0], eax . ret . int . int
call var . jmp var . int . int . int . int . int . cmp ecx, dword [section..data] . jne var . ret 0 . jmp loc.01001947 . int . int . int . int . int . mov edi, edi . push ebp . mov ebp, esp . mov eax, dword [ebp + 8] . mov eax, dword [eax] . cmp dword [eax], var . jne var . cmp dword [eax + var], 3 . jne var . mov eax, dword [eax + var] . cmp eax, var . je var . cmp eax, var . je var . cmp eax, var . je var . cmp eax, var . jne var . call dword [sym.imp.msvcrt.dll_void___cdecl_terminate_void] . xor eax, eax . pop ebp . ret 4 . int . int . int . int . int . push var . call dword [sym.imp.KERNEL32.dll_SetUnhandledExceptionFilter] . xor eax, eax . ret . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll__XcptFilter] . int . int . int . int . int . int . int . int . int . int . int
call var . jmp var . int . int . int . int . int . cmp ecx, dword [var] . jne var . ret 0 . jmp loc.010044d7 . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_memset] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_swprintf_s] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_wcscpy_s] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_vswprintf_s] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_wcscat_s] . int . int . int . int . int . mov edi, edi . push ebp . mov ebp, esp . mov eax, dword [ebp + 8] . mov eax, dword [eax] . cmp dword [eax], var . jne var . cmp dword [eax + var], 3 . jne var . mov eax, dword [eax + var] . cmp eax, var . je var . cmp eax, var
call var . jmp var . â”œ 262: loc.00402da4 (int2_t var, int2_t var) . mov edi, edi . push ebp . mov ebp, esp . sub esp, var . mov dword [var], eax . mov dword [var], ecx . mov dword [var], edx . mov dword [var], ebx . mov dword [var], esi . mov dword [var], edi . mov word [var], ss . mov word [var], cs . mov word [var], ds . mov word [var], es . mov word [var], fs . mov word [var], gs . pushfd . pop dword [var] . mov eax, dword [ebp] . mov dword [var], eax . mov eax, dword [var] . mov dword [var], eax . lea eax, [var] . mov dword [var], eax . mov eax, dword [var] . mov dword [var], var . mov eax, dword [var] . mov dword [var], eax . mov dword [var], var . mov dword [var], 1 . mov eax, dword [var] . mov dword [var], eax . mov eax, dword [var] . mov dword [var], eax . call dword [sym.imp.KERNEL32.dll_IsDebuggerPresent] . mov dword [var], eax . push 1 . call var . pop ecx . push 0 . call dword [sym.imp.KERNEL32.dll_SetUnhandledExceptionFilter] . push var . call dword [sym.imp.KERNEL32.dll_UnhandledExceptionFilter] . cmp dword [var], 0 . jne var . push 1 . call var . pop ecx . push var . call dword [sym.imp.KERNEL32.dll_GetCurrentProcess] . push eax . call dword [sym.imp.KERNEL32.dll_TerminateProcess] . leave . ret . mov edi, edi . push ebp . mov ebp, esp . sub esp, var . mov eax, dword [var] . xor edx, edx . push ebx . push esi
call var . jmp var . push var . push var . call var . and dword [var], 0 . dec dword [var] . js var . mov ecx, dword [var] . sub ecx, dword [var] . mov dword [var], ecx . call dword [var] . jmp var . mov eax, dword [ebp - var] . mov dword [ebp - var], eax . mov eax, dword [ebp - var] . mov eax, dword [eax] . mov dword [ebp - var], eax . mov eax, dword [ebp - var] . cmp dword [eax], var . je var . mov dword [ebp - var], 0 . mov eax, dword [ebp - var] . ret . call sub.MSVCR100.dll_void___cdecl_terminate_void . mov esp, dword [ebp - var] . mov dword [var], var . call var . ret var . push var . push var . call var . and dword [var], 0 . mov esi, dword [var] . mov eax, esi . imul eax, dword [var] . add dword [var], eax . and dword [var], 0 . dec dword [var] . js var . sub dword [var], esi . mov ecx, dword [var] . call dword [var] . jmp var . mov dword [var], 1 . mov dword [var], var . call var . call var . ret var . cmp dword [var], 0 . jne var . push dword [var] . push dword [var] . push dword [var] . push dword [var] . call var . ret . jmp dword [sym.imp.MSVCR100.dll_void___cdecl_operator_delete___void] . jmp dword [sym.imp.MSVCR100.dll__CxxThrowException] . jmp dword [sym.imp.MSVCR100.dll___CxxFrameHandler3] . jmp dword [sym.imp.MSVCR100.dll_memset] . mov edi, edi . push ebp . mov ebp, esp
call var . jmp var . int . int . int . int . int . int . â”œ 6: void sub.msvcrt.dll_free (void *ptr) . jmp dword [sym.imp.msvcrt.dll_free] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll__CxxThrowException] . int . int . int . int . int . mov edi, edi . push ebp . mov ebp, esp . push esi . mov esi, ecx . call dword [sym.imp.msvcrt.dll_public_virtual:_void___thiscall_type_info::_destructor_void] . test byte [ebp + 8], 1 . je var . push esi . call var . pop ecx . mov eax, esi . pop esi . pop ebp . ret 4 . int . int . int . int . int . int . int . push var . push dword fs:[0] . mov eax, dword [var] . mov dword [var], ebp . lea ebp, [var] . sub esp, eax . push ebx . push esi . push edi . mov eax, dword [var] . xor dword [ebp - 4], eax . xor eax, ebp . push eax . mov dword [ebp - var], esp . push dword [ebp - 8] . mov eax, dword [ebp - 4] . mov dword [ebp - 4], var . mov dword [ebp - 8], eax . lea eax, [ebp - var] . mov dword fs:[0], eax . ret
call var . jmp var . int . int . int . int . int . cmp ecx, dword [var] . jne var . ret 0 . jmp loc.01003597 . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_memset] . int . int . int . int . int . mov edi, edi . push ebp . mov ebp, esp . mov eax, dword [ebp + 8] . mov eax, dword [eax] . cmp dword [eax], var . jne var . cmp dword [eax + var], 3 . jne var . mov eax, dword [eax + var] . cmp eax, var . je var . cmp eax, var . je var . cmp eax, var . je var . cmp eax, var . jne var . call dword [sym.imp.msvcrt.dll_void___cdecl_terminate_void] . xor eax, eax . pop ebp . ret 4 . int . int . int . int . int . push var . call dword [sym.imp.KERNEL32.dll_SetUnhandledExceptionFilter] . xor eax, eax . ret . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll__XcptFilter] . int . int . int . int . int
call var . jmp var . jmp var . jmp var . push ebp . mov ebp, esp . pop ebp . jmp var . int . int . int . int . int . int . int . int . int . int . int . int . int . int . push ecx . lea ecx, [var] . sub ecx, eax . sbb eax, eax . not eax . and ecx, eax . mov eax, esp . and eax, var . cmp ecx, eax . bnd jb var . mov eax, ecx . pop ecx . xchg eax, esp . mov eax, dword [eax] . mov dword [esp], eax . bnd ret . sub eax, var . test dword [eax], eax . jmp var . int . int . int . push ebx . push esi . mov eax, dword [var] . or eax, eax . jne var . mov ecx, dword [var] . mov eax, dword [var] . xor edx, edx . div ecx . mov ebx, eax . mov eax, dword [var] . div ecx . mov edx, ebx . jmp var . mov ecx, eax . mov ebx, dword [var] . mov edx, dword [var] . mov eax, dword [var] . shr ecx, 1 . rcr ebx, 1
call var . jmp var . int . int . int . int . int . cmp ecx, dword [var] . jne var . ret 0 . jmp loc.01013257 . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll__wcsnicmp] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_wcstoul] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll__wcsicmp] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_wcschr] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_memset] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_memcpy] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll__vsnwprintf] . int . int . int . int . int
call var . jmp var . nop . nop . nop . nop . nop . mov edi, edi . push ebp . mov ebp, esp . sub esp, var . mov eax, dword [var] . and dword [lpSystemTimeAsFileTime], 0 . and dword [var], 0 . push ebx . push edi . mov edi, var . mov ebx, var . cmp eax, edi . jne var . push esi . lea eax, [lpSystemTimeAsFileTime] . push eax . call dword [sym.imp.KERNEL32.dll_GetSystemTimeAsFileTime] . mov esi, dword [var] . xor esi, dword [lpSystemTimeAsFileTime] . call dword [sym.imp.KERNEL32.dll_GetCurrentProcessId] . xor esi, eax . call dword [sym.imp.KERNEL32.dll_GetCurrentThreadId] . xor esi, eax . call dword [sym.imp.KERNEL32.dll_GetTickCount] . xor esi, eax . lea eax, [lpPerformanceCount] . push eax . call dword [sym.imp.KERNEL32.dll_QueryPerformanceCounter] . mov eax, dword [var] . xor eax, dword [lpPerformanceCount] . xor esi, eax . cmp esi, edi . je var . test dword [var], ebx . je var . mov dword [var], esi . not esi . mov dword [var], esi . pop esi . pop edi . pop ebx . leave . ret . mov esi, var . jmp var . mov eax, var . jmp var . push ecx . push edx . push eax . push var . call var . pop edx . pop ecx . jmp eax . mov eax, sym.imp.credui.dll_CredUIPromptForWindowsCredentialsW_5 . jmp var
call var . jmp var . cmp ecx, dword [var] . jne var . ret . jmp loc.0045879f . mov edi, edi . push ebp . mov ebp, esp . push esi . mov esi, dword [var] . push edi . xor edi, edi . cmp esi, edi . jne var . xor eax, eax . jmp var . cmp dword [var], edi . jne var . call var . push var . pop esi . mov dword [eax], esi . push edi . push edi . push edi . push edi . push edi . call var . add esp, var . mov eax, esi . jmp var . cmp dword [var], edi . je var . cmp dword [var], esi . jb var . push esi . push dword [var] . push dword [var] . call var . add esp, var . jmp var . push dword [var] . push edi . push dword [var] . call var . add esp, var . cmp dword [var], edi . je var . cmp dword [var], esi . jae var . call var . push var . pop ecx . mov dword [eax], ecx . mov esi, ecx . jmp var . push var . pop eax . pop edi . pop esi . pop ebp . ret . mov edi, edi
call var . jmp var . int . int . int . int . int . cmp ecx, dword [var] . jne var . ret 0 . jmp loc.0102e3fd . int . int . int . int . int . int . int . int . int . int . int . int . int . int . int . int . int . int . int . push ecx . lea ecx, [var] . sub ecx, eax . sbb eax, eax . not eax . and ecx, eax . mov eax, esp . and eax, var . cmp ecx, eax . jb var . mov eax, ecx . pop ecx . xchg eax, esp . mov eax, dword [eax] . mov dword [esp], eax . ret . sub eax, var . test dword [eax], eax . jmp var . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_memset] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_void___cdecl_operator_delete___void] . int . int
jmp dword [sym.imp.mscoree.dll__CorExeMain] . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al
call var . jmp var . int . int . int . int . int . cmp ecx, dword [section..data] . jne var . ret 0 . jmp loc.00401a77 . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_memset] . int . int . int . int . int . mov edi, edi . push ebp . mov ebp, esp . mov eax, dword [ebp + 8] . mov eax, dword [eax] . cmp dword [eax], var . jne var . cmp dword [eax + var], 3 . jne var . mov eax, dword [eax + var] . cmp eax, var . je var . cmp eax, var . je var . cmp eax, var . je var . cmp eax, var . jne var . call dword [sym.imp.msvcrt.dll_void___cdecl_terminate_void] . xor eax, eax . pop ebp . ret 4 . int . int . int . int . int . push var . call dword [sym.imp.KERNEL32.dll_SetUnhandledExceptionFilter] . xor eax, eax . ret . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll__XcptFilter] . int . int . int . int . int
call var . jmp var . int . int . int . int . int . push var . push dword fs:[0] . mov eax, dword [var] . mov dword [var], ebp . lea ebp, [var] . sub esp, eax . push ebx . push esi . push edi . mov eax, dword [var] . xor dword [ebp - 4], eax . xor eax, ebp . mov dword [ebp - var], eax . push eax . mov dword [ebp - var], esp . push dword [ebp - 8] . mov eax, dword [ebp - 4] . mov dword [ebp - 4], var . mov dword [ebp - 8], eax . lea eax, [ebp - var] . mov dword fs:[0], eax . ret . mov ecx, dword [var] . xor ecx, ebp . call var . jmp var . int . int . int . int . int . mov edi, edi . push ebp . mov ebp, esp . push dword [ebp + var] . push dword [ebp + var] . push dword [ebp + var] . push dword [ebp + 8] . push var . push var . call sub.msvcrt.dll__except_handler4_common . add esp, var . pop ebp . ret . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_memset] . int . int . int . int . int . cmp ecx, dword [var] . jne var
call var . jmp var . int . int . int . int . int . cmp ecx, dword [section..data] . jne var . ret 0 . jmp loc.01001cd7 . int . int . int . int . int . mov edi, edi . push ebp . mov ebp, esp . mov eax, dword [ebp + 8] . mov eax, dword [eax] . cmp dword [eax], var . jne var . cmp dword [eax + var], 3 . jne var . mov eax, dword [eax + var] . cmp eax, var . je var . cmp eax, var . je var . cmp eax, var . je var . cmp eax, var . jne var . call dword [sym.imp.msvcrt.dll_void___cdecl_terminate_void] . xor eax, eax . pop ebp . ret 4 . int . int . int . int . int . push var . call dword [sym.imp.KERNEL32.dll_SetUnhandledExceptionFilter] . xor eax, eax . ret . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll__XcptFilter] . int . int . int . int . int . int . int . int . int . int
jmp dword [sym.imp.mscoree.dll__CorExeMain] . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al
call var . jmp var . int . int . int . int . int . cmp ecx, dword [var] . jne var . ret 0 . jmp loc.0100b667 . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_void___cdecl_operator_delete_void] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_void_____cdecl_operator_new_unsigned_int] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll___CxxFrameHandler3] . int . int . int . int . int . push eax . push dword fs:[0] . lea eax, [var] . sub esp, dword [var] . push ebx . push esi . push edi . mov dword [eax], ebp . mov ebp, eax . mov eax, dword [var] . xor eax, ebp . push eax . push dword [ebp - 4] . mov dword [ebp - 4], var . lea eax, [ebp - var] . mov dword fs:[0], eax . ret . int . int . int . int . int . mov ecx, dword [var] . mov dword fs:[0], ecx . pop ecx . pop edi . pop edi
call var . jmp var . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_void___cdecl_operator_delete_void] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_free] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_memcpy_s] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_wcsncpy_s] . int . int . int . int . int . int . push var . push dword fs:[0] . mov eax, dword [var] . mov dword [var], ebp . lea ebp, [var] . sub esp, eax . push ebx . push esi . push edi . mov eax, dword [var] . xor dword [ebp - 4], eax . xor eax, ebp . push eax . mov dword [ebp - var], esp . push dword [ebp - 8] . mov eax, dword [ebp - 4] . mov dword [ebp - 4], var . mov dword [ebp - 8], eax . lea eax, [ebp - var] . mov dword fs:[0], eax . ret . mov ecx, dword [var] . mov dword fs:[0], ecx . pop ecx . pop edi . pop edi . pop esi . pop ebx
call var . jmp var . int . int . int . int . int . cmp ecx, dword [section..data] . jne var . ret 0 . jmp loc.01003b9d . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_memset] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_memcpy] . int . int . int . int . int . mov edi, edi . push ebp . mov ebp, esp . mov eax, dword [ebp + 8] . mov eax, dword [eax] . cmp dword [eax], var . jne var . cmp dword [eax + var], 3 . jne var . mov eax, dword [eax + var] . cmp eax, var . je var . cmp eax, var . je var . cmp eax, var . je var . cmp eax, var . jne var . call dword [sym.imp.msvcrt.dll_void___cdecl_terminate_void] . xor eax, eax . pop ebp . ret 4 . int . int . int . int . int . push var . call dword [sym.imp.KERNEL32.dll_SetUnhandledExceptionFilter] . xor eax, eax . ret . int . int . int
call var . jmp var . int . int . int . int . int . cmp ecx, dword [var] . jne var . ret 0 . jmp loc.010078fd . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_swprintf_s] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_memset] . int . int . int . int . int . int . push var . push dword fs:[0] . mov eax, dword [var] . mov dword [var], ebp . lea ebp, [var] . sub esp, eax . push ebx . push esi . push edi . mov eax, dword [var] . xor dword [ebp - 4], eax . xor eax, ebp . mov dword [ebp - var], eax . push eax . mov dword [ebp - var], esp . push dword [ebp - 8] . mov eax, dword [ebp - 4] . mov dword [ebp - 4], var . mov dword [ebp - 8], eax . lea eax, [ebp - var] . mov dword fs:[0], eax . ret . mov ecx, dword [var] . xor ecx, ebp . call var . jmp var . int . int . int . int . int . mov edi, edi . push ebp . mov ebp, esp
call var . jmp var . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_public:_void___thiscall_exception::constructor_char_const___const_const] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_public_virtual:_char_const_____thiscall_exception::what_void_const] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_public_virtual:_void___thiscall_exception::_destructor_void] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_public:_void___thiscall_exception::constructor_class_exception_const] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_memmove_s] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_memcpy_s] . int . int . int . int . int . mov edi, edi . push ebp . mov ebp, esp . sub esp, var . mov eax, dword [var] . xor eax, ebp . mov dword [var], eax . mov dword [var], eax . mov dword [var], ecx . mov dword [var], edx . mov dword [var], ebx . mov dword [var], esi . mov dword [var], edi . mov word [var], ss . mov word [var], cs . mov word [var], ds
call var . push var . push var . call var . push dword [var] . call var . pop ecx . mov dword [var], eax . and dword [var], 0 . lea eax, [lpStartupInfo] . push eax . call dword [sym.imp.KERNEL32.dll_GetStartupInfoA] . mov dword [var], var . mov dword [lpVersionInformation], var . lea eax, [lpVersionInformation] . push eax . call dword [sym.imp.KERNEL32.dll_GetVersionExA] . test eax, eax . je var . mov ecx, dword [var] . and ecx, var . mov edi, dword [var] . cmp edi, 2 . jne var . mov edx, dword [var] . mov eax, edx . shl eax, 8 . mov esi, dword [var] . add eax, esi . mov dword [var], edi . mov dword [var], eax . mov dword [var], edx . mov dword [var], esi . mov dword [var], ecx . call var . mov dword [var], eax . xor ebx, ebx . inc ebx . push ebx . call var . pop ecx . test eax, eax . je var . call var . test eax, eax . je var . mov dword [var], ebx . call var . test eax, eax . jl var . call dword [sym.imp.KERNEL32.dll_GetCommandLineA] . mov dword [var], eax . call var . mov dword [var], eax . call var . test eax, eax . jl var . call var . test eax, eax . jl var . push ebx . call var . pop ecx . test eax, eax
call var . push var . push var . call var . xor ebx, ebx . mov dword [ebp - var], ebx . mov dword [ebp - 4], ebx . lea eax, [ebp - var] . push eax . call dword [sym.imp.KERNEL32.dll_GetStartupInfoA] . mov dword [ebp - 4], var . mov dword [ebp - 4], 1 . mov eax, dword fs:[var] . mov esi, dword [eax + 4] . mov edi, var . push 0 . push esi . push edi . call dword [sym.imp.KERNEL32.dll_InterlockedCompareExchange] . test eax, eax . jne var . xor esi, esi . inc esi . mov eax, dword [var] . cmp eax, esi . je var . mov eax, dword [var] . test eax, eax . jne var . mov dword [var], esi . push var . push var . call var . pop ecx . pop ecx . test eax, eax . jne var . mov eax, dword [var] . cmp eax, esi . jne var . push var . push var . call sub.msvcrt.dll__initterm . pop ecx . pop ecx . mov dword [var], 2 . test ebx, ebx . jne var . push ebx . push edi . call dword [sym.imp.KERNEL32.dll_InterlockedExchange] . cmp dword [var], 0 . jne var . mov eax, dword [sym.imp.msvcrt.dll__acmdln] . mov esi, dword [eax] . nop . nop . nop . nop . nop . nop . nop . nop . nop
call var . jmp var . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_void___cdecl_operator_delete_void] . int . int . int . int . int . cmp ecx, dword [var] . jne var . ret 0 . jmp loc.0100ada7 . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_memset] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll__purecall] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_void_____cdecl_operator_new_unsigned_int] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_void___cdecl_operator_delete___void] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_void_____cdecl_operator_new___unsigned_int] . int . int . int . int . int . mov edi, edi . push ebp . mov ebp, esp . mov eax, dword [ebp + 8] . mov eax, dword [eax] . cmp dword [eax], var . jne var
0000:1b4c b8ad02 mov ax, var . 0000:1b4f 8ed0 mov ss, ax . 0000:1b51 8d260004 lea sp, [var] . 0000:1b55 fc cld . 0000:1b56 2ec6068a0400 mov byte cs:[var], 0 . 0000:1b5c 0e push cs . 0000:1b5d 1f pop ds . 0000:1b5e 0e push cs . 0000:1b5f 07 pop es . 0000:1b60 b4b7 mov ah, var . 0000:1b62 b000 mov al, 0 . 0000:1b64 cd2f int var . 0000:1b66 3cff cmp al, var . 0000:1b68 753f jne var . 0000:1b6a ba0000 mov dx, 0 . 0000:1b6d b4b7 mov ah, var . 0000:1b6f b010 mov al, var . 0000:1b71 cd2f int var . 0000:1b73 2e3b164c01 cmp dx, word cs:[var] . 0000:1b78 7517 jne var . 0000:1b7a e8e104 call var . 0000:1b7d b80900 mov ax, 9 . 0000:1b80 bb0200 mov bx, 2 . 0000:1b83 33c9 xor cx, cx . 0000:1b85 32d2 xor dl, dl . 0000:1b87 b6ff mov dh, var . 0000:1b89 e80fea call var . 0000:1b8c b0fc mov al, var . 0000:1b8e e82304 call var . 0000:1b91 e8ca04 call var . 0000:1b94 b80100 mov ax, 1 . 0000:1b97 bb0200 mov bx, 2 . 0000:1b9a 33c9 xor cx, cx . 0000:1b9c 32d2 xor dl, dl . 0000:1b9e b6ff mov dh, var . 0000:1ba0 e8f8e9 call var . 0000:1ba3 b8fe00 mov ax, var . 0000:1ba6 e80b04 call var . 0000:1ba9 2ec7068f01ff. mov word cs:[var], var . 0000:1bb0 e8f600 call var . 0000:1bb3 bb0400 mov bx, 4 . 0000:1bb6 b43e mov ah, var . 0000:1bb8 e8e4fe call var . 0000:1bbb 4b dec bx . 0000:1bbc 79f8 jns var . 0000:1bbe e8aa03 call var . 0000:1bc1 e81804 call var . 0000:1bc4 8d164a22 lea dx, [var] . 0000:1bc8 b104 mov cl, 4 . 0000:1bca d3ea shr dx, cl . 0000:1bcc b462 mov ah, var . 0000:1bce e8cefe call var . 0000:1bd1 8cc8 mov ax, cs . 0000:1bd3 2bc3 sub ax, bx . 0000:1bd5 03d0 add dx, ax . 0000:1bd7 b000 mov al, 0 . 0000:1bd9 b431 mov ah, var . 0000:1bdb e8c1fe call var . 0000:1bde 53 push bx . 0000:1bdf 51 push cx . 0000:1be0 52 push dx . 0000:1be1 57 push di . 0000:1be2 56 push si . 0000:1be3 1e push ds
jmp dword [sym.imp.mscoree.dll__CorExeMain] . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al . add byte [eax], al
call var . jmp var . int . int . int . int . int . cmp ecx, dword [var] . jne var . ret 0 . jmp loc.01003a57 . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll_memset] . int . int . int . int . int . int . jmp dword [sym.imp.msvcrt.dll___CxxFrameHandler3] . int . int . int . int . int . push eax . push dword fs:[0] . lea eax, [var] . sub esp, dword [var] . push ebx . push esi . push edi . mov dword [eax], ebp . mov ebp, eax . mov eax, dword [var] . xor eax, ebp . push eax . push dword [ebp - 4] . mov dword [ebp - 4], var . lea eax, [ebp - var] . mov dword fs:[0], eax . ret . int . int . int . int . int . mov ecx, dword [var] . mov dword fs:[0], ecx . pop ecx . pop edi . pop edi . pop esi . pop ebx . mov esp, ebp . pop ebp . push ecx . ret . int . int